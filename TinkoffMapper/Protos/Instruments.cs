// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/instruments.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tinkoff.Proto.InvestApi.V1 {

  /// <summary>Holder for reflection information generated from Protos/instruments.proto</summary>
  public static partial class InstrumentsReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/instruments.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstrumentsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b3MvaW5zdHJ1bWVudHMucHJvdG8SJXRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3Rh",
            "bXAucHJvdG8aE1Byb3Rvcy9jb21tb24ucHJvdG8ifQoXVHJhZGluZ1NjaGVk",
            "dWxlc1JlcXVlc3QSEAoIZXhjaGFuZ2UYASABKAkSKAoEZnJvbRgCIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASJgoCdG8YAyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wImUKGFRyYWRpbmdTY2hlZHVsZXNSZXNw",
            "b25zZRJJCglleGNoYW5nZXMYASADKAsyNi50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLlRyYWRpbmdTY2hlZHVsZSJkCg9UcmFkaW5n",
            "U2NoZWR1bGUSEAoIZXhjaGFuZ2UYASABKAkSPwoEZGF5cxgCIAMoCzIxLnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuVHJhZGluZ0Rh",
            "eSLOBQoKVHJhZGluZ0RheRIoCgRkYXRlGAEgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIWCg5pc190cmFkaW5nX2RheRgCIAEoCBIuCgpzdGFy",
            "dF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghl",
            "bmRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASPgoa",
            "b3BlbmluZ19hdWN0aW9uX3N0YXJ0X3RpbWUYByABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjwKGGNsb3NpbmdfYXVjdGlvbl9lbmRfdGltZRgI",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRgoiZXZlbmluZ19v",
            "cGVuaW5nX2F1Y3Rpb25fc3RhcnRfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASNgoSZXZlbmluZ19zdGFydF90aW1lGAogASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI0ChBldmVuaW5nX2VuZF90aW1l",
            "GAsgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI3ChNjbGVhcmlu",
            "Z19zdGFydF90aW1lGAwgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBI1ChFjbGVhcmluZ19lbmRfdGltZRgNIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASOAoUcHJlbWFya2V0X3N0YXJ0X3RpbWUYDiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYKEnByZW1hcmtldF9lbmRfdGlt",
            "ZRgPIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBKBAgFEAZKBAgG",
            "EAcifQoRSW5zdHJ1bWVudFJlcXVlc3QSSAoHaWRfdHlwZRgBIAEoDjI3LnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVu",
            "dElkVHlwZRISCgpjbGFzc19jb2RlGAIgASgJEgoKAmlkGAMgASgJImgKEklu",
            "c3RydW1lbnRzUmVxdWVzdBJSChFpbnN0cnVtZW50X3N0YXR1cxgBIAEoDjI3",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1",
            "bWVudFN0YXR1cyJPCgxCb25kUmVzcG9uc2USPwoKaW5zdHJ1bWVudBgBIAEo",
            "CzIrLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQm9u",
            "ZCJRCg1Cb25kc1Jlc3BvbnNlEkAKC2luc3RydW1lbnRzGAEgAygLMisudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Cb25kIncKFUdl",
            "dEJvbmRDb3Vwb25zUmVxdWVzdBIMCgRmaWdpGAEgASgJEigKBGZyb20YAiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiYKAnRvGAMgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJXChZHZXRCb25kQ291cG9uc1Jl",
            "c3BvbnNlEj0KBmV2ZW50cxgBIAMoCzItLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuQ291cG9uIqADCgZDb3Vwb24SDAoEZmlnaRgB",
            "IAEoCRIvCgtjb3Vwb25fZGF0ZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASFQoNY291cG9uX251bWJlchgDIAEoAxIsCghmaXhfZGF0ZRgE",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRwoMcGF5X29uZV9i",
            "b25kGAUgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5Nb25leVZhbHVlEkYKC2NvdXBvbl90eXBlGAYgASgOMjEudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Db3Vwb25UeXBlEjUK",
            "EWNvdXBvbl9zdGFydF9kYXRlGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBIzCg9jb3Vwb25fZW5kX2RhdGUYCCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhUKDWNvdXBvbl9wZXJpb2QYCSABKAUiVwoQQ3Vy",
            "cmVuY3lSZXNwb25zZRJDCgppbnN0cnVtZW50GAEgASgLMi8udGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5DdXJyZW5jeSJaChJDdXJy",
            "ZW5jaWVzUmVzcG9uc2USRAoLaW5zdHJ1bWVudHMYASADKAsyLy50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkN1cnJlbmN5Ik0KC0V0",
            "ZlJlc3BvbnNlEj4KCmluc3RydW1lbnQYASABKAsyKi50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkV0ZiJPCgxFdGZzUmVzcG9uc2US",
            "PwoLaW5zdHJ1bWVudHMYASADKAsyKi50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkV0ZiJTCg5GdXR1cmVSZXNwb25zZRJBCgppbnN0",
            "cnVtZW50GAEgASgLMi0udGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5GdXR1cmUiVQoPRnV0dXJlc1Jlc3BvbnNlEkIKC2luc3RydW1l",
            "bnRzGAEgAygLMi0udGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5GdXR1cmUiUwoOT3B0aW9uUmVzcG9uc2USQQoKaW5zdHJ1bWVudBgB",
            "IAEoCzItLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "T3B0aW9uIlUKD09wdGlvbnNSZXNwb25zZRJCCgtpbnN0cnVtZW50cxgBIAMo",
            "CzItLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuT3B0",
            "aW9uIq0PCgZPcHRpb24SCwoDdWlkGAEgASgJEhQKDHBvc2l0aW9uX3VpZBgC",
            "IAEoCRIOCgZ0aWNrZXIYAyABKAkSEgoKY2xhc3NfY29kZRgEIAEoCRIgChhi",
            "YXNpY19hc3NldF9wb3NpdGlvbl91aWQYBSABKAkSVAoOdHJhZGluZ19zdGF0",
            "dXMYFSABKA4yPC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLlNlY3VyaXR5VHJhZGluZ1N0YXR1cxJKCg1yZWFsX2V4Y2hhbmdlGB8g",
            "ASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5S",
            "ZWFsRXhjaGFuZ2USSQoJZGlyZWN0aW9uGCkgASgOMjYudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5PcHRpb25EaXJlY3Rpb24STgoM",
            "cGF5bWVudF90eXBlGCogASgOMjgudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5PcHRpb25QYXltZW50VHlwZRJBCgVzdHlsZRgrIAEo",
            "DjIyLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuT3B0",
            "aW9uU3R5bGUSVAoPc2V0dGxlbWVudF90eXBlGCwgASgOMjsudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5PcHRpb25TZXR0bGVtZW50",
            "VHlwZRIMCgRuYW1lGGUgASgJEhAKCGN1cnJlbmN5GG8gASgJEhsKE3NldHRs",
            "ZW1lbnRfY3VycmVuY3kYcCABKAkSEwoKYXNzZXRfdHlwZRiDASABKAkSFAoL",
            "YmFzaWNfYXNzZXQYhAEgASgJEhEKCGV4Y2hhbmdlGI0BIAEoCRIYCg9jb3Vu",
            "dHJ5X29mX3Jpc2sYlwEgASgJEh0KFGNvdW50cnlfb2Zfcmlza19uYW1lGJgB",
            "IAEoCRIPCgZzZWN0b3IYoQEgASgJEgwKA2xvdBjJASABKAUSSwoQYmFzaWNf",
            "YXNzZXRfc2l6ZRjTASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJACgVrbG9uZxjdASABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJB",
            "CgZrc2hvcnQY3gEgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5RdW90YXRpb24SQAoFZGxvbmcY3wEgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQQoG",
            "ZHNob3J0GOABIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuUXVvdGF0aW9uEkQKCWRsb25nX21pbhjhASABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJF",
            "Cgpkc2hvcnRfbWluGOIBIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuUXVvdGF0aW9uEk4KE21pbl9wcmljZV9pbmNyZW1l",
            "bnQY5wEgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5RdW90YXRpb24SSAoMc3RyaWtlX3ByaWNlGPEBIAEoCzIxLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuTW9uZXlWYWx1ZRI0",
            "Cg9leHBpcmF0aW9uX2RhdGUYrQIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBI1ChBmaXJzdF90cmFkZV9kYXRlGLcCIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASNAoPbGFzdF90cmFkZV9kYXRlGLgCIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOwoWZmlyc3RfMW1pbl9jYW5k",
            "bGVfZGF0ZRjBAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjsK",
            "FmZpcnN0XzFkYXlfY2FuZGxlX2RhdGUYwgIgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIbChJzaG9ydF9lbmFibGVkX2ZsYWcYkQMgASgIEhUK",
            "DGZvcl9paXNfZmxhZxiSAyABKAgSEQoIb3RjX2ZsYWcYkwMgASgIEhsKEmJ1",
            "eV9hdmFpbGFibGVfZmxhZxiUAyABKAgSHAoTc2VsbF9hdmFpbGFibGVfZmxh",
            "ZxiVAyABKAgSHwoWZm9yX3F1YWxfaW52ZXN0b3JfZmxhZxiWAyABKAgSFQoM",
            "d2Vla2VuZF9mbGFnGJcDIAEoCBIZChBibG9ja2VkX3RjYV9mbGFnGJgDIAEo",
            "CBIhChhhcGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYmQMgASgIIlEKDVNoYXJl",
            "UmVzcG9uc2USQAoKaW5zdHJ1bWVudBgBIAEoCzIsLnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuU2hhcmUiUwoOU2hhcmVzUmVzcG9u",
            "c2USQQoLaW5zdHJ1bWVudHMYASADKAsyLC50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLlNoYXJlIqoPCgRCb25kEgwKBGZpZ2kYASAB",
            "KAkSDgoGdGlja2VyGAIgASgJEhIKCmNsYXNzX2NvZGUYAyABKAkSDAoEaXNp",
            "bhgEIAEoCRILCgNsb3QYBSABKAUSEAoIY3VycmVuY3kYBiABKAkSPwoFa2xv",
            "bmcYByABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLlF1b3RhdGlvbhJACgZrc2hvcnQYCCABKAsyMC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhI/CgVkbG9uZxgJ",
            "IAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UXVvdGF0aW9uEkAKBmRzaG9ydBgKIAEoCzIwLnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkMKCWRsb25nX21pbhgL",
            "IAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UXVvdGF0aW9uEkQKCmRzaG9ydF9taW4YDCABKAsyMC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIaChJzaG9ydF9l",
            "bmFibGVkX2ZsYWcYDSABKAgSDAoEbmFtZRgPIAEoCRIQCghleGNoYW5nZRgQ",
            "IAEoCRIgChhjb3Vwb25fcXVhbnRpdHlfcGVyX3llYXIYESABKAUSMQoNbWF0",
            "dXJpdHlfZGF0ZRgSIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "QgoHbm9taW5hbBgTIAEoCzIxLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuTW9uZXlWYWx1ZRJKCg9pbml0aWFsX25vbWluYWwYFCAB",
            "KAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1v",
            "bmV5VmFsdWUSMgoOc3RhdGVfcmVnX2RhdGUYFSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjIKDnBsYWNlbWVudF9kYXRlGBYgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBJKCg9wbGFjZW1lbnRfcHJpY2UYFyAB",
            "KAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1v",
            "bmV5VmFsdWUSRAoJYWNpX3ZhbHVlGBggASgLMjEudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5Nb25leVZhbHVlEhcKD2NvdW50cnlf",
            "b2ZfcmlzaxgZIAEoCRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgaIAEoCRIO",
            "CgZzZWN0b3IYGyABKAkSEgoKaXNzdWVfa2luZBgcIAEoCRISCgppc3N1ZV9z",
            "aXplGB0gASgDEhcKD2lzc3VlX3NpemVfcGxhbhgeIAEoAxJUCg50cmFkaW5n",
            "X3N0YXR1cxgfIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuU2VjdXJpdHlUcmFkaW5nU3RhdHVzEhAKCG90Y19mbGFnGCAg",
            "ASgIEhoKEmJ1eV9hdmFpbGFibGVfZmxhZxghIAEoCBIbChNzZWxsX2F2YWls",
            "YWJsZV9mbGFnGCIgASgIEhwKFGZsb2F0aW5nX2NvdXBvbl9mbGFnGCMgASgI",
            "EhYKDnBlcnBldHVhbF9mbGFnGCQgASgIEhkKEWFtb3J0aXphdGlvbl9mbGFn",
            "GCUgASgIEk0KE21pbl9wcmljZV9pbmNyZW1lbnQYJiABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIgChhh",
            "cGlfdHJhZGVfYXZhaWxhYmxlX2ZsYWcYJyABKAgSCwoDdWlkGCggASgJEkoK",
            "DXJlYWxfZXhjaGFuZ2UYKSABKA4yMy50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlJlYWxFeGNoYW5nZRIUCgxwb3NpdGlvbl91aWQY",
            "KiABKAkSFAoMZm9yX2lpc19mbGFnGDMgASgIEh4KFmZvcl9xdWFsX2ludmVz",
            "dG9yX2ZsYWcYNCABKAgSFAoMd2Vla2VuZF9mbGFnGDUgASgIEhgKEGJsb2Nr",
            "ZWRfdGNhX2ZsYWcYNiABKAgSGQoRc3Vib3JkaW5hdGVkX2ZsYWcYNyABKAgS",
            "OgoWZmlyc3RfMW1pbl9jYW5kbGVfZGF0ZRg9IAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASOgoWZmlyc3RfMWRheV9jYW5kbGVfZGF0ZRg+IAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASRAoKcmlza19sZXZlbBg/",
            "IAEoDjIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "Umlza0xldmVsIqsKCghDdXJyZW5jeRIMCgRmaWdpGAEgASgJEg4KBnRpY2tl",
            "chgCIAEoCRISCgpjbGFzc19jb2RlGAMgASgJEgwKBGlzaW4YBCABKAkSCwoD",
            "bG90GAUgASgFEhAKCGN1cnJlbmN5GAYgASgJEj8KBWtsb25nGAcgASgLMjAu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRp",
            "b24SQAoGa3Nob3J0GAggASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SPwoFZGxvbmcYCSABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJA",
            "CgZkc2hvcnQYCiABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlF1b3RhdGlvbhJDCglkbG9uZ19taW4YCyABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJE",
            "Cgpkc2hvcnRfbWluGAwgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SGgoSc2hvcnRfZW5hYmxlZF9mbGFn",
            "GA0gASgIEgwKBG5hbWUYDyABKAkSEAoIZXhjaGFuZ2UYECABKAkSQgoHbm9t",
            "aW5hbBgRIAEoCzIxLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJh",
            "Y3QudjEuTW9uZXlWYWx1ZRIXCg9jb3VudHJ5X29mX3Jpc2sYEiABKAkSHAoU",
            "Y291bnRyeV9vZl9yaXNrX25hbWUYEyABKAkSVAoOdHJhZGluZ19zdGF0dXMY",
            "FCABKA4yPC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "LlNlY3VyaXR5VHJhZGluZ1N0YXR1cxIQCghvdGNfZmxhZxgVIAEoCBIaChJi",
            "dXlfYXZhaWxhYmxlX2ZsYWcYFiABKAgSGwoTc2VsbF9hdmFpbGFibGVfZmxh",
            "ZxgXIAEoCBIZChFpc29fY3VycmVuY3lfbmFtZRgYIAEoCRJNChNtaW5fcHJp",
            "Y2VfaW5jcmVtZW50GBkgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SIAoYYXBpX3RyYWRlX2F2YWlsYWJs",
            "ZV9mbGFnGBogASgIEgsKA3VpZBgbIAEoCRJKCg1yZWFsX2V4Y2hhbmdlGBwg",
            "ASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5S",
            "ZWFsRXhjaGFuZ2USFAoMcG9zaXRpb25fdWlkGB0gASgJEhQKDGZvcl9paXNf",
            "ZmxhZxgpIAEoCBIeChZmb3JfcXVhbF9pbnZlc3Rvcl9mbGFnGDQgASgIEhQK",
            "DHdlZWtlbmRfZmxhZxg1IAEoCBIYChBibG9ja2VkX3RjYV9mbGFnGDYgASgI",
            "EjoKFmZpcnN0XzFtaW5fY2FuZGxlX2RhdGUYOCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjoKFmZpcnN0XzFkYXlfY2FuZGxlX2RhdGUYOSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIsoLCgNFdGYSDAoEZmln",
            "aRgBIAEoCRIOCgZ0aWNrZXIYAiABKAkSEgoKY2xhc3NfY29kZRgDIAEoCRIM",
            "CgRpc2luGAQgASgJEgsKA2xvdBgFIAEoBRIQCghjdXJyZW5jeRgGIAEoCRI/",
            "CgVrbG9uZxgHIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuUXVvdGF0aW9uEkAKBmtzaG9ydBgIIAEoCzIwLnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEj8KBWRs",
            "b25nGAkgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5RdW90YXRpb24SQAoGZHNob3J0GAogASgLMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQwoJZGxvbmdf",
            "bWluGAsgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5RdW90YXRpb24SRAoKZHNob3J0X21pbhgMIAEoCzIwLnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhoKEnNo",
            "b3J0X2VuYWJsZWRfZmxhZxgNIAEoCBIMCgRuYW1lGA8gASgJEhAKCGV4Y2hh",
            "bmdlGBAgASgJEkoKEGZpeGVkX2NvbW1pc3Npb24YESABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhISCgpm",
            "b2N1c190eXBlGBIgASgJEjEKDXJlbGVhc2VkX2RhdGUYEyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEkQKCm51bV9zaGFyZXMYFCABKAsyMC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlv",
            "bhIXCg9jb3VudHJ5X29mX3Jpc2sYFSABKAkSHAoUY291bnRyeV9vZl9yaXNr",
            "X25hbWUYFiABKAkSDgoGc2VjdG9yGBcgASgJEhgKEHJlYmFsYW5jaW5nX2Zy",
            "ZXEYGCABKAkSVAoOdHJhZGluZ19zdGF0dXMYGSABKA4yPC50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNlY3VyaXR5VHJhZGluZ1N0",
            "YXR1cxIQCghvdGNfZmxhZxgaIAEoCBIaChJidXlfYXZhaWxhYmxlX2ZsYWcY",
            "GyABKAgSGwoTc2VsbF9hdmFpbGFibGVfZmxhZxgcIAEoCBJNChNtaW5fcHJp",
            "Y2VfaW5jcmVtZW50GB0gASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SIAoYYXBpX3RyYWRlX2F2YWlsYWJs",
            "ZV9mbGFnGB4gASgIEgsKA3VpZBgfIAEoCRJKCg1yZWFsX2V4Y2hhbmdlGCAg",
            "ASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5S",
            "ZWFsRXhjaGFuZ2USFAoMcG9zaXRpb25fdWlkGCEgASgJEhQKDGZvcl9paXNf",
            "ZmxhZxgpIAEoCBIeChZmb3JfcXVhbF9pbnZlc3Rvcl9mbGFnGCogASgIEhQK",
            "DHdlZWtlbmRfZmxhZxgrIAEoCBIYChBibG9ja2VkX3RjYV9mbGFnGCwgASgI",
            "EjoKFmZpcnN0XzFtaW5fY2FuZGxlX2RhdGUYOCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEjoKFmZpcnN0XzFkYXlfY2FuZGxlX2RhdGUYOSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIpkMCgZGdXR1cmUSDAoE",
            "ZmlnaRgBIAEoCRIOCgZ0aWNrZXIYAiABKAkSEgoKY2xhc3NfY29kZRgDIAEo",
            "CRILCgNsb3QYBCABKAUSEAoIY3VycmVuY3kYBSABKAkSPwoFa2xvbmcYBiAB",
            "KAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1",
            "b3RhdGlvbhJACgZrc2hvcnQYByABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhI/CgVkbG9uZxgIIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEkAKBmRzaG9ydBgJIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkMKCWRsb25nX21pbhgKIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEkQKCmRzaG9ydF9taW4YCyABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIaChJzaG9ydF9lbmFibGVk",
            "X2ZsYWcYDCABKAgSDAoEbmFtZRgNIAEoCRIQCghleGNoYW5nZRgOIAEoCRI0",
            "ChBmaXJzdF90cmFkZV9kYXRlGA8gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBIzCg9sYXN0X3RyYWRlX2RhdGUYECABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhQKDGZ1dHVyZXNfdHlwZRgRIAEoCRISCgphc3Nl",
            "dF90eXBlGBIgASgJEhMKC2Jhc2ljX2Fzc2V0GBMgASgJEkoKEGJhc2ljX2Fz",
            "c2V0X3NpemUYFCABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlF1b3RhdGlvbhIXCg9jb3VudHJ5X29mX3Jpc2sYFSABKAkS",
            "HAoUY291bnRyeV9vZl9yaXNrX25hbWUYFiABKAkSDgoGc2VjdG9yGBcgASgJ",
            "EjMKD2V4cGlyYXRpb25fZGF0ZRgYIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASVAoOdHJhZGluZ19zdGF0dXMYGSABKA4yPC50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNlY3VyaXR5VHJhZGluZ1N0",
            "YXR1cxIQCghvdGNfZmxhZxgaIAEoCBIaChJidXlfYXZhaWxhYmxlX2ZsYWcY",
            "GyABKAgSGwoTc2VsbF9hdmFpbGFibGVfZmxhZxgcIAEoCBJNChNtaW5fcHJp",
            "Y2VfaW5jcmVtZW50GB0gASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5RdW90YXRpb24SIAoYYXBpX3RyYWRlX2F2YWlsYWJs",
            "ZV9mbGFnGB4gASgIEgsKA3VpZBgfIAEoCRJKCg1yZWFsX2V4Y2hhbmdlGCAg",
            "ASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5S",
            "ZWFsRXhjaGFuZ2USFAoMcG9zaXRpb25fdWlkGCEgASgJEiAKGGJhc2ljX2Fz",
            "c2V0X3Bvc2l0aW9uX3VpZBgiIAEoCRIUCgxmb3JfaWlzX2ZsYWcYKSABKAgS",
            "HgoWZm9yX3F1YWxfaW52ZXN0b3JfZmxhZxgqIAEoCBIUCgx3ZWVrZW5kX2Zs",
            "YWcYKyABKAgSGAoQYmxvY2tlZF90Y2FfZmxhZxgsIAEoCBI6ChZmaXJzdF8x",
            "bWluX2NhbmRsZV9kYXRlGDggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBI6ChZmaXJzdF8xZGF5X2NhbmRsZV9kYXRlGDkgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcCLWCwoFU2hhcmUSDAoEZmlnaRgBIAEoCRIO",
            "CgZ0aWNrZXIYAiABKAkSEgoKY2xhc3NfY29kZRgDIAEoCRIMCgRpc2luGAQg",
            "ASgJEgsKA2xvdBgFIAEoBRIQCghjdXJyZW5jeRgGIAEoCRI/CgVrbG9uZxgH",
            "IAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UXVvdGF0aW9uEkAKBmtzaG9ydBgIIAEoCzIwLnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEj8KBWRsb25nGAkgASgL",
            "MjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90",
            "YXRpb24SQAoGZHNob3J0GAogASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQwoJZGxvbmdfbWluGAsgASgL",
            "MjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90",
            "YXRpb24SRAoKZHNob3J0X21pbhgMIAEoCzIwLnRpbmtvZmYucHVibGljLmlu",
            "dmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhoKEnNob3J0X2VuYWJs",
            "ZWRfZmxhZxgNIAEoCBIMCgRuYW1lGA8gASgJEhAKCGV4Y2hhbmdlGBAgASgJ",
            "EiwKCGlwb19kYXRlGBEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBISCgppc3N1ZV9zaXplGBIgASgDEhcKD2NvdW50cnlfb2ZfcmlzaxgTIAEo",
            "CRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgUIAEoCRIOCgZzZWN0b3IYFSAB",
            "KAkSFwoPaXNzdWVfc2l6ZV9wbGFuGBYgASgDEkIKB25vbWluYWwYFyABKAsy",
            "MS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1vbmV5",
            "VmFsdWUSVAoOdHJhZGluZ19zdGF0dXMYGSABKA4yPC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNlY3VyaXR5VHJhZGluZ1N0YXR1",
            "cxIQCghvdGNfZmxhZxgaIAEoCBIaChJidXlfYXZhaWxhYmxlX2ZsYWcYGyAB",
            "KAgSGwoTc2VsbF9hdmFpbGFibGVfZmxhZxgcIAEoCBIWCg5kaXZfeWllbGRf",
            "ZmxhZxgdIAEoCBJECgpzaGFyZV90eXBlGB4gASgOMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5TaGFyZVR5cGUSTQoTbWluX3By",
            "aWNlX2luY3JlbWVudBgfIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuUXVvdGF0aW9uEiAKGGFwaV90cmFkZV9hdmFpbGFi",
            "bGVfZmxhZxggIAEoCBILCgN1aWQYISABKAkSSgoNcmVhbF9leGNoYW5nZRgi",
            "IAEoDjIzLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UmVhbEV4Y2hhbmdlEhQKDHBvc2l0aW9uX3VpZBgjIAEoCRIUCgxmb3JfaWlz",
            "X2ZsYWcYLiABKAgSHgoWZm9yX3F1YWxfaW52ZXN0b3JfZmxhZxgvIAEoCBIU",
            "Cgx3ZWVrZW5kX2ZsYWcYMCABKAgSGAoQYmxvY2tlZF90Y2FfZmxhZxgxIAEo",
            "CBI6ChZmaXJzdF8xbWluX2NhbmRsZV9kYXRlGDggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBI6ChZmaXJzdF8xZGF5X2NhbmRsZV9kYXRlGDkg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJ8ChpHZXRBY2NydWVk",
            "SW50ZXJlc3RzUmVxdWVzdBIMCgRmaWdpGAEgASgJEigKBGZyb20YAiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiYKAnRvGAMgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcCJwChtHZXRBY2NydWVkSW50ZXJlc3Rz",
            "UmVzcG9uc2USUQoRYWNjcnVlZF9pbnRlcmVzdHMYASADKAsyNi50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkFjY3J1ZWRJbnRlcmVz",
            "dCKIAgoPQWNjcnVlZEludGVyZXN0EigKBGRhdGUYASABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEj8KBXZhbHVlGAIgASgLMjAudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SRwoNdmFs",
            "dWVfcGVyY2VudBgDIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuUXVvdGF0aW9uEkEKB25vbWluYWwYBCABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbiIn",
            "ChdHZXRGdXR1cmVzTWFyZ2luUmVxdWVzdBIMCgRmaWdpGAEgASgJIuQCChhH",
            "ZXRGdXR1cmVzTWFyZ2luUmVzcG9uc2USUAoVaW5pdGlhbF9tYXJnaW5fb25f",
            "YnV5GAEgASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFj",
            "dC52MS5Nb25leVZhbHVlElEKFmluaXRpYWxfbWFyZ2luX29uX3NlbGwYAiAB",
            "KAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLk1v",
            "bmV5VmFsdWUSTQoTbWluX3ByaWNlX2luY3JlbWVudBgDIAEoCzIwLnRpbmtv",
            "ZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uElQK",
            "Gm1pbl9wcmljZV9pbmNyZW1lbnRfYW1vdW50GAQgASgLMjAudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24iWwoSSW5z",
            "dHJ1bWVudFJlc3BvbnNlEkUKCmluc3RydW1lbnQYASABKAsyMS50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnQitwoK",
            "Ckluc3RydW1lbnQSDAoEZmlnaRgBIAEoCRIOCgZ0aWNrZXIYAiABKAkSEgoK",
            "Y2xhc3NfY29kZRgDIAEoCRIMCgRpc2luGAQgASgJEgsKA2xvdBgFIAEoBRIQ",
            "CghjdXJyZW5jeRgGIAEoCRI/CgVrbG9uZxgHIAEoCzIwLnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEkAKBmtzaG9y",
            "dBgIIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEj8KBWRsb25nGAkgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQAoGZHNob3J0GAog",
            "ASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5R",
            "dW90YXRpb24SQwoJZGxvbmdfbWluGAsgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SRAoKZHNob3J0X21p",
            "bhgMIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuUXVvdGF0aW9uEhoKEnNob3J0X2VuYWJsZWRfZmxhZxgNIAEoCBIMCgRu",
            "YW1lGA4gASgJEhAKCGV4Y2hhbmdlGA8gASgJEhcKD2NvdW50cnlfb2Zfcmlz",
            "axgQIAEoCRIcChRjb3VudHJ5X29mX3Jpc2tfbmFtZRgRIAEoCRIXCg9pbnN0",
            "cnVtZW50X3R5cGUYEiABKAkSVAoOdHJhZGluZ19zdGF0dXMYEyABKA4yPC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNlY3VyaXR5",
            "VHJhZGluZ1N0YXR1cxIQCghvdGNfZmxhZxgUIAEoCBIaChJidXlfYXZhaWxh",
            "YmxlX2ZsYWcYFSABKAgSGwoTc2VsbF9hdmFpbGFibGVfZmxhZxgWIAEoCBJN",
            "ChNtaW5fcHJpY2VfaW5jcmVtZW50GBcgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SIAoYYXBpX3RyYWRl",
            "X2F2YWlsYWJsZV9mbGFnGBggASgIEgsKA3VpZBgZIAEoCRJKCg1yZWFsX2V4",
            "Y2hhbmdlGBogASgOMjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5SZWFsRXhjaGFuZ2USFAoMcG9zaXRpb25fdWlkGBsgASgJEhQK",
            "DGZvcl9paXNfZmxhZxgkIAEoCBIeChZmb3JfcXVhbF9pbnZlc3Rvcl9mbGFn",
            "GCUgASgIEhQKDHdlZWtlbmRfZmxhZxgmIAEoCBIYChBibG9ja2VkX3RjYV9m",
            "bGFnGCcgASgIEk4KD2luc3RydW1lbnRfa2luZBgoIAEoDjI1LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFR5cGUS",
            "OgoWZmlyc3RfMW1pbl9jYW5kbGVfZGF0ZRg4IAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASOgoWZmlyc3RfMWRheV9jYW5kbGVfZGF0ZRg5IAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAidQoTR2V0RGl2aWRlbmRz",
            "UmVxdWVzdBIMCgRmaWdpGAEgASgJEigKBGZyb20YAiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEiYKAnRvGAMgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcCJaChRHZXREaXZpZGVuZHNSZXNwb25zZRJCCglkaXZp",
            "ZGVuZHMYASADKAsyLy50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkRpdmlkZW5kIoYECghEaXZpZGVuZBJHCgxkaXZpZGVuZF9uZXQY",
            "ASABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "Lk1vbmV5VmFsdWUSMAoMcGF5bWVudF9kYXRlGAIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIxCg1kZWNsYXJlZF9kYXRlGAMgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCg1sYXN0X2J1eV9kYXRlGAQgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCg1kaXZpZGVuZF90eXBl",
            "GAUgASgJEi8KC3JlY29yZF9kYXRlGAYgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBISCgpyZWd1bGFyaXR5GAcgASgJEkYKC2Nsb3NlX3ByaWNl",
            "GAggASgLMjEudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5Nb25leVZhbHVlEkUKC3lpZWxkX3ZhbHVlGAkgASgLMjAudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SLgoKY3Jl",
            "YXRlZF9hdBgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiGgoM",
            "QXNzZXRSZXF1ZXN0EgoKAmlkGAEgASgJIlAKDUFzc2V0UmVzcG9uc2USPwoF",
            "YXNzZXQYASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkFzc2V0RnVsbCIPCg1Bc3NldHNSZXF1ZXN0Ik4KDkFzc2V0c1Jl",
            "c3BvbnNlEjwKBmFzc2V0cxgBIAMoCzIsLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuQXNzZXQimAUKCUFzc2V0RnVsbBILCgN1aWQY",
            "ASABKAkSPgoEdHlwZRgCIAEoDjIwLnRpbmtvZmYucHVibGljLmludmVzdC5h",
            "cGkuY29udHJhY3QudjEuQXNzZXRUeXBlEgwKBG5hbWUYAyABKAkSEgoKbmFt",
            "ZV9icmllZhgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIuCgpkZWxldGVk",
            "X2F0GAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIWCg5yZXF1",
            "aXJlZF90ZXN0cxgHIAMoCRJICghjdXJyZW5jeRgIIAEoCzI0LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRDdXJyZW5jeUgA",
            "EkgKCHNlY3VyaXR5GAkgASgLMjQudGlua29mZi5wdWJsaWMuaW52ZXN0LmFw",
            "aS5jb250cmFjdC52MS5Bc3NldFNlY3VyaXR5SAASFAoMZ29zX3JlZ19jb2Rl",
            "GAogASgJEgsKA2NmaRgLIAEoCRIQCghjb2RlX25zZBgMIAEoCRIOCgZzdGF0",
            "dXMYDSABKAkSOwoFYnJhbmQYDiABKAsyLC50aW5rb2ZmLnB1YmxpYy5pbnZl",
            "c3QuYXBpLmNvbnRyYWN0LnYxLkJyYW5kEi4KCnVwZGF0ZWRfYXQYDyABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg8KB2JyX2NvZGUYECABKAkS",
            "FAoMYnJfY29kZV9uYW1lGBEgASgJEksKC2luc3RydW1lbnRzGBIgAygLMjYu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldElu",
            "c3RydW1lbnRCBQoDZXh0Iq8BCgVBc3NldBILCgN1aWQYASABKAkSPgoEdHlw",
            "ZRgCIAEoDjIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuQXNzZXRUeXBlEgwKBG5hbWUYAyABKAkSSwoLaW5zdHJ1bWVudHMYBCAD",
            "KAsyNi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkFz",
            "c2V0SW5zdHJ1bWVudCImCg1Bc3NldEN1cnJlbmN5EhUKDWJhc2VfY3VycmVu",
            "Y3kYASABKAki9gMKDUFzc2V0U2VjdXJpdHkSDAoEaXNpbhgBIAEoCRIMCgR0",
            "eXBlGAIgASgJEk4KD2luc3RydW1lbnRfa2luZBgKIAEoDjI1LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFR5cGUS",
            "QgoFc2hhcmUYAyABKAsyMS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLkFzc2V0U2hhcmVIABJACgRib25kGAQgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldEJvbmRIABJL",
            "CgJzcBgFIAEoCzI9LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJh",
            "Y3QudjEuQXNzZXRTdHJ1Y3R1cmVkUHJvZHVjdEgAEj4KA2V0ZhgGIAEoCzIv",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRF",
            "dGZIABJfChRjbGVhcmluZ19jZXJ0aWZpY2F0ZRgHIAEoCzI/LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuQXNzZXRDbGVhcmluZ0Nl",
            "cnRpZmljYXRlSABCBQoDZXh0ItUFCgpBc3NldFNoYXJlEj4KBHR5cGUYASAB",
            "KA4yMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlNo",
            "YXJlVHlwZRJECgppc3N1ZV9zaXplGAIgASgLMjAudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQQoHbm9taW5hbBgD",
            "IAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "UXVvdGF0aW9uEhgKEG5vbWluYWxfY3VycmVuY3kYBCABKAkSFQoNcHJpbWFy",
            "eV9pbmRleBgFIAEoCRJHCg1kaXZpZGVuZF9yYXRlGAYgASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SHAoU",
            "cHJlZmVycmVkX3NoYXJlX3R5cGUYByABKAkSLAoIaXBvX2RhdGUYCCABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjEKDXJlZ2lzdHJ5X2RhdGUY",
            "CSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhYKDmRpdl95aWVs",
            "ZF9mbGFnGAogASgIEhIKCmlzc3VlX2tpbmQYCyABKAkSMgoOcGxhY2VtZW50",
            "X2RhdGUYDCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKC3Jl",
            "cHJlc19pc2luGA0gASgJEkkKD2lzc3VlX3NpemVfcGxhbhgOIAEoCzIwLnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9u",
            "EkUKC3RvdGFsX2Zsb2F0GA8gASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24i4AYKCUFzc2V0Qm9uZBJJCg9j",
            "dXJyZW50X25vbWluYWwYASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhITCgtib3Jyb3dfbmFtZRgCIAEo",
            "CRJECgppc3N1ZV9zaXplGAMgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SQQoHbm9taW5hbBgEIAEoCzIw",
            "LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0",
            "aW9uEhgKEG5vbWluYWxfY3VycmVuY3kYBSABKAkSEgoKaXNzdWVfa2luZBgG",
            "IAEoCRIVCg1pbnRlcmVzdF9raW5kGAcgASgJEiAKGGNvdXBvbl9xdWFudGl0",
            "eV9wZXJfeWVhchgIIAEoBRIcChRpbmRleGVkX25vbWluYWxfZmxhZxgJIAEo",
            "CBIZChFzdWJvcmRpbmF0ZWRfZmxhZxgKIAEoCBIXCg9jb2xsYXRlcmFsX2Zs",
            "YWcYCyABKAgSFQoNdGF4X2ZyZWVfZmxhZxgMIAEoCBIZChFhbW9ydGl6YXRp",
            "b25fZmxhZxgNIAEoCBIcChRmbG9hdGluZ19jb3Vwb25fZmxhZxgOIAEoCBIW",
            "Cg5wZXJwZXR1YWxfZmxhZxgPIAEoCBIxCg1tYXR1cml0eV9kYXRlGBAgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIYChByZXR1cm5fY29uZGl0",
            "aW9uGBEgASgJEjIKDnN0YXRlX3JlZ19kYXRlGBIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIyCg5wbGFjZW1lbnRfZGF0ZRgTIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASSQoPcGxhY2VtZW50X3ByaWNlGBQg",
            "ASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5R",
            "dW90YXRpb24SSQoPaXNzdWVfc2l6ZV9wbGFuGBUgASgLMjAudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24ioAUKFkFz",
            "c2V0U3RydWN0dXJlZFByb2R1Y3QSEwoLYm9ycm93X25hbWUYASABKAkSQQoH",
            "bm9taW5hbBgCIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuUXVvdGF0aW9uEhgKEG5vbWluYWxfY3VycmVuY3kYAyABKAkS",
            "SgoEdHlwZRgEIAEoDjI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuU3RydWN0dXJlZFByb2R1Y3RUeXBlEhcKD2xvZ2ljX3BvcnRm",
            "b2xpbxgFIAEoCRJECgphc3NldF90eXBlGAYgASgOMjAudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldFR5cGUSEwoLYmFzaWNf",
            "YXNzZXQYByABKAkSSAoOc2FmZXR5X2JhcnJpZXIYCCABKAsyMC50aW5rb2Zm",
            "LnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIxCg1t",
            "YXR1cml0eV9kYXRlGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBJJCg9pc3N1ZV9zaXplX3BsYW4YCiABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJECgppc3N1ZV9zaXpl",
            "GAsgASgLMjAudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5RdW90YXRpb24SMgoOcGxhY2VtZW50X2RhdGUYDCABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEhIKCmlzc3VlX2tpbmQYDSABKAki2AoKCEFz",
            "c2V0RXRmEkcKDXRvdGFsX2V4cGVuc2UYASABKAsyMC50aW5rb2ZmLnB1Ymxp",
            "Yy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhJFCgtodXJkbGVf",
            "cmF0ZRgCIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJh",
            "Y3QudjEuUXVvdGF0aW9uEkkKD3BlcmZvcm1hbmNlX2ZlZRgDIAEoCzIwLnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9u",
            "EkoKEGZpeGVkX2NvbW1pc3Npb24YBCABKAsyMC50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIUCgxwYXltZW50X3R5",
            "cGUYBSABKAkSFgoOd2F0ZXJtYXJrX2ZsYWcYBiABKAgSRQoLYnV5X3ByZW1p",
            "dW0YByABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0",
            "LnYxLlF1b3RhdGlvbhJHCg1zZWxsX2Rpc2NvdW50GAggASgLMjAudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SGAoQ",
            "cmViYWxhbmNpbmdfZmxhZxgJIAEoCBIYChByZWJhbGFuY2luZ19mcmVxGAog",
            "ASgJEhcKD21hbmFnZW1lbnRfdHlwZRgLIAEoCRIVCg1wcmltYXJ5X2luZGV4",
            "GAwgASgJEhIKCmZvY3VzX3R5cGUYDSABKAkSFgoObGV2ZXJhZ2VkX2ZsYWcY",
            "DiABKAgSQwoJbnVtX3NoYXJlGA8gASgLMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SEgoKdWNpdHNfZmxhZxgQ",
            "IAEoCBIxCg1yZWxlYXNlZF9kYXRlGBEgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBITCgtkZXNjcmlwdGlvbhgSIAEoCRIhChlwcmltYXJ5X2lu",
            "ZGV4X2Rlc2NyaXB0aW9uGBMgASgJEh0KFXByaW1hcnlfaW5kZXhfY29tcGFu",
            "eRgUIAEoCRJPChVpbmRleF9yZWNvdmVyeV9wZXJpb2QYFSABKAsyMC50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLlF1b3RhdGlvbhIR",
            "CglpbmF2X2NvZGUYFiABKAkSFgoOZGl2X3lpZWxkX2ZsYWcYFyABKAgSTAoS",
            "ZXhwZW5zZV9jb21taXNzaW9uGBggASgLMjAudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5RdW90YXRpb24SVgoccHJpbWFyeV9pbmRl",
            "eF90cmFja2luZ19lcnJvchgZIAEoCzIwLnRpbmtvZmYucHVibGljLmludmVz",
            "dC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhgKEHJlYmFsYW5jaW5nX3Bs",
            "YW4YGiABKAkSEAoIdGF4X3JhdGUYGyABKAkSNQoRcmViYWxhbmNpbmdfZGF0",
            "ZXMYHCADKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhIKCmlzc3Vl",
            "X2tpbmQYHSABKAkSQQoHbm9taW5hbBgeIAEoCzIwLnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuUXVvdGF0aW9uEhgKEG5vbWluYWxf",
            "Y3VycmVuY3kYHyABKAkidwoYQXNzZXRDbGVhcmluZ0NlcnRpZmljYXRlEkEK",
            "B25vbWluYWwYASABKAsyMC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLlF1b3RhdGlvbhIYChBub21pbmFsX2N1cnJlbmN5GAIgASgJ",
            "Ip0BCgVCcmFuZBILCgN1aWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNj",
            "cmlwdGlvbhgDIAEoCRIMCgRpbmZvGAQgASgJEg8KB2NvbXBhbnkYBSABKAkS",
            "DgoGc2VjdG9yGAYgASgJEhcKD2NvdW50cnlfb2ZfcmlzaxgHIAEoCRIcChRj",
            "b3VudHJ5X29mX3Jpc2tfbmFtZRgIIAEoCSL/AQoPQXNzZXRJbnN0cnVtZW50",
            "EgsKA3VpZBgBIAEoCRIMCgRmaWdpGAIgASgJEhcKD2luc3RydW1lbnRfdHlw",
            "ZRgDIAEoCRIOCgZ0aWNrZXIYBCABKAkSEgoKY2xhc3NfY29kZRgFIAEoCRJE",
            "CgVsaW5rcxgGIAMoCzI1LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuSW5zdHJ1bWVudExpbmsSTgoPaW5zdHJ1bWVudF9raW5kGAog",
            "ASgOMjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5J",
            "bnN0cnVtZW50VHlwZSI2Cg5JbnN0cnVtZW50TGluaxIMCgR0eXBlGAEgASgJ",
            "EhYKDmluc3RydW1lbnRfdWlkGAIgASgJIhUKE0dldEZhdm9yaXRlc1JlcXVl",
            "c3QibwoUR2V0RmF2b3JpdGVzUmVzcG9uc2USVwoUZmF2b3JpdGVfaW5zdHJ1",
            "bWVudHMYASADKAsyOS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkZhdm9yaXRlSW5zdHJ1bWVudCLxAQoSRmF2b3JpdGVJbnN0cnVt",
            "ZW50EgwKBGZpZ2kYASABKAkSDgoGdGlja2VyGAIgASgJEhIKCmNsYXNzX2Nv",
            "ZGUYAyABKAkSDAoEaXNpbhgEIAEoCRIXCg9pbnN0cnVtZW50X3R5cGUYCyAB",
            "KAkSEAoIb3RjX2ZsYWcYECABKAgSIAoYYXBpX3RyYWRlX2F2YWlsYWJsZV9m",
            "bGFnGBEgASgIEk4KD2luc3RydW1lbnRfa2luZBgSIAEoDjI1LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFR5cGUi",
            "xwEKFEVkaXRGYXZvcml0ZXNSZXF1ZXN0EloKC2luc3RydW1lbnRzGAEgAygL",
            "MkUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5FZGl0",
            "RmF2b3JpdGVzUmVxdWVzdEluc3RydW1lbnQSUwoLYWN0aW9uX3R5cGUYBiAB",
            "KA4yPi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkVk",
            "aXRGYXZvcml0ZXNBY3Rpb25UeXBlIi4KHkVkaXRGYXZvcml0ZXNSZXF1ZXN0",
            "SW5zdHJ1bWVudBIMCgRmaWdpGAEgASgJInAKFUVkaXRGYXZvcml0ZXNSZXNw",
            "b25zZRJXChRmYXZvcml0ZV9pbnN0cnVtZW50cxgBIAMoCzI5LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRmF2b3JpdGVJbnN0cnVt",
            "ZW50IhUKE0dldENvdW50cmllc1JlcXVlc3QiYQoUR2V0Q291bnRyaWVzUmVz",
            "cG9uc2USSQoJY291bnRyaWVzGAEgAygLMjYudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5Db3VudHJ5UmVzcG9uc2UiWQoPQ291bnRy",
            "eVJlc3BvbnNlEhAKCGFsZmFfdHdvGAEgASgJEhIKCmFsZmFfdGhyZWUYAiAB",
            "KAkSDAoEbmFtZRgDIAEoCRISCgpuYW1lX2JyaWVmGAQgASgJIiYKFUZpbmRJ",
            "bnN0cnVtZW50UmVxdWVzdBINCgVxdWVyeRgBIAEoCSJlChZGaW5kSW5zdHJ1",
            "bWVudFJlc3BvbnNlEksKC2luc3RydW1lbnRzGAEgAygLMjYudGlua29mZi5w",
            "dWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50U2hvcnQi",
            "6wMKD0luc3RydW1lbnRTaG9ydBIMCgRpc2luGAEgASgJEgwKBGZpZ2kYAiAB",
            "KAkSDgoGdGlja2VyGAMgASgJEhIKCmNsYXNzX2NvZGUYBCABKAkSFwoPaW5z",
            "dHJ1bWVudF90eXBlGAUgASgJEgwKBG5hbWUYBiABKAkSCwoDdWlkGAcgASgJ",
            "EhQKDHBvc2l0aW9uX3VpZBgIIAEoCRJOCg9pbnN0cnVtZW50X2tpbmQYCiAB",
            "KA4yNS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLklu",
            "c3RydW1lbnRUeXBlEiAKGGFwaV90cmFkZV9hdmFpbGFibGVfZmxhZxgLIAEo",
            "CBIUCgxmb3JfaWlzX2ZsYWcYDCABKAgSOgoWZmlyc3RfMW1pbl9jYW5kbGVf",
            "ZGF0ZRgaIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOgoWZmly",
            "c3RfMWRheV9jYW5kbGVfZGF0ZRgbIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASHgoWZm9yX3F1YWxfaW52ZXN0b3JfZmxhZxgcIAEoCBIUCgx3",
            "ZWVrZW5kX2ZsYWcYHSABKAgSGAoQYmxvY2tlZF90Y2FfZmxhZxgeIAEoCCIS",
            "ChBHZXRCcmFuZHNSZXF1ZXN0Ih0KD0dldEJyYW5kUmVxdWVzdBIKCgJpZBgB",
            "IAEoCSJRChFHZXRCcmFuZHNSZXNwb25zZRI8CgZicmFuZHMYASADKAsyLC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkJyYW5kKtcB",
            "CgpDb3Vwb25UeXBlEhsKF0NPVVBPTl9UWVBFX1VOU1BFQ0lGSUVEEAASGAoU",
            "Q09VUE9OX1RZUEVfQ09OU1RBTlQQARIYChRDT1VQT05fVFlQRV9GTE9BVElO",
            "RxACEhgKFENPVVBPTl9UWVBFX0RJU0NPVU5UEAMSGAoUQ09VUE9OX1RZUEVf",
            "TU9SVEdBR0UQBBITCg9DT1VQT05fVFlQRV9GSVgQBRIYChRDT1VQT05fVFlQ",
            "RV9WQVJJQUJMRRAGEhUKEUNPVVBPTl9UWVBFX09USEVSEAcqaAoPT3B0aW9u",
            "RGlyZWN0aW9uEiAKHE9QVElPTl9ESVJFQ1RJT05fVU5TUEVDSUZJRUQQABIY",
            "ChRPUFRJT05fRElSRUNUSU9OX1BVVBABEhkKFU9QVElPTl9ESVJFQ1RJT05f",
            "Q0FMTBACKnsKEU9wdGlvblBheW1lbnRUeXBlEiMKH09QVElPTl9QQVlNRU5U",
            "X1RZUEVfVU5TUEVDSUZJRUQQABIfChtPUFRJT05fUEFZTUVOVF9UWVBFX1BS",
            "RU1JVU0QARIgChxPUFRJT05fUEFZTUVOVF9UWVBFX01BUkdJTkFMEAIqYQoL",
            "T3B0aW9uU3R5bGUSHAoYT1BUSU9OX1NUWUxFX1VOU1BFQ0lGSUVEEAASGQoV",
            "T1BUSU9OX1NUWUxFX0FNRVJJQ0FOEAESGQoVT1BUSU9OX1NUWUxFX0VVUk9Q",
            "RUFOEAIqlQEKFE9wdGlvblNldHRsZW1lbnRUeXBlEiUKIU9QVElPTl9FWEVD",
            "VVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEisKJ09QVElPTl9FWEVDVVRJT05f",
            "VFlQRV9QSFlTSUNBTF9ERUxJVkVSWRABEikKJU9QVElPTl9FWEVDVVRJT05f",
            "VFlQRV9DQVNIX1NFVFRMRU1FTlQQAiquAQoQSW5zdHJ1bWVudElkVHlwZRId",
            "ChlJTlNUUlVNRU5UX0lEX1VOU1BFQ0lGSUVEEAASGwoXSU5TVFJVTUVOVF9J",
            "RF9UWVBFX0ZJR0kQARIdChlJTlNUUlVNRU5UX0lEX1RZUEVfVElDS0VSEAIS",
            "GgoWSU5TVFJVTUVOVF9JRF9UWVBFX1VJRBADEiMKH0lOU1RSVU1FTlRfSURf",
            "VFlQRV9QT1NJVElPTl9VSUQQBCpsChBJbnN0cnVtZW50U3RhdHVzEiEKHUlO",
            "U1RSVU1FTlRfU1RBVFVTX1VOU1BFQ0lGSUVEEAASGgoWSU5TVFJVTUVOVF9T",
            "VEFUVVNfQkFTRRABEhkKFUlOU1RSVU1FTlRfU1RBVFVTX0FMTBACKuUBCglT",
            "aGFyZVR5cGUSGgoWU0hBUkVfVFlQRV9VTlNQRUNJRklFRBAAEhUKEVNIQVJF",
            "X1RZUEVfQ09NTU9OEAESGAoUU0hBUkVfVFlQRV9QUkVGRVJSRUQQAhISCg5T",
            "SEFSRV9UWVBFX0FEUhADEhIKDlNIQVJFX1RZUEVfR0RSEAQSEgoOU0hBUkVf",
            "VFlQRV9NTFAQBRIaChZTSEFSRV9UWVBFX05ZX1JFR19TSFJTEAYSHgoaU0hB",
            "UkVfVFlQRV9DTE9TRURfRU5EX0ZVTkQQBxITCg9TSEFSRV9UWVBFX1JFSVQQ",
            "CCqJAQoJQXNzZXRUeXBlEhoKFkFTU0VUX1RZUEVfVU5TUEVDSUZJRUQQABIX",
            "ChNBU1NFVF9UWVBFX0NVUlJFTkNZEAESGAoUQVNTRVRfVFlQRV9DT01NT0RJ",
            "VFkQAhIUChBBU1NFVF9UWVBFX0lOREVYEAMSFwoTQVNTRVRfVFlQRV9TRUNV",
            "UklUWRAEKmYKFVN0cnVjdHVyZWRQcm9kdWN0VHlwZRIXChNTUF9UWVBFX1VO",
            "U1BFQ0lGSUVEEAASFwoTU1BfVFlQRV9ERUxJVkVSQUJMRRABEhsKF1NQX1RZ",
            "UEVfTk9OX0RFTElWRVJBQkxFEAIqjQEKF0VkaXRGYXZvcml0ZXNBY3Rpb25U",
            "eXBlEioKJkVESVRfRkFWT1JJVEVTX0FDVElPTl9UWVBFX1VOU1BFQ0lGSUVE",
            "EAASIgoeRURJVF9GQVZPUklURVNfQUNUSU9OX1RZUEVfQUREEAESIgoeRURJ",
            "VF9GQVZPUklURVNfQUNUSU9OX1RZUEVfREVMEAIqcwoMUmVhbEV4Y2hhbmdl",
            "Eh0KGVJFQUxfRVhDSEFOR0VfVU5TUEVDSUZJRUQQABIWChJSRUFMX0VYQ0hB",
            "TkdFX01PRVgQARIVChFSRUFMX0VYQ0hBTkdFX1JUUxACEhUKEVJFQUxfRVhD",
            "SEFOR0VfT1RDEAMqaQoJUmlza0xldmVsEhoKFlJJU0tfTEVWRUxfVU5TUEVD",
            "SUZJRUQQABISCg5SSVNLX0xFVkVMX0xPVxABEhcKE1JJU0tfTEVWRUxfTU9E",
            "RVJBVEUQAhITCg9SSVNLX0xFVkVMX0hJR0gQAzLvGgoSSW5zdHJ1bWVudHNT",
            "ZXJ2aWNlEpMBChBUcmFkaW5nU2NoZWR1bGVzEj4udGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5UcmFkaW5nU2NoZWR1bGVzUmVxdWVz",
            "dBo/LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuVHJh",
            "ZGluZ1NjaGVkdWxlc1Jlc3BvbnNlEncKBkJvbmRCeRI4LnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuSW5zdHJ1bWVudFJlcXVlc3Qa",
            "My50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkJvbmRS",
            "ZXNwb25zZRJ4CgVCb25kcxI5LnRpbmtvZmYucHVibGljLmludmVzdC5hcGku",
            "Y29udHJhY3QudjEuSW5zdHJ1bWVudHNSZXF1ZXN0GjQudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Cb25kc1Jlc3BvbnNlEo0BCg5H",
            "ZXRCb25kQ291cG9ucxI8LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuR2V0Qm9uZENvdXBvbnNSZXF1ZXN0Gj0udGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRCb25kQ291cG9uc1Jlc3Bv",
            "bnNlEn8KCkN1cnJlbmN5QnkSOC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLkluc3RydW1lbnRSZXF1ZXN0GjcudGlua29mZi5wdWJs",
            "aWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5DdXJyZW5jeVJlc3BvbnNlEoIB",
            "CgpDdXJyZW5jaWVzEjkudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5JbnN0cnVtZW50c1JlcXVlc3QaOS50aW5rb2ZmLnB1YmxpYy5p",
            "bnZlc3QuYXBpLmNvbnRyYWN0LnYxLkN1cnJlbmNpZXNSZXNwb25zZRJ1CgVF",
            "dGZCeRI4LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "SW5zdHJ1bWVudFJlcXVlc3QaMi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLkV0ZlJlc3BvbnNlEnYKBEV0ZnMSOS50aW5rb2ZmLnB1",
            "YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRzUmVxdWVz",
            "dBozLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRXRm",
            "c1Jlc3BvbnNlEnsKCEZ1dHVyZUJ5EjgudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50UmVxdWVzdBo1LnRpbmtvZmYu",
            "cHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRnV0dXJlUmVzcG9uc2US",
            "fAoHRnV0dXJlcxI5LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJh",
            "Y3QudjEuSW5zdHJ1bWVudHNSZXF1ZXN0GjYudGlua29mZi5wdWJsaWMuaW52",
            "ZXN0LmFwaS5jb250cmFjdC52MS5GdXR1cmVzUmVzcG9uc2USewoIT3B0aW9u",
            "QnkSOC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLklu",
            "c3RydW1lbnRSZXF1ZXN0GjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5j",
            "b250cmFjdC52MS5PcHRpb25SZXNwb25zZRJ8CgdPcHRpb25zEjkudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50c1Jl",
            "cXVlc3QaNi50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYx",
            "Lk9wdGlvbnNSZXNwb25zZRJ5CgdTaGFyZUJ5EjgudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5JbnN0cnVtZW50UmVxdWVzdBo0LnRp",
            "bmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEuU2hhcmVSZXNw",
            "b25zZRJ6CgZTaGFyZXMSOS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLkluc3RydW1lbnRzUmVxdWVzdBo1LnRpbmtvZmYucHVibGlj",
            "LmludmVzdC5hcGkuY29udHJhY3QudjEuU2hhcmVzUmVzcG9uc2USnAEKE0dl",
            "dEFjY3J1ZWRJbnRlcmVzdHMSQS50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBp",
            "LmNvbnRyYWN0LnYxLkdldEFjY3J1ZWRJbnRlcmVzdHNSZXF1ZXN0GkIudGlu",
            "a29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRBY2NydWVk",
            "SW50ZXJlc3RzUmVzcG9uc2USkwEKEEdldEZ1dHVyZXNNYXJnaW4SPi50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldEZ1dHVyZXNN",
            "YXJnaW5SZXF1ZXN0Gj8udGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250",
            "cmFjdC52MS5HZXRGdXR1cmVzTWFyZ2luUmVzcG9uc2UShgEKD0dldEluc3Ry",
            "dW1lbnRCeRI4LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3Qu",
            "djEuSW5zdHJ1bWVudFJlcXVlc3QaOS50aW5rb2ZmLnB1YmxpYy5pbnZlc3Qu",
            "YXBpLmNvbnRyYWN0LnYxLkluc3RydW1lbnRSZXNwb25zZRKHAQoMR2V0RGl2",
            "aWRlbmRzEjoudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5HZXREaXZpZGVuZHNSZXF1ZXN0GjsudGlua29mZi5wdWJsaWMuaW52ZXN0",
            "LmFwaS5jb250cmFjdC52MS5HZXREaXZpZGVuZHNSZXNwb25zZRJ3CgpHZXRB",
            "c3NldEJ5EjMudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5Bc3NldFJlcXVlc3QaNC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNv",
            "bnRyYWN0LnYxLkFzc2V0UmVzcG9uc2USeAoJR2V0QXNzZXRzEjQudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3NldHNSZXF1ZXN0",
            "GjUudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5Bc3Nl",
            "dHNSZXNwb25zZRKHAQoMR2V0RmF2b3JpdGVzEjoudGlua29mZi5wdWJsaWMu",
            "aW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRGYXZvcml0ZXNSZXF1ZXN0Gjsu",
            "dGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRGYXZv",
            "cml0ZXNSZXNwb25zZRKKAQoNRWRpdEZhdm9yaXRlcxI7LnRpbmtvZmYucHVi",
            "bGljLmludmVzdC5hcGkuY29udHJhY3QudjEuRWRpdEZhdm9yaXRlc1JlcXVl",
            "c3QaPC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkVk",
            "aXRGYXZvcml0ZXNSZXNwb25zZRKHAQoMR2V0Q291bnRyaWVzEjoudGlua29m",
            "Zi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52MS5HZXRDb3VudHJpZXNS",
            "ZXF1ZXN0GjsudGlua29mZi5wdWJsaWMuaW52ZXN0LmFwaS5jb250cmFjdC52",
            "MS5HZXRDb3VudHJpZXNSZXNwb25zZRKNAQoORmluZEluc3RydW1lbnQSPC50",
            "aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkZpbmRJbnN0",
            "cnVtZW50UmVxdWVzdBo9LnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29u",
            "dHJhY3QudjEuRmluZEluc3RydW1lbnRSZXNwb25zZRJ+CglHZXRCcmFuZHMS",
            "Ny50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldEJy",
            "YW5kc1JlcXVlc3QaOC50aW5rb2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRy",
            "YWN0LnYxLkdldEJyYW5kc1Jlc3BvbnNlEnIKCkdldEJyYW5kQnkSNi50aW5r",
            "b2ZmLnB1YmxpYy5pbnZlc3QuYXBpLmNvbnRyYWN0LnYxLkdldEJyYW5kUmVx",
            "dWVzdBosLnRpbmtvZmYucHVibGljLmludmVzdC5hcGkuY29udHJhY3QudjEu",
            "QnJhbmRCZwoccnUudGlua29mZi5waWFwaS5jb250cmFjdC52MVABWgwuLztp",
            "bnZlc3RhcGmiAgVUSUFQSaoCGlRpbmtvZmYuUHJvdG8uSW52ZXN0QXBpLlYx",
            "ygIRVGlua29mZlxJbnZlc3RcVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Tinkoff.Proto.InvestApi.V1.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tinkoff.Proto.InvestApi.V1.CouponType), typeof(global::Tinkoff.Proto.InvestApi.V1.OptionDirection), typeof(global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType), typeof(global::Tinkoff.Proto.InvestApi.V1.OptionStyle), typeof(global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType), typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType), typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus), typeof(global::Tinkoff.Proto.InvestApi.V1.ShareType), typeof(global::Tinkoff.Proto.InvestApi.V1.AssetType), typeof(global::Tinkoff.Proto.InvestApi.V1.StructuredProductType), typeof(global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType), typeof(global::Tinkoff.Proto.InvestApi.V1.RealExchange), typeof(global::Tinkoff.Proto.InvestApi.V1.RiskLevel), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.TradingSchedulesRequest), global::Tinkoff.Proto.InvestApi.V1.TradingSchedulesRequest.Parser, new[]{ "Exchange", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.TradingSchedulesResponse), global::Tinkoff.Proto.InvestApi.V1.TradingSchedulesResponse.Parser, new[]{ "Exchanges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.TradingSchedule), global::Tinkoff.Proto.InvestApi.V1.TradingSchedule.Parser, new[]{ "Exchange", "Days" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.TradingDay), global::Tinkoff.Proto.InvestApi.V1.TradingDay.Parser, new[]{ "Date", "IsTradingDay", "StartTime", "EndTime", "OpeningAuctionStartTime", "ClosingAuctionEndTime", "EveningOpeningAuctionStartTime", "EveningStartTime", "EveningEndTime", "ClearingStartTime", "ClearingEndTime", "PremarketStartTime", "PremarketEndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentRequest), global::Tinkoff.Proto.InvestApi.V1.InstrumentRequest.Parser, new[]{ "IdType", "ClassCode", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentsRequest), global::Tinkoff.Proto.InvestApi.V1.InstrumentsRequest.Parser, new[]{ "InstrumentStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.BondResponse), global::Tinkoff.Proto.InvestApi.V1.BondResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.BondsResponse), global::Tinkoff.Proto.InvestApi.V1.BondsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetBondCouponsRequest), global::Tinkoff.Proto.InvestApi.V1.GetBondCouponsRequest.Parser, new[]{ "Figi", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetBondCouponsResponse), global::Tinkoff.Proto.InvestApi.V1.GetBondCouponsResponse.Parser, new[]{ "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Coupon), global::Tinkoff.Proto.InvestApi.V1.Coupon.Parser, new[]{ "Figi", "CouponDate", "CouponNumber", "FixDate", "PayOneBond", "CouponType", "CouponStartDate", "CouponEndDate", "CouponPeriod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.CurrencyResponse), global::Tinkoff.Proto.InvestApi.V1.CurrencyResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.CurrenciesResponse), global::Tinkoff.Proto.InvestApi.V1.CurrenciesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.EtfResponse), global::Tinkoff.Proto.InvestApi.V1.EtfResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.EtfsResponse), global::Tinkoff.Proto.InvestApi.V1.EtfsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.FutureResponse), global::Tinkoff.Proto.InvestApi.V1.FutureResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.FuturesResponse), global::Tinkoff.Proto.InvestApi.V1.FuturesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.OptionResponse), global::Tinkoff.Proto.InvestApi.V1.OptionResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.OptionsResponse), global::Tinkoff.Proto.InvestApi.V1.OptionsResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Option), global::Tinkoff.Proto.InvestApi.V1.Option.Parser, new[]{ "Uid", "PositionUid", "Ticker", "ClassCode", "BasicAssetPositionUid", "TradingStatus", "RealExchange", "Direction", "PaymentType", "Style", "SettlementType", "Name", "Currency", "SettlementCurrency", "AssetType", "BasicAsset", "Exchange", "CountryOfRisk", "CountryOfRiskName", "Sector", "Lot", "BasicAssetSize", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "MinPriceIncrement", "StrikePrice", "ExpirationDate", "FirstTradeDate", "LastTradeDate", "First1MinCandleDate", "First1DayCandleDate", "ShortEnabledFlag", "ForIisFlag", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "ApiTradeAvailableFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.ShareResponse), global::Tinkoff.Proto.InvestApi.V1.ShareResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.SharesResponse), global::Tinkoff.Proto.InvestApi.V1.SharesResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Bond), global::Tinkoff.Proto.InvestApi.V1.Bond.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "CouponQuantityPerYear", "MaturityDate", "Nominal", "InitialNominal", "StateRegDate", "PlacementDate", "PlacementPrice", "AciValue", "CountryOfRisk", "CountryOfRiskName", "Sector", "IssueKind", "IssueSize", "IssueSizePlan", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "FloatingCouponFlag", "PerpetualFlag", "AmortizationFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "SubordinatedFlag", "First1MinCandleDate", "First1DayCandleDate", "RiskLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Currency), global::Tinkoff.Proto.InvestApi.V1.Currency.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency_", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "Nominal", "CountryOfRisk", "CountryOfRiskName", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "IsoCurrencyName", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "First1MinCandleDate", "First1DayCandleDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Etf), global::Tinkoff.Proto.InvestApi.V1.Etf.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "FixedCommission", "FocusType", "ReleasedDate", "NumShares", "CountryOfRisk", "CountryOfRiskName", "Sector", "RebalancingFreq", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "First1MinCandleDate", "First1DayCandleDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Future), global::Tinkoff.Proto.InvestApi.V1.Future.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "FirstTradeDate", "LastTradeDate", "FuturesType", "AssetType", "BasicAsset", "BasicAssetSize", "CountryOfRisk", "CountryOfRiskName", "Sector", "ExpirationDate", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "BasicAssetPositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "First1MinCandleDate", "First1DayCandleDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Share), global::Tinkoff.Proto.InvestApi.V1.Share.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "IpoDate", "IssueSize", "CountryOfRisk", "CountryOfRiskName", "Sector", "IssueSizePlan", "Nominal", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "DivYieldFlag", "ShareType", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "First1MinCandleDate", "First1DayCandleDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetAccruedInterestsRequest), global::Tinkoff.Proto.InvestApi.V1.GetAccruedInterestsRequest.Parser, new[]{ "Figi", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetAccruedInterestsResponse), global::Tinkoff.Proto.InvestApi.V1.GetAccruedInterestsResponse.Parser, new[]{ "AccruedInterests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AccruedInterest), global::Tinkoff.Proto.InvestApi.V1.AccruedInterest.Parser, new[]{ "Date", "Value", "ValuePercent", "Nominal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetFuturesMarginRequest), global::Tinkoff.Proto.InvestApi.V1.GetFuturesMarginRequest.Parser, new[]{ "Figi" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetFuturesMarginResponse), global::Tinkoff.Proto.InvestApi.V1.GetFuturesMarginResponse.Parser, new[]{ "InitialMarginOnBuy", "InitialMarginOnSell", "MinPriceIncrement", "MinPriceIncrementAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentResponse), global::Tinkoff.Proto.InvestApi.V1.InstrumentResponse.Parser, new[]{ "Instrument" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Instrument), global::Tinkoff.Proto.InvestApi.V1.Instrument.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "Lot", "Currency", "Klong", "Kshort", "Dlong", "Dshort", "DlongMin", "DshortMin", "ShortEnabledFlag", "Name", "Exchange", "CountryOfRisk", "CountryOfRiskName", "InstrumentType", "TradingStatus", "OtcFlag", "BuyAvailableFlag", "SellAvailableFlag", "MinPriceIncrement", "ApiTradeAvailableFlag", "Uid", "RealExchange", "PositionUid", "ForIisFlag", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag", "InstrumentKind", "First1MinCandleDate", "First1DayCandleDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetDividendsRequest), global::Tinkoff.Proto.InvestApi.V1.GetDividendsRequest.Parser, new[]{ "Figi", "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetDividendsResponse), global::Tinkoff.Proto.InvestApi.V1.GetDividendsResponse.Parser, new[]{ "Dividends" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Dividend), global::Tinkoff.Proto.InvestApi.V1.Dividend.Parser, new[]{ "DividendNet", "PaymentDate", "DeclaredDate", "LastBuyDate", "DividendType", "RecordDate", "Regularity", "ClosePrice", "YieldValue", "CreatedAt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetRequest), global::Tinkoff.Proto.InvestApi.V1.AssetRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetResponse), global::Tinkoff.Proto.InvestApi.V1.AssetResponse.Parser, new[]{ "Asset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetsRequest), global::Tinkoff.Proto.InvestApi.V1.AssetsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetsResponse), global::Tinkoff.Proto.InvestApi.V1.AssetsResponse.Parser, new[]{ "Assets" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetFull), global::Tinkoff.Proto.InvestApi.V1.AssetFull.Parser, new[]{ "Uid", "Type", "Name", "NameBrief", "Description", "DeletedAt", "RequiredTests", "Currency", "Security", "GosRegCode", "Cfi", "CodeNsd", "Status", "Brand", "UpdatedAt", "BrCode", "BrCodeName", "Instruments" }, new[]{ "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Asset), global::Tinkoff.Proto.InvestApi.V1.Asset.Parser, new[]{ "Uid", "Type", "Name", "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetCurrency), global::Tinkoff.Proto.InvestApi.V1.AssetCurrency.Parser, new[]{ "BaseCurrency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetSecurity), global::Tinkoff.Proto.InvestApi.V1.AssetSecurity.Parser, new[]{ "Isin", "Type", "InstrumentKind", "Share", "Bond", "Sp", "Etf", "ClearingCertificate" }, new[]{ "Ext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetShare), global::Tinkoff.Proto.InvestApi.V1.AssetShare.Parser, new[]{ "Type", "IssueSize", "Nominal", "NominalCurrency", "PrimaryIndex", "DividendRate", "PreferredShareType", "IpoDate", "RegistryDate", "DivYieldFlag", "IssueKind", "PlacementDate", "RepresIsin", "IssueSizePlan", "TotalFloat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetBond), global::Tinkoff.Proto.InvestApi.V1.AssetBond.Parser, new[]{ "CurrentNominal", "BorrowName", "IssueSize", "Nominal", "NominalCurrency", "IssueKind", "InterestKind", "CouponQuantityPerYear", "IndexedNominalFlag", "SubordinatedFlag", "CollateralFlag", "TaxFreeFlag", "AmortizationFlag", "FloatingCouponFlag", "PerpetualFlag", "MaturityDate", "ReturnCondition", "StateRegDate", "PlacementDate", "PlacementPrice", "IssueSizePlan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct), global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct.Parser, new[]{ "BorrowName", "Nominal", "NominalCurrency", "Type", "LogicPortfolio", "AssetType", "BasicAsset", "SafetyBarrier", "MaturityDate", "IssueSizePlan", "IssueSize", "PlacementDate", "IssueKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetEtf), global::Tinkoff.Proto.InvestApi.V1.AssetEtf.Parser, new[]{ "TotalExpense", "HurdleRate", "PerformanceFee", "FixedCommission", "PaymentType", "WatermarkFlag", "BuyPremium", "SellDiscount", "RebalancingFlag", "RebalancingFreq", "ManagementType", "PrimaryIndex", "FocusType", "LeveragedFlag", "NumShare", "UcitsFlag", "ReleasedDate", "Description", "PrimaryIndexDescription", "PrimaryIndexCompany", "IndexRecoveryPeriod", "InavCode", "DivYieldFlag", "ExpenseCommission", "PrimaryIndexTrackingError", "RebalancingPlan", "TaxRate", "RebalancingDates", "IssueKind", "Nominal", "NominalCurrency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate), global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate.Parser, new[]{ "Nominal", "NominalCurrency" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.Brand), global::Tinkoff.Proto.InvestApi.V1.Brand.Parser, new[]{ "Uid", "Name", "Description", "Info", "Company", "Sector", "CountryOfRisk", "CountryOfRiskName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.AssetInstrument), global::Tinkoff.Proto.InvestApi.V1.AssetInstrument.Parser, new[]{ "Uid", "Figi", "InstrumentType", "Ticker", "ClassCode", "Links", "InstrumentKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentLink), global::Tinkoff.Proto.InvestApi.V1.InstrumentLink.Parser, new[]{ "Type", "InstrumentUid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetFavoritesRequest), global::Tinkoff.Proto.InvestApi.V1.GetFavoritesRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetFavoritesResponse), global::Tinkoff.Proto.InvestApi.V1.GetFavoritesResponse.Parser, new[]{ "FavoriteInstruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument), global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument.Parser, new[]{ "Figi", "Ticker", "ClassCode", "Isin", "InstrumentType", "OtcFlag", "ApiTradeAvailableFlag", "InstrumentKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequest), global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequest.Parser, new[]{ "Instruments", "ActionType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument), global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument.Parser, new[]{ "Figi" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.EditFavoritesResponse), global::Tinkoff.Proto.InvestApi.V1.EditFavoritesResponse.Parser, new[]{ "FavoriteInstruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetCountriesRequest), global::Tinkoff.Proto.InvestApi.V1.GetCountriesRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetCountriesResponse), global::Tinkoff.Proto.InvestApi.V1.GetCountriesResponse.Parser, new[]{ "Countries" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.CountryResponse), global::Tinkoff.Proto.InvestApi.V1.CountryResponse.Parser, new[]{ "AlfaTwo", "AlfaThree", "Name", "NameBrief" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.FindInstrumentRequest), global::Tinkoff.Proto.InvestApi.V1.FindInstrumentRequest.Parser, new[]{ "Query" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.FindInstrumentResponse), global::Tinkoff.Proto.InvestApi.V1.FindInstrumentResponse.Parser, new[]{ "Instruments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.InstrumentShort), global::Tinkoff.Proto.InvestApi.V1.InstrumentShort.Parser, new[]{ "Isin", "Figi", "Ticker", "ClassCode", "InstrumentType", "Name", "Uid", "PositionUid", "InstrumentKind", "ApiTradeAvailableFlag", "ForIisFlag", "First1MinCandleDate", "First1DayCandleDate", "ForQualInvestorFlag", "WeekendFlag", "BlockedTcaFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetBrandsRequest), global::Tinkoff.Proto.InvestApi.V1.GetBrandsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetBrandRequest), global::Tinkoff.Proto.InvestApi.V1.GetBrandRequest.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tinkoff.Proto.InvestApi.V1.GetBrandsResponse), global::Tinkoff.Proto.InvestApi.V1.GetBrandsResponse.Parser, new[]{ "Brands" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///Тип купонов.
  /// </summary>
  public enum CouponType {
    /// <summary>
    ///Неопределенное значение
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Постоянный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_CONSTANT")] Constant = 1,
    /// <summary>
    ///Плавающий
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_FLOATING")] Floating = 2,
    /// <summary>
    ///Дисконт
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_DISCOUNT")] Discount = 3,
    /// <summary>
    ///Ипотечный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_MORTGAGE")] Mortgage = 4,
    /// <summary>
    ///Фиксированный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_FIX")] Fix = 5,
    /// <summary>
    ///Переменный
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_VARIABLE")] Variable = 6,
    /// <summary>
    ///Прочее
    /// </summary>
    [pbr::OriginalName("COUPON_TYPE_OTHER")] Other = 7,
  }

  /// <summary>
  ///Тип опциона по направлению сделки.
  /// </summary>
  public enum OptionDirection {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_DIRECTION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Опцион на продажу.
    /// </summary>
    [pbr::OriginalName("OPTION_DIRECTION_PUT")] Put = 1,
    /// <summary>
    ///Опцион на покупку.
    /// </summary>
    [pbr::OriginalName("OPTION_DIRECTION_CALL")] Call = 2,
  }

  /// <summary>
  ///Тип расчетов по опциону.
  /// </summary>
  public enum OptionPaymentType {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_PAYMENT_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Опционы с использованием премии в расчетах.
    /// </summary>
    [pbr::OriginalName("OPTION_PAYMENT_TYPE_PREMIUM")] Premium = 1,
    /// <summary>
    ///Маржируемые опционы.
    /// </summary>
    [pbr::OriginalName("OPTION_PAYMENT_TYPE_MARGINAL")] Marginal = 2,
  }

  /// <summary>
  ///Тип опциона по стилю.
  /// </summary>
  public enum OptionStyle {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_STYLE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Американский опцион.
    /// </summary>
    [pbr::OriginalName("OPTION_STYLE_AMERICAN")] American = 1,
    /// <summary>
    ///Европейский опцион.
    /// </summary>
    [pbr::OriginalName("OPTION_STYLE_EUROPEAN")] European = 2,
  }

  /// <summary>
  ///Тип опциона по способу исполнения.
  /// </summary>
  public enum OptionSettlementType {
    /// <summary>
    ///Тип не определен.
    /// </summary>
    [pbr::OriginalName("OPTION_EXECUTION_TYPE_UNSPECIFIED")] OptionExecutionTypeUnspecified = 0,
    /// <summary>
    /// Поставочный тип опциона.
    /// </summary>
    [pbr::OriginalName("OPTION_EXECUTION_TYPE_PHYSICAL_DELIVERY")] OptionExecutionTypePhysicalDelivery = 1,
    /// <summary>
    ///Расчетный тип опциона.
    /// </summary>
    [pbr::OriginalName("OPTION_EXECUTION_TYPE_CASH_SETTLEMENT")] OptionExecutionTypeCashSettlement = 2,
  }

  /// <summary>
  ///Тип идентификатора инструмента. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
  /// </summary>
  public enum InstrumentIdType {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_UNSPECIFIED")] InstrumentIdUnspecified = 0,
    /// <summary>
    ///Figi.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_FIGI")] Figi = 1,
    /// <summary>
    ///Ticker.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_TICKER")] Ticker = 2,
    /// <summary>
    ///Уникальный идентификатор.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_UID")] Uid = 3,
    /// <summary>
    ///Идентификатор позиции.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_ID_TYPE_POSITION_UID")] PositionUid = 4,
  }

  /// <summary>
  ///Статус запрашиваемых инструментов.
  /// </summary>
  public enum InstrumentStatus {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Базовый список инструментов (по умолчанию). Инструменты доступные для торговли через TINKOFF INVEST API.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_BASE")] Base = 1,
    /// <summary>
    ///Список всех инструментов.
    /// </summary>
    [pbr::OriginalName("INSTRUMENT_STATUS_ALL")] All = 2,
  }

  /// <summary>
  ///Тип акций.
  /// </summary>
  public enum ShareType {
    /// <summary>
    ///Значение не определено.
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Обыкновенная
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_COMMON")] Common = 1,
    /// <summary>
    ///Привилегированная
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_PREFERRED")] Preferred = 2,
    /// <summary>
    ///Американские депозитарные расписки
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_ADR")] Adr = 3,
    /// <summary>
    ///Глобальные депозитарные расписки
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_GDR")] Gdr = 4,
    /// <summary>
    ///Товарищество с ограниченной ответственностью
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_MLP")] Mlp = 5,
    /// <summary>
    ///Акции из реестра Нью-Йорка
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_NY_REG_SHRS")] NyRegShrs = 6,
    /// <summary>
    ///Закрытый инвестиционный фонд
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_CLOSED_END_FUND")] ClosedEndFund = 7,
    /// <summary>
    ///Траст недвижимости
    /// </summary>
    [pbr::OriginalName("SHARE_TYPE_REIT")] Reit = 8,
  }

  /// <summary>
  ///Тип актива.
  /// </summary>
  public enum AssetType {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Валюта.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_CURRENCY")] Currency = 1,
    /// <summary>
    ///Товар.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_COMMODITY")] Commodity = 2,
    /// <summary>
    ///Индекс.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_INDEX")] Index = 3,
    /// <summary>
    ///Ценная бумага.
    /// </summary>
    [pbr::OriginalName("ASSET_TYPE_SECURITY")] Security = 4,
  }

  /// <summary>
  ///Тип структурной ноты.
  /// </summary>
  public enum StructuredProductType {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("SP_TYPE_UNSPECIFIED")] SpTypeUnspecified = 0,
    /// <summary>
    ///Поставочный.
    /// </summary>
    [pbr::OriginalName("SP_TYPE_DELIVERABLE")] SpTypeDeliverable = 1,
    /// <summary>
    ///Беспоставочный.
    /// </summary>
    [pbr::OriginalName("SP_TYPE_NON_DELIVERABLE")] SpTypeNonDeliverable = 2,
  }

  /// <summary>
  ///Тип действия со списком избранных инструментов.
  /// </summary>
  public enum EditFavoritesActionType {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Добавить в список.
    /// </summary>
    [pbr::OriginalName("EDIT_FAVORITES_ACTION_TYPE_ADD")] Add = 1,
    /// <summary>
    ///Удалить из списка.
    /// </summary>
    [pbr::OriginalName("EDIT_FAVORITES_ACTION_TYPE_DEL")] Del = 2,
  }

  /// <summary>
  ///Реальная площадка исполнения расчётов.
  /// </summary>
  public enum RealExchange {
    /// <summary>
    ///Тип не определён.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Московская биржа.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_MOEX")] Moex = 1,
    /// <summary>
    ///Санкт-Петербургская биржа.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_RTS")] Rts = 2,
    /// <summary>
    ///Внебиржевой инструмент.
    /// </summary>
    [pbr::OriginalName("REAL_EXCHANGE_OTC")] Otc = 3,
  }

  /// <summary>
  ///Уровень риска облигации.
  /// </summary>
  public enum RiskLevel {
    [pbr::OriginalName("RISK_LEVEL_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    ///Низкий уровень риска
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_LOW")] Low = 1,
    /// <summary>
    ///Средний уровень риска
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_MODERATE")] Moderate = 2,
    /// <summary>
    ///Высокий уровень риска
    /// </summary>
    [pbr::OriginalName("RISK_LEVEL_HIGH")] High = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///Запрос расписания торгов.
  /// </summary>
  public sealed partial class TradingSchedulesRequest : pb::IMessage<TradingSchedulesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedulesRequest> _parser = new pb::MessageParser<TradingSchedulesRequest>(() => new TradingSchedulesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedulesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest(TradingSchedulesRequest other) : this() {
      exchange_ = other.exchange_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesRequest Clone() {
      return new TradingSchedulesRequest(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    /// <summary>
    ///Наименование биржи или расчетного календаря. &lt;/br>Если не передаётся, возвращается информация по всем доступным торговым площадкам.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало периода по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание периода по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedulesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedulesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedulesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список торговых площадок.
  /// </summary>
  public sealed partial class TradingSchedulesResponse : pb::IMessage<TradingSchedulesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedulesResponse> _parser = new pb::MessageParser<TradingSchedulesResponse>(() => new TradingSchedulesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedulesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse(TradingSchedulesResponse other) : this() {
      exchanges_ = other.exchanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedulesResponse Clone() {
      return new TradingSchedulesResponse(this);
    }

    /// <summary>Field number for the "exchanges" field.</summary>
    public const int ExchangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.TradingSchedule> _repeated_exchanges_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.TradingSchedule.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.TradingSchedule> exchanges_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.TradingSchedule>();
    /// <summary>
    /// Список торговых площадок и режимов торгов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.TradingSchedule> Exchanges {
      get { return exchanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedulesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedulesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exchanges_.Equals(other.exchanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exchanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      exchanges_.WriteTo(output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      exchanges_.WriteTo(ref output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += exchanges_.CalculateSize(_repeated_exchanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedulesResponse other) {
      if (other == null) {
        return;
      }
      exchanges_.Add(other.exchanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(ref input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по торговой площадке.
  /// </summary>
  public sealed partial class TradingSchedule : pb::IMessage<TradingSchedule>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingSchedule> _parser = new pb::MessageParser<TradingSchedule>(() => new TradingSchedule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule(TradingSchedule other) : this() {
      exchange_ = other.exchange_;
      days_ = other.days_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingSchedule Clone() {
      return new TradingSchedule(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private string exchange_ = "";
    /// <summary>
    /// Наименование торговой площадки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.TradingDay> _repeated_days_codec
        = pb::FieldCodec.ForMessage(18, global::Tinkoff.Proto.InvestApi.V1.TradingDay.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.TradingDay> days_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.TradingDay>();
    /// <summary>
    /// Массив с торговыми и неторговыми днями.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.TradingDay> Days {
      get { return days_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exchange != other.Exchange) return false;
      if(!days_.Equals(other.days_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      hash ^= days_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      days_.WriteTo(output, _repeated_days_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Exchange.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Exchange);
      }
      days_.WriteTo(ref output, _repeated_days_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      size += days_.CalculateSize(_repeated_days_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingSchedule other) {
      if (other == null) {
        return;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      days_.Add(other.days_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            days_.AddEntriesFrom(input, _repeated_days_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Exchange = input.ReadString();
            break;
          }
          case 18: {
            days_.AddEntriesFrom(ref input, _repeated_days_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация о времени торгов.
  /// </summary>
  public sealed partial class TradingDay : pb::IMessage<TradingDay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TradingDay> _parser = new pb::MessageParser<TradingDay>(() => new TradingDay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TradingDay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay(TradingDay other) : this() {
      date_ = other.date_ != null ? other.date_.Clone() : null;
      isTradingDay_ = other.isTradingDay_;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      openingAuctionStartTime_ = other.openingAuctionStartTime_ != null ? other.openingAuctionStartTime_.Clone() : null;
      closingAuctionEndTime_ = other.closingAuctionEndTime_ != null ? other.closingAuctionEndTime_.Clone() : null;
      eveningOpeningAuctionStartTime_ = other.eveningOpeningAuctionStartTime_ != null ? other.eveningOpeningAuctionStartTime_.Clone() : null;
      eveningStartTime_ = other.eveningStartTime_ != null ? other.eveningStartTime_.Clone() : null;
      eveningEndTime_ = other.eveningEndTime_ != null ? other.eveningEndTime_.Clone() : null;
      clearingStartTime_ = other.clearingStartTime_ != null ? other.clearingStartTime_.Clone() : null;
      clearingEndTime_ = other.clearingEndTime_ != null ? other.clearingEndTime_.Clone() : null;
      premarketStartTime_ = other.premarketStartTime_ != null ? other.premarketStartTime_.Clone() : null;
      premarketEndTime_ = other.premarketEndTime_ != null ? other.premarketEndTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TradingDay Clone() {
      return new TradingDay(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    /// Дата.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "is_trading_day" field.</summary>
    public const int IsTradingDayFieldNumber = 2;
    private bool isTradingDay_;
    /// <summary>
    /// Признак торгового дня на бирже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTradingDay {
      get { return isTradingDay_; }
      set {
        isTradingDay_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// Время начала торгов по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// Время окончания торгов по часовому поясу UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "opening_auction_start_time" field.</summary>
    public const int OpeningAuctionStartTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp openingAuctionStartTime_;
    /// <summary>
    /// Время начала аукциона открытия в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OpeningAuctionStartTime {
      get { return openingAuctionStartTime_; }
      set {
        openingAuctionStartTime_ = value;
      }
    }

    /// <summary>Field number for the "closing_auction_end_time" field.</summary>
    public const int ClosingAuctionEndTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp closingAuctionEndTime_;
    /// <summary>
    /// Время окончания аукциона закрытия в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClosingAuctionEndTime {
      get { return closingAuctionEndTime_; }
      set {
        closingAuctionEndTime_ = value;
      }
    }

    /// <summary>Field number for the "evening_opening_auction_start_time" field.</summary>
    public const int EveningOpeningAuctionStartTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eveningOpeningAuctionStartTime_;
    /// <summary>
    /// Время начала аукциона открытия вечерней сессии в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EveningOpeningAuctionStartTime {
      get { return eveningOpeningAuctionStartTime_; }
      set {
        eveningOpeningAuctionStartTime_ = value;
      }
    }

    /// <summary>Field number for the "evening_start_time" field.</summary>
    public const int EveningStartTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eveningStartTime_;
    /// <summary>
    /// Время начала вечерней сессии в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EveningStartTime {
      get { return eveningStartTime_; }
      set {
        eveningStartTime_ = value;
      }
    }

    /// <summary>Field number for the "evening_end_time" field.</summary>
    public const int EveningEndTimeFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eveningEndTime_;
    /// <summary>
    /// Время окончания вечерней сессии в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EveningEndTime {
      get { return eveningEndTime_; }
      set {
        eveningEndTime_ = value;
      }
    }

    /// <summary>Field number for the "clearing_start_time" field.</summary>
    public const int ClearingStartTimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp clearingStartTime_;
    /// <summary>
    /// Время начала основного клиринга в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClearingStartTime {
      get { return clearingStartTime_; }
      set {
        clearingStartTime_ = value;
      }
    }

    /// <summary>Field number for the "clearing_end_time" field.</summary>
    public const int ClearingEndTimeFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp clearingEndTime_;
    /// <summary>
    /// Время окончания основного клиринга в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ClearingEndTime {
      get { return clearingEndTime_; }
      set {
        clearingEndTime_ = value;
      }
    }

    /// <summary>Field number for the "premarket_start_time" field.</summary>
    public const int PremarketStartTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp premarketStartTime_;
    /// <summary>
    /// Время начала премаркета в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PremarketStartTime {
      get { return premarketStartTime_; }
      set {
        premarketStartTime_ = value;
      }
    }

    /// <summary>Field number for the "premarket_end_time" field.</summary>
    public const int PremarketEndTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp premarketEndTime_;
    /// <summary>
    /// Время окончания премаркета в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PremarketEndTime {
      get { return premarketEndTime_; }
      set {
        premarketEndTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TradingDay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TradingDay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (IsTradingDay != other.IsTradingDay) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (!object.Equals(OpeningAuctionStartTime, other.OpeningAuctionStartTime)) return false;
      if (!object.Equals(ClosingAuctionEndTime, other.ClosingAuctionEndTime)) return false;
      if (!object.Equals(EveningOpeningAuctionStartTime, other.EveningOpeningAuctionStartTime)) return false;
      if (!object.Equals(EveningStartTime, other.EveningStartTime)) return false;
      if (!object.Equals(EveningEndTime, other.EveningEndTime)) return false;
      if (!object.Equals(ClearingStartTime, other.ClearingStartTime)) return false;
      if (!object.Equals(ClearingEndTime, other.ClearingEndTime)) return false;
      if (!object.Equals(PremarketStartTime, other.PremarketStartTime)) return false;
      if (!object.Equals(PremarketEndTime, other.PremarketEndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (IsTradingDay != false) hash ^= IsTradingDay.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (openingAuctionStartTime_ != null) hash ^= OpeningAuctionStartTime.GetHashCode();
      if (closingAuctionEndTime_ != null) hash ^= ClosingAuctionEndTime.GetHashCode();
      if (eveningOpeningAuctionStartTime_ != null) hash ^= EveningOpeningAuctionStartTime.GetHashCode();
      if (eveningStartTime_ != null) hash ^= EveningStartTime.GetHashCode();
      if (eveningEndTime_ != null) hash ^= EveningEndTime.GetHashCode();
      if (clearingStartTime_ != null) hash ^= ClearingStartTime.GetHashCode();
      if (clearingEndTime_ != null) hash ^= ClearingEndTime.GetHashCode();
      if (premarketStartTime_ != null) hash ^= PremarketStartTime.GetHashCode();
      if (premarketEndTime_ != null) hash ^= PremarketEndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (IsTradingDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTradingDay);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (openingAuctionStartTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OpeningAuctionStartTime);
      }
      if (closingAuctionEndTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosingAuctionEndTime);
      }
      if (eveningOpeningAuctionStartTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EveningOpeningAuctionStartTime);
      }
      if (eveningStartTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EveningStartTime);
      }
      if (eveningEndTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EveningEndTime);
      }
      if (clearingStartTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClearingStartTime);
      }
      if (clearingEndTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ClearingEndTime);
      }
      if (premarketStartTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PremarketStartTime);
      }
      if (premarketEndTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PremarketEndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (IsTradingDay != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTradingDay);
      }
      if (startTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndTime);
      }
      if (openingAuctionStartTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OpeningAuctionStartTime);
      }
      if (closingAuctionEndTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosingAuctionEndTime);
      }
      if (eveningOpeningAuctionStartTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EveningOpeningAuctionStartTime);
      }
      if (eveningStartTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EveningStartTime);
      }
      if (eveningEndTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EveningEndTime);
      }
      if (clearingStartTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClearingStartTime);
      }
      if (clearingEndTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ClearingEndTime);
      }
      if (premarketStartTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PremarketStartTime);
      }
      if (premarketEndTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PremarketEndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (IsTradingDay != false) {
        size += 1 + 1;
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (openingAuctionStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpeningAuctionStartTime);
      }
      if (closingAuctionEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosingAuctionEndTime);
      }
      if (eveningOpeningAuctionStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EveningOpeningAuctionStartTime);
      }
      if (eveningStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EveningStartTime);
      }
      if (eveningEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EveningEndTime);
      }
      if (clearingStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearingStartTime);
      }
      if (clearingEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearingEndTime);
      }
      if (premarketStartTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PremarketStartTime);
      }
      if (premarketEndTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PremarketEndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TradingDay other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.IsTradingDay != false) {
        IsTradingDay = other.IsTradingDay;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.openingAuctionStartTime_ != null) {
        if (openingAuctionStartTime_ == null) {
          OpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OpeningAuctionStartTime.MergeFrom(other.OpeningAuctionStartTime);
      }
      if (other.closingAuctionEndTime_ != null) {
        if (closingAuctionEndTime_ == null) {
          ClosingAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClosingAuctionEndTime.MergeFrom(other.ClosingAuctionEndTime);
      }
      if (other.eveningOpeningAuctionStartTime_ != null) {
        if (eveningOpeningAuctionStartTime_ == null) {
          EveningOpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EveningOpeningAuctionStartTime.MergeFrom(other.EveningOpeningAuctionStartTime);
      }
      if (other.eveningStartTime_ != null) {
        if (eveningStartTime_ == null) {
          EveningStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EveningStartTime.MergeFrom(other.EveningStartTime);
      }
      if (other.eveningEndTime_ != null) {
        if (eveningEndTime_ == null) {
          EveningEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EveningEndTime.MergeFrom(other.EveningEndTime);
      }
      if (other.clearingStartTime_ != null) {
        if (clearingStartTime_ == null) {
          ClearingStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClearingStartTime.MergeFrom(other.ClearingStartTime);
      }
      if (other.clearingEndTime_ != null) {
        if (clearingEndTime_ == null) {
          ClearingEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ClearingEndTime.MergeFrom(other.ClearingEndTime);
      }
      if (other.premarketStartTime_ != null) {
        if (premarketStartTime_ == null) {
          PremarketStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PremarketStartTime.MergeFrom(other.PremarketStartTime);
      }
      if (other.premarketEndTime_ != null) {
        if (premarketEndTime_ == null) {
          PremarketEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PremarketEndTime.MergeFrom(other.PremarketEndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 16: {
            IsTradingDay = input.ReadBool();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 34: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            if (openingAuctionStartTime_ == null) {
              OpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningAuctionStartTime);
            break;
          }
          case 66: {
            if (closingAuctionEndTime_ == null) {
              ClosingAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClosingAuctionEndTime);
            break;
          }
          case 74: {
            if (eveningOpeningAuctionStartTime_ == null) {
              EveningOpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningOpeningAuctionStartTime);
            break;
          }
          case 82: {
            if (eveningStartTime_ == null) {
              EveningStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningStartTime);
            break;
          }
          case 90: {
            if (eveningEndTime_ == null) {
              EveningEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningEndTime);
            break;
          }
          case 98: {
            if (clearingStartTime_ == null) {
              ClearingStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingStartTime);
            break;
          }
          case 106: {
            if (clearingEndTime_ == null) {
              ClearingEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingEndTime);
            break;
          }
          case 114: {
            if (premarketStartTime_ == null) {
              PremarketStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketStartTime);
            break;
          }
          case 122: {
            if (premarketEndTime_ == null) {
              PremarketEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketEndTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 16: {
            IsTradingDay = input.ReadBool();
            break;
          }
          case 26: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 34: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 58: {
            if (openingAuctionStartTime_ == null) {
              OpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningAuctionStartTime);
            break;
          }
          case 66: {
            if (closingAuctionEndTime_ == null) {
              ClosingAuctionEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClosingAuctionEndTime);
            break;
          }
          case 74: {
            if (eveningOpeningAuctionStartTime_ == null) {
              EveningOpeningAuctionStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningOpeningAuctionStartTime);
            break;
          }
          case 82: {
            if (eveningStartTime_ == null) {
              EveningStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningStartTime);
            break;
          }
          case 90: {
            if (eveningEndTime_ == null) {
              EveningEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EveningEndTime);
            break;
          }
          case 98: {
            if (clearingStartTime_ == null) {
              ClearingStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingStartTime);
            break;
          }
          case 106: {
            if (clearingEndTime_ == null) {
              ClearingEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ClearingEndTime);
            break;
          }
          case 114: {
            if (premarketStartTime_ == null) {
              PremarketStartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketStartTime);
            break;
          }
          case 122: {
            if (premarketEndTime_ == null) {
              PremarketEndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PremarketEndTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос получения инструмента по идентификатору.
  /// </summary>
  public sealed partial class InstrumentRequest : pb::IMessage<InstrumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentRequest> _parser = new pb::MessageParser<InstrumentRequest>(() => new InstrumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest(InstrumentRequest other) : this() {
      idType_ = other.idType_;
      classCode_ = other.classCode_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRequest Clone() {
      return new InstrumentRequest(this);
    }

    /// <summary>Field number for the "id_type" field.</summary>
    public const int IdTypeFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType idType_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified;
    /// <summary>
    /// Тип идентификатора инструмента. Возможные значения: figi, ticker. Подробнее об идентификации инструментов: [Идентификация инструментов](https://tinkoff.github.io/investAPI/faq_identification/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType IdType {
      get { return idType_; }
      set {
        idType_ = value;
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 2;
    private string classCode_ = "";
    /// <summary>
    /// Идентификатор class_code. Обязателен при id_type = ticker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    /// <summary>
    /// Идентификатор запрашиваемого инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdType != other.IdType) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (IdType != global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) hash ^= IdType.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdType != global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdType);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassCode);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdType != global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IdType);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassCode);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (IdType != global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IdType);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.IdType != global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType.InstrumentIdUnspecified) {
        IdType = other.IdType;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdType = (global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType) input.ReadEnum();
            break;
          }
          case 18: {
            ClassCode = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IdType = (global::Tinkoff.Proto.InvestApi.V1.InstrumentIdType) input.ReadEnum();
            break;
          }
          case 18: {
            ClassCode = input.ReadString();
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос получения инструментов.
  /// </summary>
  public sealed partial class InstrumentsRequest : pb::IMessage<InstrumentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentsRequest> _parser = new pb::MessageParser<InstrumentsRequest>(() => new InstrumentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest(InstrumentsRequest other) : this() {
      instrumentStatus_ = other.instrumentStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentsRequest Clone() {
      return new InstrumentsRequest(this);
    }

    /// <summary>Field number for the "instrument_status" field.</summary>
    public const int InstrumentStatusFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus instrumentStatus_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus.Unspecified;
    /// <summary>
    ///Статус запрашиваемых инструментов. Возможные значения: [InstrumentStatus](#instrumentstatus)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus InstrumentStatus {
      get { return instrumentStatus_; }
      set {
        instrumentStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentStatus != other.InstrumentStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentStatus != global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus.Unspecified) hash ^= InstrumentStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (InstrumentStatus != global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (InstrumentStatus != global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentStatus != global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentStatus != global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus.Unspecified) {
        InstrumentStatus = other.InstrumentStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InstrumentStatus = (global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            InstrumentStatus = (global::Tinkoff.Proto.InvestApi.V1.InstrumentStatus) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация об облигации.
  /// </summary>
  public sealed partial class BondResponse : pb::IMessage<BondResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BondResponse> _parser = new pb::MessageParser<BondResponse>(() => new BondResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BondResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse(BondResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondResponse Clone() {
      return new BondResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Bond instrument_;
    /// <summary>
    /// Информация об облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Bond Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BondResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BondResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BondResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Bond();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Bond();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Bond();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список облигаций.
  /// </summary>
  public sealed partial class BondsResponse : pb::IMessage<BondsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BondsResponse> _parser = new pb::MessageParser<BondsResponse>(() => new BondsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BondsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse(BondsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BondsResponse Clone() {
      return new BondsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Bond> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Bond.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Bond> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Bond>();
    /// <summary>
    ///Массив облигаций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Bond> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BondsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BondsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BondsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос купонов по облигации.
  /// </summary>
  public sealed partial class GetBondCouponsRequest : pb::IMessage<GetBondCouponsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBondCouponsRequest> _parser = new pb::MessageParser<GetBondCouponsRequest>(() => new GetBondCouponsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBondCouponsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsRequest(GetBondCouponsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsRequest Clone() {
      return new GetBondCouponsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC. Фильтрация по coupon_date (дата выплаты купона)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC. Фильтрация по coupon_date (дата выплаты купона)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBondCouponsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBondCouponsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBondCouponsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Купоны по облигации.
  /// </summary>
  public sealed partial class GetBondCouponsResponse : pb::IMessage<GetBondCouponsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBondCouponsResponse> _parser = new pb::MessageParser<GetBondCouponsResponse>(() => new GetBondCouponsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBondCouponsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsResponse(GetBondCouponsResponse other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBondCouponsResponse Clone() {
      return new GetBondCouponsResponse(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Coupon> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Coupon.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Coupon> events_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Coupon>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Coupon> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBondCouponsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBondCouponsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      events_.WriteTo(ref output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBondCouponsResponse other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о купоне облигации.
  /// </summary>
  public sealed partial class Coupon : pb::IMessage<Coupon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Coupon> _parser = new pb::MessageParser<Coupon>(() => new Coupon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Coupon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Coupon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Coupon(Coupon other) : this() {
      figi_ = other.figi_;
      couponDate_ = other.couponDate_ != null ? other.couponDate_.Clone() : null;
      couponNumber_ = other.couponNumber_;
      fixDate_ = other.fixDate_ != null ? other.fixDate_.Clone() : null;
      payOneBond_ = other.payOneBond_ != null ? other.payOneBond_.Clone() : null;
      couponType_ = other.couponType_;
      couponStartDate_ = other.couponStartDate_ != null ? other.couponStartDate_.Clone() : null;
      couponEndDate_ = other.couponEndDate_ != null ? other.couponEndDate_.Clone() : null;
      couponPeriod_ = other.couponPeriod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Coupon Clone() {
      return new Coupon(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_date" field.</summary>
    public const int CouponDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp couponDate_;
    /// <summary>
    ///Дата выплаты купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CouponDate {
      get { return couponDate_; }
      set {
        couponDate_ = value;
      }
    }

    /// <summary>Field number for the "coupon_number" field.</summary>
    public const int CouponNumberFieldNumber = 3;
    private long couponNumber_;
    /// <summary>
    ///Номер купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CouponNumber {
      get { return couponNumber_; }
      set {
        couponNumber_ = value;
      }
    }

    /// <summary>Field number for the "fix_date" field.</summary>
    public const int FixDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fixDate_;
    /// <summary>
    ///(Опционально) Дата фиксации реестра для выплаты купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FixDate {
      get { return fixDate_; }
      set {
        fixDate_ = value;
      }
    }

    /// <summary>Field number for the "pay_one_bond" field.</summary>
    public const int PayOneBondFieldNumber = 5;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue payOneBond_;
    /// <summary>
    ///Выплата на одну облигацию.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue PayOneBond {
      get { return payOneBond_; }
      set {
        payOneBond_ = value;
      }
    }

    /// <summary>Field number for the "coupon_type" field.</summary>
    public const int CouponTypeFieldNumber = 6;
    private global::Tinkoff.Proto.InvestApi.V1.CouponType couponType_ = global::Tinkoff.Proto.InvestApi.V1.CouponType.Unspecified;
    /// <summary>
    ///Тип купона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.CouponType CouponType {
      get { return couponType_; }
      set {
        couponType_ = value;
      }
    }

    /// <summary>Field number for the "coupon_start_date" field.</summary>
    public const int CouponStartDateFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp couponStartDate_;
    /// <summary>
    ///Начало купонного периода.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CouponStartDate {
      get { return couponStartDate_; }
      set {
        couponStartDate_ = value;
      }
    }

    /// <summary>Field number for the "coupon_end_date" field.</summary>
    public const int CouponEndDateFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp couponEndDate_;
    /// <summary>
    ///Окончание купонного периода.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CouponEndDate {
      get { return couponEndDate_; }
      set {
        couponEndDate_ = value;
      }
    }

    /// <summary>Field number for the "coupon_period" field.</summary>
    public const int CouponPeriodFieldNumber = 9;
    private int couponPeriod_;
    /// <summary>
    ///Купонный период в днях.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponPeriod {
      get { return couponPeriod_; }
      set {
        couponPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Coupon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Coupon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(CouponDate, other.CouponDate)) return false;
      if (CouponNumber != other.CouponNumber) return false;
      if (!object.Equals(FixDate, other.FixDate)) return false;
      if (!object.Equals(PayOneBond, other.PayOneBond)) return false;
      if (CouponType != other.CouponType) return false;
      if (!object.Equals(CouponStartDate, other.CouponStartDate)) return false;
      if (!object.Equals(CouponEndDate, other.CouponEndDate)) return false;
      if (CouponPeriod != other.CouponPeriod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (couponDate_ != null) hash ^= CouponDate.GetHashCode();
      if (CouponNumber != 0L) hash ^= CouponNumber.GetHashCode();
      if (fixDate_ != null) hash ^= FixDate.GetHashCode();
      if (payOneBond_ != null) hash ^= PayOneBond.GetHashCode();
      if (CouponType != global::Tinkoff.Proto.InvestApi.V1.CouponType.Unspecified) hash ^= CouponType.GetHashCode();
      if (couponStartDate_ != null) hash ^= CouponStartDate.GetHashCode();
      if (couponEndDate_ != null) hash ^= CouponEndDate.GetHashCode();
      if (CouponPeriod != 0) hash ^= CouponPeriod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (couponDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CouponDate);
      }
      if (CouponNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CouponNumber);
      }
      if (fixDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixDate);
      }
      if (payOneBond_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PayOneBond);
      }
      if (CouponType != global::Tinkoff.Proto.InvestApi.V1.CouponType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CouponType);
      }
      if (couponStartDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CouponStartDate);
      }
      if (couponEndDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CouponEndDate);
      }
      if (CouponPeriod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CouponPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (couponDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CouponDate);
      }
      if (CouponNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CouponNumber);
      }
      if (fixDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixDate);
      }
      if (payOneBond_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PayOneBond);
      }
      if (CouponType != global::Tinkoff.Proto.InvestApi.V1.CouponType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CouponType);
      }
      if (couponStartDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CouponStartDate);
      }
      if (couponEndDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CouponEndDate);
      }
      if (CouponPeriod != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CouponPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (couponDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponDate);
      }
      if (CouponNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CouponNumber);
      }
      if (fixDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixDate);
      }
      if (payOneBond_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayOneBond);
      }
      if (CouponType != global::Tinkoff.Proto.InvestApi.V1.CouponType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CouponType);
      }
      if (couponStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponStartDate);
      }
      if (couponEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CouponEndDate);
      }
      if (CouponPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CouponPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Coupon other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.couponDate_ != null) {
        if (couponDate_ == null) {
          CouponDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CouponDate.MergeFrom(other.CouponDate);
      }
      if (other.CouponNumber != 0L) {
        CouponNumber = other.CouponNumber;
      }
      if (other.fixDate_ != null) {
        if (fixDate_ == null) {
          FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FixDate.MergeFrom(other.FixDate);
      }
      if (other.payOneBond_ != null) {
        if (payOneBond_ == null) {
          PayOneBond = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        PayOneBond.MergeFrom(other.PayOneBond);
      }
      if (other.CouponType != global::Tinkoff.Proto.InvestApi.V1.CouponType.Unspecified) {
        CouponType = other.CouponType;
      }
      if (other.couponStartDate_ != null) {
        if (couponStartDate_ == null) {
          CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CouponStartDate.MergeFrom(other.CouponStartDate);
      }
      if (other.couponEndDate_ != null) {
        if (couponEndDate_ == null) {
          CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CouponEndDate.MergeFrom(other.CouponEndDate);
      }
      if (other.CouponPeriod != 0) {
        CouponPeriod = other.CouponPeriod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (couponDate_ == null) {
              CouponDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponDate);
            break;
          }
          case 24: {
            CouponNumber = input.ReadInt64();
            break;
          }
          case 34: {
            if (fixDate_ == null) {
              FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FixDate);
            break;
          }
          case 42: {
            if (payOneBond_ == null) {
              PayOneBond = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PayOneBond);
            break;
          }
          case 48: {
            CouponType = (global::Tinkoff.Proto.InvestApi.V1.CouponType) input.ReadEnum();
            break;
          }
          case 58: {
            if (couponStartDate_ == null) {
              CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponStartDate);
            break;
          }
          case 66: {
            if (couponEndDate_ == null) {
              CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponEndDate);
            break;
          }
          case 72: {
            CouponPeriod = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (couponDate_ == null) {
              CouponDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponDate);
            break;
          }
          case 24: {
            CouponNumber = input.ReadInt64();
            break;
          }
          case 34: {
            if (fixDate_ == null) {
              FixDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FixDate);
            break;
          }
          case 42: {
            if (payOneBond_ == null) {
              PayOneBond = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PayOneBond);
            break;
          }
          case 48: {
            CouponType = (global::Tinkoff.Proto.InvestApi.V1.CouponType) input.ReadEnum();
            break;
          }
          case 58: {
            if (couponStartDate_ == null) {
              CouponStartDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponStartDate);
            break;
          }
          case 66: {
            if (couponEndDate_ == null) {
              CouponEndDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CouponEndDate);
            break;
          }
          case 72: {
            CouponPeriod = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по валюте.
  /// </summary>
  public sealed partial class CurrencyResponse : pb::IMessage<CurrencyResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrencyResponse> _parser = new pb::MessageParser<CurrencyResponse>(() => new CurrencyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrencyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse(CurrencyResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrencyResponse Clone() {
      return new CurrencyResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Currency instrument_;
    /// <summary>
    /// Информация о валюте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Currency Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrencyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrencyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrencyResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Currency();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Currency();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Currency();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по валютам.
  /// </summary>
  public sealed partial class CurrenciesResponse : pb::IMessage<CurrenciesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrenciesResponse> _parser = new pb::MessageParser<CurrenciesResponse>(() => new CurrenciesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrenciesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse(CurrenciesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrenciesResponse Clone() {
      return new CurrenciesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Currency> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Currency.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Currency> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Currency>();
    /// <summary>
    ///Массив валют.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Currency> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrenciesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrenciesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrenciesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фонду.
  /// </summary>
  public sealed partial class EtfResponse : pb::IMessage<EtfResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EtfResponse> _parser = new pb::MessageParser<EtfResponse>(() => new EtfResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EtfResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse(EtfResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfResponse Clone() {
      return new EtfResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Etf instrument_;
    /// <summary>
    /// Информация о фонде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Etf Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EtfResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EtfResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EtfResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Etf();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Etf();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Etf();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фондам.
  /// </summary>
  public sealed partial class EtfsResponse : pb::IMessage<EtfsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EtfsResponse> _parser = new pb::MessageParser<EtfsResponse>(() => new EtfsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EtfsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse(EtfsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EtfsResponse Clone() {
      return new EtfsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Etf> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Etf.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Etf> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Etf>();
    /// <summary>
    ///Массив фондов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Etf> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EtfsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EtfsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EtfsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсу.
  /// </summary>
  public sealed partial class FutureResponse : pb::IMessage<FutureResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FutureResponse> _parser = new pb::MessageParser<FutureResponse>(() => new FutureResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FutureResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse(FutureResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FutureResponse Clone() {
      return new FutureResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Future instrument_;
    /// <summary>
    /// Информация о фьючерсу.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Future Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FutureResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FutureResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FutureResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Future();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Future();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Future();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсам.
  /// </summary>
  public sealed partial class FuturesResponse : pb::IMessage<FuturesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturesResponse> _parser = new pb::MessageParser<FuturesResponse>(() => new FuturesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse(FuturesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesResponse Clone() {
      return new FuturesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Future> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Future.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Future> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Future>();
    /// <summary>
    ///Массив фьючерсов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Future> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по опциону.
  /// </summary>
  public sealed partial class OptionResponse : pb::IMessage<OptionResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionResponse> _parser = new pb::MessageParser<OptionResponse>(() => new OptionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionResponse(OptionResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionResponse Clone() {
      return new OptionResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Option instrument_;
    /// <summary>
    /// Информация по опциону.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Option Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Option();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Option();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Option();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по опционам.
  /// </summary>
  public sealed partial class OptionsResponse : pb::IMessage<OptionsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionsResponse> _parser = new pb::MessageParser<OptionsResponse>(() => new OptionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionsResponse(OptionsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionsResponse Clone() {
      return new OptionsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Option> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Option.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Option> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Option>();
    /// <summary>
    ///Массив данных по опциону.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Option> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Опцион.
  /// </summary>
  public sealed partial class Option : pb::IMessage<Option>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Option> _parser = new pb::MessageParser<Option>(() => new Option());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Option> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Option() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Option(Option other) : this() {
      uid_ = other.uid_;
      positionUid_ = other.positionUid_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      basicAssetPositionUid_ = other.basicAssetPositionUid_;
      tradingStatus_ = other.tradingStatus_;
      realExchange_ = other.realExchange_;
      direction_ = other.direction_;
      paymentType_ = other.paymentType_;
      style_ = other.style_;
      settlementType_ = other.settlementType_;
      name_ = other.name_;
      currency_ = other.currency_;
      settlementCurrency_ = other.settlementCurrency_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      exchange_ = other.exchange_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      lot_ = other.lot_;
      basicAssetSize_ = other.basicAssetSize_ != null ? other.basicAssetSize_.Clone() : null;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      strikePrice_ = other.strikePrice_ != null ? other.strikePrice_.Clone() : null;
      expirationDate_ = other.expirationDate_ != null ? other.expirationDate_.Clone() : null;
      firstTradeDate_ = other.firstTradeDate_ != null ? other.firstTradeDate_.Clone() : null;
      lastTradeDate_ = other.lastTradeDate_ != null ? other.lastTradeDate_.Clone() : null;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      forIisFlag_ = other.forIisFlag_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Option Clone() {
      return new Option(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 2;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 3;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 4;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_position_uid" field.</summary>
    public const int BasicAssetPositionUidFieldNumber = 5;
    private string basicAssetPositionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции основного инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAssetPositionUid {
      get { return basicAssetPositionUid_; }
      set {
        basicAssetPositionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 21;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 31;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов. Допустимые значения: [REAL_EXCHANGE_MOEX, REAL_EXCHANGE_RTS]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 41;
    private global::Tinkoff.Proto.InvestApi.V1.OptionDirection direction_ = global::Tinkoff.Proto.InvestApi.V1.OptionDirection.Unspecified;
    /// <summary>
    ///Направление опциона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.OptionDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "payment_type" field.</summary>
    public const int PaymentTypeFieldNumber = 42;
    private global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType paymentType_ = global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType.Unspecified;
    /// <summary>
    ///Тип расчетов по опциону.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType PaymentType {
      get { return paymentType_; }
      set {
        paymentType_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 43;
    private global::Tinkoff.Proto.InvestApi.V1.OptionStyle style_ = global::Tinkoff.Proto.InvestApi.V1.OptionStyle.Unspecified;
    /// <summary>
    ///Стиль опциона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.OptionStyle Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "settlement_type" field.</summary>
    public const int SettlementTypeFieldNumber = 44;
    private global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType settlementType_ = global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified;
    /// <summary>
    ///Способ исполнения опциона.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType SettlementType {
      get { return settlementType_; }
      set {
        settlementType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 101;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 111;
    private string currency_ = "";
    /// <summary>
    ///Валюта.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlement_currency" field.</summary>
    public const int SettlementCurrencyFieldNumber = 112;
    private string settlementCurrency_ = "";
    /// <summary>
    ///Валюта, в которой оценивается контракт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettlementCurrency {
      get { return settlementCurrency_; }
      set {
        settlementCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 131;
    private string assetType_ = "";
    /// <summary>
    ///Тип актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 132;
    private string basicAsset_ = "";
    /// <summary>
    ///Основной актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 141;
    private string exchange_ = "";
    /// <summary>
    ///Биржа.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 151;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны рисков.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 152;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны рисков.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 161;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 201;
    private int lot_;
    /// <summary>
    ///Количество бумаг в лоте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "basic_asset_size" field.</summary>
    public const int BasicAssetSizeFieldNumber = 211;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation basicAssetSize_;
    /// <summary>
    ///Размер основного актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation BasicAssetSize {
      get { return basicAssetSize_; }
      set {
        basicAssetSize_ = value;
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 221;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 222;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 223;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи лонг.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 224;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 225;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи лонг.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 226;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 231;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Минимальный шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "strike_price" field.</summary>
    public const int StrikePriceFieldNumber = 241;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue strikePrice_;
    /// <summary>
    ///Цена страйка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue StrikePrice {
      get { return strikePrice_; }
      set {
        strikePrice_ = value;
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 301;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationDate_;
    /// <summary>
    ///Дата истечения срока в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "first_trade_date" field.</summary>
    public const int FirstTradeDateFieldNumber = 311;
    private global::Google.Protobuf.WellKnownTypes.Timestamp firstTradeDate_;
    /// <summary>
    ///Дата начала обращения контракта в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FirstTradeDate {
      get { return firstTradeDate_; }
      set {
        firstTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_date" field.</summary>
    public const int LastTradeDateFieldNumber = 312;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastTradeDate_;
    /// <summary>
    ///Дата исполнения в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastTradeDate {
      get { return lastTradeDate_; }
      set {
        lastTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 321;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 322;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи в формате UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 401;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 402;
    private bool forIisFlag_;
    /// <summary>
    ///Возможность покупки/продажи на ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 403;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 404;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 405;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 406;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 407;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 408;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 409;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Option);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Option other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (PositionUid != other.PositionUid) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (BasicAssetPositionUid != other.BasicAssetPositionUid) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (RealExchange != other.RealExchange) return false;
      if (Direction != other.Direction) return false;
      if (PaymentType != other.PaymentType) return false;
      if (Style != other.Style) return false;
      if (SettlementType != other.SettlementType) return false;
      if (Name != other.Name) return false;
      if (Currency != other.Currency) return false;
      if (SettlementCurrency != other.SettlementCurrency) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (Exchange != other.Exchange) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (Lot != other.Lot) return false;
      if (!object.Equals(BasicAssetSize, other.BasicAssetSize)) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (!object.Equals(StrikePrice, other.StrikePrice)) return false;
      if (!object.Equals(ExpirationDate, other.ExpirationDate)) return false;
      if (!object.Equals(FirstTradeDate, other.FirstTradeDate)) return false;
      if (!object.Equals(LastTradeDate, other.LastTradeDate)) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (BasicAssetPositionUid.Length != 0) hash ^= BasicAssetPositionUid.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (Direction != global::Tinkoff.Proto.InvestApi.V1.OptionDirection.Unspecified) hash ^= Direction.GetHashCode();
      if (PaymentType != global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType.Unspecified) hash ^= PaymentType.GetHashCode();
      if (Style != global::Tinkoff.Proto.InvestApi.V1.OptionStyle.Unspecified) hash ^= Style.GetHashCode();
      if (SettlementType != global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) hash ^= SettlementType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SettlementCurrency.Length != 0) hash ^= SettlementCurrency.GetHashCode();
      if (AssetType.Length != 0) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (basicAssetSize_ != null) hash ^= BasicAssetSize.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (strikePrice_ != null) hash ^= StrikePrice.GetHashCode();
      if (expirationDate_ != null) hash ^= ExpirationDate.GetHashCode();
      if (firstTradeDate_ != null) hash ^= FirstTradeDate.GetHashCode();
      if (lastTradeDate_ != null) hash ^= LastTradeDate.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PositionUid);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicAssetPositionUid);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (Direction != global::Tinkoff.Proto.InvestApi.V1.OptionDirection.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) Direction);
      }
      if (PaymentType != global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType.Unspecified) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) PaymentType);
      }
      if (Style != global::Tinkoff.Proto.InvestApi.V1.OptionStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) Style);
      }
      if (SettlementType != global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) SettlementType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(Currency);
      }
      if (SettlementCurrency.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SettlementCurrency);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(162, 8);
        output.WriteString(BasicAsset);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(234, 8);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(194, 9);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 10);
        output.WriteString(Sector);
      }
      if (Lot != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(Lot);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(BasicAssetSize);
      }
      if (klong_ != null) {
        output.WriteRawTag(234, 13);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(242, 13);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(130, 14);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(138, 14);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(146, 14);
        output.WriteMessage(DshortMin);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 14);
        output.WriteMessage(MinPriceIncrement);
      }
      if (strikePrice_ != null) {
        output.WriteRawTag(138, 15);
        output.WriteMessage(StrikePrice);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(ExpirationDate);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(186, 19);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(194, 19);
        output.WriteMessage(LastTradeDate);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(138, 20);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(146, 20);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(ShortEnabledFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(144, 25);
        output.WriteBool(ForIisFlag);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(152, 25);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(168, 25);
        output.WriteBool(SellAvailableFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(176, 25);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(184, 25);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(192, 25);
        output.WriteBool(BlockedTcaFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(200, 25);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PositionUid);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BasicAssetPositionUid);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (Direction != global::Tinkoff.Proto.InvestApi.V1.OptionDirection.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) Direction);
      }
      if (PaymentType != global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType.Unspecified) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) PaymentType);
      }
      if (Style != global::Tinkoff.Proto.InvestApi.V1.OptionStyle.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) Style);
      }
      if (SettlementType != global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) SettlementType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(170, 6);
        output.WriteString(Name);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(250, 6);
        output.WriteString(Currency);
      }
      if (SettlementCurrency.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(SettlementCurrency);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(154, 8);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(162, 8);
        output.WriteString(BasicAsset);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(234, 8);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(194, 9);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(138, 10);
        output.WriteString(Sector);
      }
      if (Lot != 0) {
        output.WriteRawTag(200, 12);
        output.WriteInt32(Lot);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(BasicAssetSize);
      }
      if (klong_ != null) {
        output.WriteRawTag(234, 13);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(242, 13);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(250, 13);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(130, 14);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(138, 14);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(146, 14);
        output.WriteMessage(DshortMin);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 14);
        output.WriteMessage(MinPriceIncrement);
      }
      if (strikePrice_ != null) {
        output.WriteRawTag(138, 15);
        output.WriteMessage(StrikePrice);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(234, 18);
        output.WriteMessage(ExpirationDate);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(186, 19);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(194, 19);
        output.WriteMessage(LastTradeDate);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(138, 20);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(146, 20);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(136, 25);
        output.WriteBool(ShortEnabledFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(144, 25);
        output.WriteBool(ForIisFlag);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(152, 25);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(160, 25);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(168, 25);
        output.WriteBool(SellAvailableFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(176, 25);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(184, 25);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(192, 25);
        output.WriteBool(BlockedTcaFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(200, 25);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (PositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (BasicAssetPositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicAssetPositionUid);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (Direction != global::Tinkoff.Proto.InvestApi.V1.OptionDirection.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (PaymentType != global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PaymentType);
      }
      if (Style != global::Tinkoff.Proto.InvestApi.V1.OptionStyle.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Style);
      }
      if (SettlementType != global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SettlementType);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Currency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SettlementCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettlementCurrency);
      }
      if (AssetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (Lot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (basicAssetSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicAssetSize);
      }
      if (klong_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (strikePrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StrikePrice);
      }
      if (expirationDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpirationDate);
      }
      if (firstTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeDate);
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (ShortEnabledFlag != false) {
        size += 2 + 1;
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Option other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.BasicAssetPositionUid.Length != 0) {
        BasicAssetPositionUid = other.BasicAssetPositionUid;
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.Direction != global::Tinkoff.Proto.InvestApi.V1.OptionDirection.Unspecified) {
        Direction = other.Direction;
      }
      if (other.PaymentType != global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType.Unspecified) {
        PaymentType = other.PaymentType;
      }
      if (other.Style != global::Tinkoff.Proto.InvestApi.V1.OptionStyle.Unspecified) {
        Style = other.Style;
      }
      if (other.SettlementType != global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType.OptionExecutionTypeUnspecified) {
        SettlementType = other.SettlementType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SettlementCurrency.Length != 0) {
        SettlementCurrency = other.SettlementCurrency;
      }
      if (other.AssetType.Length != 0) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.basicAssetSize_ != null) {
        if (basicAssetSize_ == null) {
          BasicAssetSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        BasicAssetSize.MergeFrom(other.BasicAssetSize);
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.strikePrice_ != null) {
        if (strikePrice_ == null) {
          StrikePrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        StrikePrice.MergeFrom(other.StrikePrice);
      }
      if (other.expirationDate_ != null) {
        if (expirationDate_ == null) {
          ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationDate.MergeFrom(other.ExpirationDate);
      }
      if (other.firstTradeDate_ != null) {
        if (firstTradeDate_ == null) {
          FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FirstTradeDate.MergeFrom(other.FirstTradeDate);
      }
      if (other.lastTradeDate_ != null) {
        if (lastTradeDate_ == null) {
          LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastTradeDate.MergeFrom(other.LastTradeDate);
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            PositionUid = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 168: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 248: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 328: {
            Direction = (global::Tinkoff.Proto.InvestApi.V1.OptionDirection) input.ReadEnum();
            break;
          }
          case 336: {
            PaymentType = (global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType) input.ReadEnum();
            break;
          }
          case 344: {
            Style = (global::Tinkoff.Proto.InvestApi.V1.OptionStyle) input.ReadEnum();
            break;
          }
          case 352: {
            SettlementType = (global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType) input.ReadEnum();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 890: {
            Currency = input.ReadString();
            break;
          }
          case 898: {
            SettlementCurrency = input.ReadString();
            break;
          }
          case 1050: {
            AssetType = input.ReadString();
            break;
          }
          case 1058: {
            BasicAsset = input.ReadString();
            break;
          }
          case 1130: {
            Exchange = input.ReadString();
            break;
          }
          case 1210: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 1218: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 1290: {
            Sector = input.ReadString();
            break;
          }
          case 1608: {
            Lot = input.ReadInt32();
            break;
          }
          case 1690: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 1770: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 1778: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 1786: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 1794: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 1802: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 1810: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 1850: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 1930: {
            if (strikePrice_ == null) {
              StrikePrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(StrikePrice);
            break;
          }
          case 2410: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 2490: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 2498: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 2570: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 2578: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 3208: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 3216: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 3224: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 3232: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 3240: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 3248: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 3256: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 3264: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 3272: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            PositionUid = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 168: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 248: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 328: {
            Direction = (global::Tinkoff.Proto.InvestApi.V1.OptionDirection) input.ReadEnum();
            break;
          }
          case 336: {
            PaymentType = (global::Tinkoff.Proto.InvestApi.V1.OptionPaymentType) input.ReadEnum();
            break;
          }
          case 344: {
            Style = (global::Tinkoff.Proto.InvestApi.V1.OptionStyle) input.ReadEnum();
            break;
          }
          case 352: {
            SettlementType = (global::Tinkoff.Proto.InvestApi.V1.OptionSettlementType) input.ReadEnum();
            break;
          }
          case 810: {
            Name = input.ReadString();
            break;
          }
          case 890: {
            Currency = input.ReadString();
            break;
          }
          case 898: {
            SettlementCurrency = input.ReadString();
            break;
          }
          case 1050: {
            AssetType = input.ReadString();
            break;
          }
          case 1058: {
            BasicAsset = input.ReadString();
            break;
          }
          case 1130: {
            Exchange = input.ReadString();
            break;
          }
          case 1210: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 1218: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 1290: {
            Sector = input.ReadString();
            break;
          }
          case 1608: {
            Lot = input.ReadInt32();
            break;
          }
          case 1690: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 1770: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 1778: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 1786: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 1794: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 1802: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 1810: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 1850: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 1930: {
            if (strikePrice_ == null) {
              StrikePrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(StrikePrice);
            break;
          }
          case 2410: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 2490: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 2498: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 2570: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 2578: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 3208: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 3216: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 3224: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 3232: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 3240: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 3248: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 3256: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 3264: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 3272: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по акции.
  /// </summary>
  public sealed partial class ShareResponse : pb::IMessage<ShareResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShareResponse> _parser = new pb::MessageParser<ShareResponse>(() => new ShareResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShareResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse(ShareResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShareResponse Clone() {
      return new ShareResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Share instrument_;
    /// <summary>
    /// Информация об акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Share Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShareResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShareResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShareResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Share();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Share();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Share();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по акциям.
  /// </summary>
  public sealed partial class SharesResponse : pb::IMessage<SharesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SharesResponse> _parser = new pb::MessageParser<SharesResponse>(() => new SharesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SharesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse(SharesResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SharesResponse Clone() {
      return new SharesResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Share> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Share.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Share> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Share>();
    /// <summary>
    ///Массив акций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Share> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SharesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SharesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SharesResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об облигации.
  /// </summary>
  public sealed partial class Bond : pb::IMessage<Bond>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bond> _parser = new pb::MessageParser<Bond>(() => new Bond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Bond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond(Bond other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      couponQuantityPerYear_ = other.couponQuantityPerYear_;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      initialNominal_ = other.initialNominal_ != null ? other.initialNominal_.Clone() : null;
      stateRegDate_ = other.stateRegDate_ != null ? other.stateRegDate_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      placementPrice_ = other.placementPrice_ != null ? other.placementPrice_.Clone() : null;
      aciValue_ = other.aciValue_ != null ? other.aciValue_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      issueKind_ = other.issueKind_;
      issueSize_ = other.issueSize_;
      issueSizePlan_ = other.issueSizePlan_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      floatingCouponFlag_ = other.floatingCouponFlag_;
      perpetualFlag_ = other.perpetualFlag_;
      amortizationFlag_ = other.amortizationFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      subordinatedFlag_ = other.subordinatedFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      riskLevel_ = other.riskLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Bond Clone() {
      return new Bond(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_quantity_per_year" field.</summary>
    public const int CouponQuantityPerYearFieldNumber = 17;
    private int couponQuantityPerYear_;
    /// <summary>
    ///Количество выплат по купонам в год.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponQuantityPerYear {
      get { return couponQuantityPerYear_; }
      set {
        couponQuantityPerYear_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения облигации в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 19;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "initial_nominal" field.</summary>
    public const int InitialNominalFieldNumber = 20;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue initialNominal_;
    /// <summary>
    ///Первоначальный номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue InitialNominal {
      get { return initialNominal_; }
      set {
        initialNominal_ = value;
      }
    }

    /// <summary>Field number for the "state_reg_date" field.</summary>
    public const int StateRegDateFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stateRegDate_;
    /// <summary>
    ///Дата выпуска облигации в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StateRegDate {
      get { return stateRegDate_; }
      set {
        stateRegDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 22;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_price" field.</summary>
    public const int PlacementPriceFieldNumber = 23;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue placementPrice_;
    /// <summary>
    ///Цена размещения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue PlacementPrice {
      get { return placementPrice_; }
      set {
        placementPrice_ = value;
      }
    }

    /// <summary>Field number for the "aci_value" field.</summary>
    public const int AciValueFieldNumber = 24;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue aciValue_;
    /// <summary>
    ///Значение НКД (накопленного купонного дохода) на дату.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue AciValue {
      get { return aciValue_; }
      set {
        aciValue_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 25;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 26;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 27;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 28;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска. Возможные значения: &lt;/br>**documentary** — документарная; &lt;/br>**non_documentary** — бездокументарная.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 29;
    private long issueSize_;
    /// <summary>
    ///Размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 30;
    private long issueSizePlan_;
    /// <summary>
    ///Плановый размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 31;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 32;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 33;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 34;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "floating_coupon_flag" field.</summary>
    public const int FloatingCouponFlagFieldNumber = 35;
    private bool floatingCouponFlag_;
    /// <summary>
    ///Признак облигации с плавающим купоном.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FloatingCouponFlag {
      get { return floatingCouponFlag_; }
      set {
        floatingCouponFlag_ = value;
      }
    }

    /// <summary>Field number for the "perpetual_flag" field.</summary>
    public const int PerpetualFlagFieldNumber = 36;
    private bool perpetualFlag_;
    /// <summary>
    ///Признак бессрочной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PerpetualFlag {
      get { return perpetualFlag_; }
      set {
        perpetualFlag_ = value;
      }
    }

    /// <summary>Field number for the "amortization_flag" field.</summary>
    public const int AmortizationFlagFieldNumber = 37;
    private bool amortizationFlag_;
    /// <summary>
    ///Признак облигации с амортизацией долга.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AmortizationFlag {
      get { return amortizationFlag_; }
      set {
        amortizationFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 38;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 39;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 40;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 41;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 42;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 51;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 52;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 53;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 54;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "subordinated_flag" field.</summary>
    public const int SubordinatedFlagFieldNumber = 55;
    private bool subordinatedFlag_;
    /// <summary>
    ///Признак субординированной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubordinatedFlag {
      get { return subordinatedFlag_; }
      set {
        subordinatedFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 61;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 62;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "risk_level" field.</summary>
    public const int RiskLevelFieldNumber = 63;
    private global::Tinkoff.Proto.InvestApi.V1.RiskLevel riskLevel_ = global::Tinkoff.Proto.InvestApi.V1.RiskLevel.Unspecified;
    /// <summary>
    ///Уровень риска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RiskLevel RiskLevel {
      get { return riskLevel_; }
      set {
        riskLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Bond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Bond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (CouponQuantityPerYear != other.CouponQuantityPerYear) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (!object.Equals(InitialNominal, other.InitialNominal)) return false;
      if (!object.Equals(StateRegDate, other.StateRegDate)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (!object.Equals(PlacementPrice, other.PlacementPrice)) return false;
      if (!object.Equals(AciValue, other.AciValue)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (IssueKind != other.IssueKind) return false;
      if (IssueSize != other.IssueSize) return false;
      if (IssueSizePlan != other.IssueSizePlan) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (FloatingCouponFlag != other.FloatingCouponFlag) return false;
      if (PerpetualFlag != other.PerpetualFlag) return false;
      if (AmortizationFlag != other.AmortizationFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (SubordinatedFlag != other.SubordinatedFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (RiskLevel != other.RiskLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CouponQuantityPerYear != 0) hash ^= CouponQuantityPerYear.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (initialNominal_ != null) hash ^= InitialNominal.GetHashCode();
      if (stateRegDate_ != null) hash ^= StateRegDate.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (placementPrice_ != null) hash ^= PlacementPrice.GetHashCode();
      if (aciValue_ != null) hash ^= AciValue.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (IssueSizePlan != 0L) hash ^= IssueSizePlan.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (FloatingCouponFlag != false) hash ^= FloatingCouponFlag.GetHashCode();
      if (PerpetualFlag != false) hash ^= PerpetualFlag.GetHashCode();
      if (AmortizationFlag != false) hash ^= AmortizationFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (SubordinatedFlag != false) hash ^= SubordinatedFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (RiskLevel != global::Tinkoff.Proto.InvestApi.V1.RiskLevel.Unspecified) hash ^= RiskLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MaturityDate);
      }
      if (nominal_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Nominal);
      }
      if (initialNominal_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InitialNominal);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (aciValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Sector);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IssueKind);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(SellAvailableFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PerpetualFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AmortizationFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SubordinatedFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (RiskLevel != global::Tinkoff.Proto.InvestApi.V1.RiskLevel.Unspecified) {
        output.WriteRawTag(248, 3);
        output.WriteEnum((int) RiskLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MaturityDate);
      }
      if (nominal_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Nominal);
      }
      if (initialNominal_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(InitialNominal);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (aciValue_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Sector);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(IssueKind);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(SellAvailableFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(PerpetualFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(AmortizationFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(200, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(SubordinatedFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(242, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (RiskLevel != global::Tinkoff.Proto.InvestApi.V1.RiskLevel.Unspecified) {
        output.WriteRawTag(248, 3);
        output.WriteEnum((int) RiskLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CouponQuantityPerYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CouponQuantityPerYear);
      }
      if (maturityDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (initialNominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InitialNominal);
      }
      if (stateRegDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateRegDate);
      }
      if (placementDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (placementPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementPrice);
      }
      if (aciValue_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AciValue);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IssueKind.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (IssueSizePlan != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSizePlan);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (FloatingCouponFlag != false) {
        size += 2 + 1;
      }
      if (PerpetualFlag != false) {
        size += 2 + 1;
      }
      if (AmortizationFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (SubordinatedFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (RiskLevel != global::Tinkoff.Proto.InvestApi.V1.RiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Bond other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CouponQuantityPerYear != 0) {
        CouponQuantityPerYear = other.CouponQuantityPerYear;
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.initialNominal_ != null) {
        if (initialNominal_ == null) {
          InitialNominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        InitialNominal.MergeFrom(other.InitialNominal);
      }
      if (other.stateRegDate_ != null) {
        if (stateRegDate_ == null) {
          StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StateRegDate.MergeFrom(other.StateRegDate);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.placementPrice_ != null) {
        if (placementPrice_ == null) {
          PlacementPrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        PlacementPrice.MergeFrom(other.PlacementPrice);
      }
      if (other.aciValue_ != null) {
        if (aciValue_ == null) {
          AciValue = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        AciValue.MergeFrom(other.AciValue);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.IssueSizePlan != 0L) {
        IssueSizePlan = other.IssueSizePlan;
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.FloatingCouponFlag != false) {
        FloatingCouponFlag = other.FloatingCouponFlag;
      }
      if (other.PerpetualFlag != false) {
        PerpetualFlag = other.PerpetualFlag;
      }
      if (other.AmortizationFlag != false) {
        AmortizationFlag = other.AmortizationFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.SubordinatedFlag != false) {
        SubordinatedFlag = other.SubordinatedFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.RiskLevel != global::Tinkoff.Proto.InvestApi.V1.RiskLevel.Unspecified) {
        RiskLevel = other.RiskLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 136: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 146: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 154: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 162: {
            if (initialNominal_ == null) {
              InitialNominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialNominal);
            break;
          }
          case 170: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 178: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 186: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 194: {
            if (aciValue_ == null) {
              AciValue = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(AciValue);
            break;
          }
          case 202: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 210: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 218: {
            Sector = input.ReadString();
            break;
          }
          case 226: {
            IssueKind = input.ReadString();
            break;
          }
          case 232: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 240: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 248: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 256: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 264: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 272: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 280: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 288: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 296: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 306: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 312: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 322: {
            Uid = input.ReadString();
            break;
          }
          case 328: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 338: {
            PositionUid = input.ReadString();
            break;
          }
          case 408: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 440: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 490: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 498: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 504: {
            RiskLevel = (global::Tinkoff.Proto.InvestApi.V1.RiskLevel) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 136: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 146: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 154: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 162: {
            if (initialNominal_ == null) {
              InitialNominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialNominal);
            break;
          }
          case 170: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 178: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 186: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 194: {
            if (aciValue_ == null) {
              AciValue = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(AciValue);
            break;
          }
          case 202: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 210: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 218: {
            Sector = input.ReadString();
            break;
          }
          case 226: {
            IssueKind = input.ReadString();
            break;
          }
          case 232: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 240: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 248: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 256: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 264: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 272: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 280: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 288: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 296: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 306: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 312: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 322: {
            Uid = input.ReadString();
            break;
          }
          case 328: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 338: {
            PositionUid = input.ReadString();
            break;
          }
          case 408: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 440: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 490: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 498: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 504: {
            RiskLevel = (global::Tinkoff.Proto.InvestApi.V1.RiskLevel) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о валюте.
  /// </summary>
  public sealed partial class Currency : pb::IMessage<Currency>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Currency> _parser = new pb::MessageParser<Currency>(() => new Currency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Currency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency(Currency other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      isoCurrencyName_ = other.isoCurrencyName_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Currency Clone() {
      return new Currency(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int Currency_FieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency_ {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 17;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 18;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 19;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 20;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 21;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 22;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 23;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "iso_currency_name" field.</summary>
    public const int IsoCurrencyNameFieldNumber = 24;
    private string isoCurrencyName_ = "";
    /// <summary>
    ///Строковый ISO-код валюты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IsoCurrencyName {
      get { return isoCurrencyName_; }
      set {
        isoCurrencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 25;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 26;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 27;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 28;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 29;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 41;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 52;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 53;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 54;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Currency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Currency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency_ != other.Currency_) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (IsoCurrencyName != other.IsoCurrencyName) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency_.Length != 0) hash ^= Currency_.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (IsoCurrencyName.Length != 0) hash ^= IsoCurrencyName.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency_.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency_);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (nominal_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (IsoCurrencyName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency_.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency_);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (nominal_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (IsoCurrencyName.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(168, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(176, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency_);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (IsoCurrencyName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IsoCurrencyName);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Currency other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency_.Length != 0) {
        Currency_ = other.Currency_;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.IsoCurrencyName.Length != 0) {
        IsoCurrencyName = other.IsoCurrencyName;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency_ = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 146: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 154: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 160: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 168: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 176: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 184: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 194: {
            IsoCurrencyName = input.ReadString();
            break;
          }
          case 202: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 208: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 218: {
            Uid = input.ReadString();
            break;
          }
          case 224: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 234: {
            PositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency_ = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 146: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 154: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 160: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 168: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 176: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 184: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 194: {
            IsoCurrencyName = input.ReadString();
            break;
          }
          case 202: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 208: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 218: {
            Uid = input.ReadString();
            break;
          }
          case 224: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 234: {
            PositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 416: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 424: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 432: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об инвестиционном фонде.
  /// </summary>
  public sealed partial class Etf : pb::IMessage<Etf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Etf> _parser = new pb::MessageParser<Etf>(() => new Etf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Etf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf(Etf other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      fixedCommission_ = other.fixedCommission_ != null ? other.fixedCommission_.Clone() : null;
      focusType_ = other.focusType_;
      releasedDate_ = other.releasedDate_ != null ? other.releasedDate_.Clone() : null;
      numShares_ = other.numShares_ != null ? other.numShares_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      rebalancingFreq_ = other.rebalancingFreq_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Etf Clone() {
      return new Etf(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fixed_commission" field.</summary>
    public const int FixedCommissionFieldNumber = 17;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation fixedCommission_;
    /// <summary>
    ///Размер фиксированной комиссии фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation FixedCommission {
      get { return fixedCommission_; }
      set {
        fixedCommission_ = value;
      }
    }

    /// <summary>Field number for the "focus_type" field.</summary>
    public const int FocusTypeFieldNumber = 18;
    private string focusType_ = "";
    /// <summary>
    ///Возможные значения: &lt;/br>**equity** — акции;&lt;/br>**fixed_income** — облигации;&lt;/br>**mixed_allocation** — смешанный;&lt;/br>**money_market** — денежный рынок;&lt;/br>**real_estate** — недвижимость;&lt;/br>**commodity** — товары;&lt;/br>**specialty** — специальный;&lt;/br>**private_equity** — private equity;&lt;/br>**alternative_investment** — альтернативные инвестиции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FocusType {
      get { return focusType_; }
      set {
        focusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "released_date" field.</summary>
    public const int ReleasedDateFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp releasedDate_;
    /// <summary>
    ///Дата выпуска в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReleasedDate {
      get { return releasedDate_; }
      set {
        releasedDate_ = value;
      }
    }

    /// <summary>Field number for the "num_shares" field.</summary>
    public const int NumSharesFieldNumber = 20;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation numShares_;
    /// <summary>
    ///Количество акций фонда в обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation NumShares {
      get { return numShares_; }
      set {
        numShares_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 21;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 22;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 23;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rebalancing_freq" field.</summary>
    public const int RebalancingFreqFieldNumber = 24;
    private string rebalancingFreq_ = "";
    /// <summary>
    ///Частота ребалансировки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingFreq {
      get { return rebalancingFreq_; }
      set {
        rebalancingFreq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 29;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 30;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 31;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 32;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 33;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 41;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 42;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 43;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 44;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Etf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Etf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(FixedCommission, other.FixedCommission)) return false;
      if (FocusType != other.FocusType) return false;
      if (!object.Equals(ReleasedDate, other.ReleasedDate)) return false;
      if (!object.Equals(NumShares, other.NumShares)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (RebalancingFreq != other.RebalancingFreq) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (fixedCommission_ != null) hash ^= FixedCommission.GetHashCode();
      if (FocusType.Length != 0) hash ^= FocusType.GetHashCode();
      if (releasedDate_ != null) hash ^= ReleasedDate.GetHashCode();
      if (numShares_ != null) hash ^= NumShares.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (RebalancingFreq.Length != 0) hash ^= RebalancingFreq.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FixedCommission);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FocusType);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (numShares_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(FixedCommission);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FocusType);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (numShares_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (fixedCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FixedCommission);
      }
      if (FocusType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FocusType);
      }
      if (releasedDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleasedDate);
      }
      if (numShares_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NumShares);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (RebalancingFreq.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RebalancingFreq);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Etf other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.fixedCommission_ != null) {
        if (fixedCommission_ == null) {
          FixedCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        FixedCommission.MergeFrom(other.FixedCommission);
      }
      if (other.FocusType.Length != 0) {
        FocusType = other.FocusType;
      }
      if (other.releasedDate_ != null) {
        if (releasedDate_ == null) {
          ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReleasedDate.MergeFrom(other.ReleasedDate);
      }
      if (other.numShares_ != null) {
        if (numShares_ == null) {
          NumShares = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        NumShares.MergeFrom(other.NumShares);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.RebalancingFreq.Length != 0) {
        RebalancingFreq = other.RebalancingFreq;
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 146: {
            FocusType = input.ReadString();
            break;
          }
          case 154: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 162: {
            if (numShares_ == null) {
              NumShares = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShares);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 146: {
            FocusType = input.ReadString();
            break;
          }
          case 154: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 162: {
            if (numShares_ == null) {
              NumShares = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShares);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации о фьючерсе.
  /// </summary>
  public sealed partial class Future : pb::IMessage<Future>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Future> _parser = new pb::MessageParser<Future>(() => new Future());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Future> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future(Future other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      firstTradeDate_ = other.firstTradeDate_ != null ? other.firstTradeDate_.Clone() : null;
      lastTradeDate_ = other.lastTradeDate_ != null ? other.lastTradeDate_.Clone() : null;
      futuresType_ = other.futuresType_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      basicAssetSize_ = other.basicAssetSize_ != null ? other.basicAssetSize_.Clone() : null;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      expirationDate_ = other.expirationDate_ != null ? other.expirationDate_.Clone() : null;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      basicAssetPositionUid_ = other.basicAssetPositionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Future Clone() {
      return new Future(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 4;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 5;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 6;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по клиенту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по клиенту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 12;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 13;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 14;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_trade_date" field.</summary>
    public const int FirstTradeDateFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp firstTradeDate_;
    /// <summary>
    ///Дата начала обращения контракта в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FirstTradeDate {
      get { return firstTradeDate_; }
      set {
        firstTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "last_trade_date" field.</summary>
    public const int LastTradeDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastTradeDate_;
    /// <summary>
    ///Дата в часовом поясе UTC, до которой возможно проведение операций с фьючерсом.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastTradeDate {
      get { return lastTradeDate_; }
      set {
        lastTradeDate_ = value;
      }
    }

    /// <summary>Field number for the "futures_type" field.</summary>
    public const int FuturesTypeFieldNumber = 17;
    private string futuresType_ = "";
    /// <summary>
    ///Тип фьючерса. Возможные значения: &lt;/br>**physical_delivery** — физические поставки; &lt;/br>**cash_settlement** — денежный эквивалент.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FuturesType {
      get { return futuresType_; }
      set {
        futuresType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 18;
    private string assetType_ = "";
    /// <summary>
    ///Тип актива. Возможные значения: &lt;/br>**commodity** — товар; &lt;/br>**currency** — валюта; &lt;/br>**security** — ценная бумага; &lt;/br>**index** — индекс.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AssetType {
      get { return assetType_; }
      set {
        assetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 19;
    private string basicAsset_ = "";
    /// <summary>
    ///Основной актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_size" field.</summary>
    public const int BasicAssetSizeFieldNumber = 20;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation basicAssetSize_;
    /// <summary>
    ///Размер основного актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation BasicAssetSize {
      get { return basicAssetSize_; }
      set {
        basicAssetSize_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 21;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 22;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 23;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_date" field.</summary>
    public const int ExpirationDateFieldNumber = 24;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationDate_;
    /// <summary>
    ///Дата истечения срока в часов поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationDate {
      get { return expirationDate_; }
      set {
        expirationDate_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 29;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 30;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 31;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 32;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 33;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_asset_position_uid" field.</summary>
    public const int BasicAssetPositionUidFieldNumber = 34;
    private string basicAssetPositionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции основного инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAssetPositionUid {
      get { return basicAssetPositionUid_; }
      set {
        basicAssetPositionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 41;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 42;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 43;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 44;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Future);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Future other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(FirstTradeDate, other.FirstTradeDate)) return false;
      if (!object.Equals(LastTradeDate, other.LastTradeDate)) return false;
      if (FuturesType != other.FuturesType) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (!object.Equals(BasicAssetSize, other.BasicAssetSize)) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (!object.Equals(ExpirationDate, other.ExpirationDate)) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (BasicAssetPositionUid != other.BasicAssetPositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (firstTradeDate_ != null) hash ^= FirstTradeDate.GetHashCode();
      if (lastTradeDate_ != null) hash ^= LastTradeDate.GetHashCode();
      if (FuturesType.Length != 0) hash ^= FuturesType.GetHashCode();
      if (AssetType.Length != 0) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (basicAssetSize_ != null) hash ^= BasicAssetSize.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (expirationDate_ != null) hash ^= ExpirationDate.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (BasicAssetPositionUid.Length != 0) hash ^= BasicAssetPositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Lot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Exchange);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FuturesType);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(BasicAssetPositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Lot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Exchange);
      }
      if (firstTradeDate_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FuturesType);
      }
      if (AssetType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Sector);
      }
      if (expirationDate_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(PositionUid);
      }
      if (BasicAssetPositionUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(BasicAssetPositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (firstTradeDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstTradeDate);
      }
      if (lastTradeDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastTradeDate);
      }
      if (FuturesType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FuturesType);
      }
      if (AssetType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (basicAssetSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BasicAssetSize);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (expirationDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpirationDate);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (BasicAssetPositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BasicAssetPositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Future other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.firstTradeDate_ != null) {
        if (firstTradeDate_ == null) {
          FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FirstTradeDate.MergeFrom(other.FirstTradeDate);
      }
      if (other.lastTradeDate_ != null) {
        if (lastTradeDate_ == null) {
          LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastTradeDate.MergeFrom(other.LastTradeDate);
      }
      if (other.FuturesType.Length != 0) {
        FuturesType = other.FuturesType;
      }
      if (other.AssetType.Length != 0) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.basicAssetSize_ != null) {
        if (basicAssetSize_ == null) {
          BasicAssetSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        BasicAssetSize.MergeFrom(other.BasicAssetSize);
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.expirationDate_ != null) {
        if (expirationDate_ == null) {
          ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationDate.MergeFrom(other.ExpirationDate);
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.BasicAssetPositionUid.Length != 0) {
        BasicAssetPositionUid = other.BasicAssetPositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 32: {
            Lot = input.ReadInt32();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 50: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 58: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 66: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 74: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 82: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 90: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 96: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            Exchange = input.ReadString();
            break;
          }
          case 122: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 130: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 138: {
            FuturesType = input.ReadString();
            break;
          }
          case 146: {
            AssetType = input.ReadString();
            break;
          }
          case 154: {
            BasicAsset = input.ReadString();
            break;
          }
          case 162: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 274: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 32: {
            Lot = input.ReadInt32();
            break;
          }
          case 42: {
            Currency = input.ReadString();
            break;
          }
          case 50: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 58: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 66: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 74: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 82: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 90: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 96: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 106: {
            Name = input.ReadString();
            break;
          }
          case 114: {
            Exchange = input.ReadString();
            break;
          }
          case 122: {
            if (firstTradeDate_ == null) {
              FirstTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FirstTradeDate);
            break;
          }
          case 130: {
            if (lastTradeDate_ == null) {
              LastTradeDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTradeDate);
            break;
          }
          case 138: {
            FuturesType = input.ReadString();
            break;
          }
          case 146: {
            AssetType = input.ReadString();
            break;
          }
          case 154: {
            BasicAsset = input.ReadString();
            break;
          }
          case 162: {
            if (basicAssetSize_ == null) {
              BasicAssetSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BasicAssetSize);
            break;
          }
          case 170: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 178: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 186: {
            Sector = input.ReadString();
            break;
          }
          case 194: {
            if (expirationDate_ == null) {
              ExpirationDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationDate);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 234: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 240: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 250: {
            Uid = input.ReadString();
            break;
          }
          case 256: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 266: {
            PositionUid = input.ReadString();
            break;
          }
          case 274: {
            BasicAssetPositionUid = input.ReadString();
            break;
          }
          case 328: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 336: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 344: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 352: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи информации об акции.
  /// </summary>
  public sealed partial class Share : pb::IMessage<Share>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Share> _parser = new pb::MessageParser<Share>(() => new Share());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Share> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share(Share other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      ipoDate_ = other.ipoDate_ != null ? other.ipoDate_.Clone() : null;
      issueSize_ = other.issueSize_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      sector_ = other.sector_;
      issueSizePlan_ = other.issueSizePlan_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      divYieldFlag_ = other.divYieldFlag_;
      shareType_ = other.shareType_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Share Clone() {
      return new Share(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 15;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 16;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipo_date" field.</summary>
    public const int IpoDateFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ipoDate_;
    /// <summary>
    ///Дата IPO акции в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IpoDate {
      get { return ipoDate_; }
      set {
        ipoDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 18;
    private long issueSize_;
    /// <summary>
    ///Размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 19;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 20;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 21;
    private string sector_ = "";
    /// <summary>
    ///Сектор экономики.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 22;
    private long issueSizePlan_;
    /// <summary>
    ///Плановый размер выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 23;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 25;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 26;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 27;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 28;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 29;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "share_type" field.</summary>
    public const int ShareTypeFieldNumber = 30;
    private global::Tinkoff.Proto.InvestApi.V1.ShareType shareType_ = global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified;
    /// <summary>
    ///Тип акции. Возможные значения: [ShareType](https://tinkoff.github.io/investAPI/instruments#sharetype)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.ShareType ShareType {
      get { return shareType_; }
      set {
        shareType_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 31;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 32;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 33;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 34;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 35;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 46;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 47;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 48;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 49;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Share);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Share other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (!object.Equals(IpoDate, other.IpoDate)) return false;
      if (IssueSize != other.IssueSize) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (Sector != other.Sector) return false;
      if (IssueSizePlan != other.IssueSizePlan) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (ShareType != other.ShareType) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (ipoDate_ != null) hash ^= IpoDate.GetHashCode();
      if (IssueSize != 0L) hash ^= IssueSize.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (IssueSizePlan != 0L) hash ^= IssueSizePlan.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (ShareType != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) hash ^= ShareType.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IpoDate);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Sector);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (nominal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Nominal);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (ShareType != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(136, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Exchange);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IpoDate);
      }
      if (IssueSize != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Sector);
      }
      if (IssueSizePlan != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(IssueSizePlan);
      }
      if (nominal_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Nominal);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(200, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (ShareType != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(248, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(128, 3);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(136, 3);
        output.WriteBool(BlockedTcaFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (ipoDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IpoDate);
      }
      if (IssueSize != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSize);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (Sector.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (IssueSizePlan != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(IssueSizePlan);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (DivYieldFlag != false) {
        size += 2 + 1;
      }
      if (ShareType != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShareType);
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Share other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.ipoDate_ != null) {
        if (ipoDate_ == null) {
          IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IpoDate.MergeFrom(other.IpoDate);
      }
      if (other.IssueSize != 0L) {
        IssueSize = other.IssueSize;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.IssueSizePlan != 0L) {
        IssueSizePlan = other.IssueSizePlan;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.ShareType != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        ShareType = other.ShareType;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 144: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 154: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 162: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 170: {
            Sector = input.ReadString();
            break;
          }
          case 176: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 186: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 232: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 240: {
            ShareType = (global::Tinkoff.Proto.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 250: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 256: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 266: {
            Uid = input.ReadString();
            break;
          }
          case 272: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 282: {
            PositionUid = input.ReadString();
            break;
          }
          case 368: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 376: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 384: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 392: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 122: {
            Name = input.ReadString();
            break;
          }
          case 130: {
            Exchange = input.ReadString();
            break;
          }
          case 138: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 144: {
            IssueSize = input.ReadInt64();
            break;
          }
          case 154: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 162: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 170: {
            Sector = input.ReadString();
            break;
          }
          case 176: {
            IssueSizePlan = input.ReadInt64();
            break;
          }
          case 186: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 200: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 208: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 216: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 224: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 232: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 240: {
            ShareType = (global::Tinkoff.Proto.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 250: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 256: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 266: {
            Uid = input.ReadString();
            break;
          }
          case 272: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 282: {
            PositionUid = input.ReadString();
            break;
          }
          case 368: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 376: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 384: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 392: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос НКД по облигации
  /// </summary>
  public sealed partial class GetAccruedInterestsRequest : pb::IMessage<GetAccruedInterestsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccruedInterestsRequest> _parser = new pb::MessageParser<GetAccruedInterestsRequest>(() => new GetAccruedInterestsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAccruedInterestsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest(GetAccruedInterestsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsRequest Clone() {
      return new GetAccruedInterestsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAccruedInterestsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAccruedInterestsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAccruedInterestsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///НКД облигации
  /// </summary>
  public sealed partial class GetAccruedInterestsResponse : pb::IMessage<GetAccruedInterestsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAccruedInterestsResponse> _parser = new pb::MessageParser<GetAccruedInterestsResponse>(() => new GetAccruedInterestsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetAccruedInterestsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse(GetAccruedInterestsResponse other) : this() {
      accruedInterests_ = other.accruedInterests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetAccruedInterestsResponse Clone() {
      return new GetAccruedInterestsResponse(this);
    }

    /// <summary>Field number for the "accrued_interests" field.</summary>
    public const int AccruedInterestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.AccruedInterest> _repeated_accruedInterests_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.AccruedInterest.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AccruedInterest> accruedInterests_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AccruedInterest>();
    /// <summary>
    ///Массив операций начисления купонов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AccruedInterest> AccruedInterests {
      get { return accruedInterests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetAccruedInterestsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetAccruedInterestsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!accruedInterests_.Equals(other.accruedInterests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= accruedInterests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      accruedInterests_.WriteTo(output, _repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      accruedInterests_.WriteTo(ref output, _repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += accruedInterests_.CalculateSize(_repeated_accruedInterests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetAccruedInterestsResponse other) {
      if (other == null) {
        return;
      }
      accruedInterests_.Add(other.accruedInterests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            accruedInterests_.AddEntriesFrom(input, _repeated_accruedInterests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            accruedInterests_.AddEntriesFrom(ref input, _repeated_accruedInterests_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Операция начисления купонов.
  /// </summary>
  public sealed partial class AccruedInterest : pb::IMessage<AccruedInterest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccruedInterest> _parser = new pb::MessageParser<AccruedInterest>(() => new AccruedInterest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccruedInterest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest(AccruedInterest other) : this() {
      date_ = other.date_ != null ? other.date_.Clone() : null;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      valuePercent_ = other.valuePercent_ != null ? other.valuePercent_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccruedInterest Clone() {
      return new AccruedInterest(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
    /// <summary>
    ///Дата и время выплаты в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation value_;
    /// <summary>
    ///Величина выплаты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_percent" field.</summary>
    public const int ValuePercentFieldNumber = 3;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation valuePercent_;
    /// <summary>
    ///Величина выплаты в процентах от номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation ValuePercent {
      get { return valuePercent_; }
      set {
        valuePercent_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 4;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccruedInterest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccruedInterest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Date, other.Date)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (!object.Equals(ValuePercent, other.ValuePercent)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (date_ != null) hash ^= Date.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (valuePercent_ != null) hash ^= ValuePercent.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (valuePercent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValuePercent);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (date_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Date);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (valuePercent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ValuePercent);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (date_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (valuePercent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValuePercent);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccruedInterest other) {
      if (other == null) {
        return;
      }
      if (other.date_ != null) {
        if (date_ == null) {
          Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Date.MergeFrom(other.Date);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.valuePercent_ != null) {
        if (valuePercent_ == null) {
          ValuePercent = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        ValuePercent.MergeFrom(other.ValuePercent);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (valuePercent_ == null) {
              ValuePercent = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ValuePercent);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (date_ == null) {
              Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Date);
            break;
          }
          case 18: {
            if (value_ == null) {
              Value = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Value);
            break;
          }
          case 26: {
            if (valuePercent_ == null) {
              ValuePercent = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ValuePercent);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос информации о фьючерсе
  /// </summary>
  public sealed partial class GetFuturesMarginRequest : pb::IMessage<GetFuturesMarginRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFuturesMarginRequest> _parser = new pb::MessageParser<GetFuturesMarginRequest>(() => new GetFuturesMarginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFuturesMarginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest(GetFuturesMarginRequest other) : this() {
      figi_ = other.figi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginRequest Clone() {
      return new GetFuturesMarginRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    /// Идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFuturesMarginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFuturesMarginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFuturesMarginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по фьючерсу
  /// </summary>
  public sealed partial class GetFuturesMarginResponse : pb::IMessage<GetFuturesMarginResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFuturesMarginResponse> _parser = new pb::MessageParser<GetFuturesMarginResponse>(() => new GetFuturesMarginResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFuturesMarginResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse(GetFuturesMarginResponse other) : this() {
      initialMarginOnBuy_ = other.initialMarginOnBuy_ != null ? other.initialMarginOnBuy_.Clone() : null;
      initialMarginOnSell_ = other.initialMarginOnSell_ != null ? other.initialMarginOnSell_.Clone() : null;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      minPriceIncrementAmount_ = other.minPriceIncrementAmount_ != null ? other.minPriceIncrementAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFuturesMarginResponse Clone() {
      return new GetFuturesMarginResponse(this);
    }

    /// <summary>Field number for the "initial_margin_on_buy" field.</summary>
    public const int InitialMarginOnBuyFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue initialMarginOnBuy_;
    /// <summary>
    ///Гарантийное обеспечение при покупке.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue InitialMarginOnBuy {
      get { return initialMarginOnBuy_; }
      set {
        initialMarginOnBuy_ = value;
      }
    }

    /// <summary>Field number for the "initial_margin_on_sell" field.</summary>
    public const int InitialMarginOnSellFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue initialMarginOnSell_;
    /// <summary>
    ///Гарантийное обеспечение при продаже.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue InitialMarginOnSell {
      get { return initialMarginOnSell_; }
      set {
        initialMarginOnSell_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 3;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment_amount" field.</summary>
    public const int MinPriceIncrementAmountFieldNumber = 4;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrementAmount_;
    /// <summary>
    ///Стоимость шага цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrementAmount {
      get { return minPriceIncrementAmount_; }
      set {
        minPriceIncrementAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFuturesMarginResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFuturesMarginResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InitialMarginOnBuy, other.InitialMarginOnBuy)) return false;
      if (!object.Equals(InitialMarginOnSell, other.InitialMarginOnSell)) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (!object.Equals(MinPriceIncrementAmount, other.MinPriceIncrementAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (initialMarginOnBuy_ != null) hash ^= InitialMarginOnBuy.GetHashCode();
      if (initialMarginOnSell_ != null) hash ^= InitialMarginOnSell.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (minPriceIncrementAmount_ != null) hash ^= MinPriceIncrementAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (initialMarginOnBuy_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (initialMarginOnBuy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnBuy);
      }
      if (initialMarginOnSell_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialMarginOnSell);
      }
      if (minPriceIncrement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (minPriceIncrementAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrementAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFuturesMarginResponse other) {
      if (other == null) {
        return;
      }
      if (other.initialMarginOnBuy_ != null) {
        if (initialMarginOnBuy_ == null) {
          InitialMarginOnBuy = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnBuy.MergeFrom(other.InitialMarginOnBuy);
      }
      if (other.initialMarginOnSell_ != null) {
        if (initialMarginOnSell_ == null) {
          InitialMarginOnSell = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        InitialMarginOnSell.MergeFrom(other.InitialMarginOnSell);
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.minPriceIncrementAmount_ != null) {
        if (minPriceIncrementAmount_ == null) {
          MinPriceIncrementAmount = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrementAmount.MergeFrom(other.MinPriceIncrementAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 18: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 26: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 34: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (initialMarginOnBuy_ == null) {
              InitialMarginOnBuy = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnBuy);
            break;
          }
          case 18: {
            if (initialMarginOnSell_ == null) {
              InitialMarginOnSell = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(InitialMarginOnSell);
            break;
          }
          case 26: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 34: {
            if (minPriceIncrementAmount_ == null) {
              MinPriceIncrementAmount = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrementAmount);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по инструменту.
  /// </summary>
  public sealed partial class InstrumentResponse : pb::IMessage<InstrumentResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentResponse> _parser = new pb::MessageParser<InstrumentResponse>(() => new InstrumentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse(InstrumentResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentResponse Clone() {
      return new InstrumentResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Instrument instrument_;
    /// <summary>
    /// Основная информация об инструменте.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Instrument Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::Tinkoff.Proto.InvestApi.V1.Instrument();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Instrument();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::Tinkoff.Proto.InvestApi.V1.Instrument();
            }
            input.ReadMessage(Instrument);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Объект передачи основной информации об инструменте.
  /// </summary>
  public sealed partial class Instrument : pb::IMessage<Instrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Instrument> _parser = new pb::MessageParser<Instrument>(() => new Instrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Instrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument(Instrument other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      lot_ = other.lot_;
      currency_ = other.currency_;
      klong_ = other.klong_ != null ? other.klong_.Clone() : null;
      kshort_ = other.kshort_ != null ? other.kshort_.Clone() : null;
      dlong_ = other.dlong_ != null ? other.dlong_.Clone() : null;
      dshort_ = other.dshort_ != null ? other.dshort_.Clone() : null;
      dlongMin_ = other.dlongMin_ != null ? other.dlongMin_.Clone() : null;
      dshortMin_ = other.dshortMin_ != null ? other.dshortMin_.Clone() : null;
      shortEnabledFlag_ = other.shortEnabledFlag_;
      name_ = other.name_;
      exchange_ = other.exchange_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      instrumentType_ = other.instrumentType_;
      tradingStatus_ = other.tradingStatus_;
      otcFlag_ = other.otcFlag_;
      buyAvailableFlag_ = other.buyAvailableFlag_;
      sellAvailableFlag_ = other.sellAvailableFlag_;
      minPriceIncrement_ = other.minPriceIncrement_ != null ? other.minPriceIncrement_.Clone() : null;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      uid_ = other.uid_;
      realExchange_ = other.realExchange_;
      positionUid_ = other.positionUid_;
      forIisFlag_ = other.forIisFlag_;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      instrumentKind_ = other.instrumentKind_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Instrument Clone() {
      return new Instrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot" field.</summary>
    public const int LotFieldNumber = 5;
    private int lot_;
    /// <summary>
    ///Лотность инструмента. Возможно совершение операций только на количества ценной бумаги, кратные параметру *lot*. Подробнее: [лот](https://tinkoff.github.io/investAPI/glossary#lot)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lot {
      get { return lot_; }
      set {
        lot_ = value;
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 6;
    private string currency_ = "";
    /// <summary>
    ///Валюта расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "klong" field.</summary>
    public const int KlongFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation klong_;
    /// <summary>
    ///Коэффициент ставки риска длинной позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Klong {
      get { return klong_; }
      set {
        klong_ = value;
      }
    }

    /// <summary>Field number for the "kshort" field.</summary>
    public const int KshortFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation kshort_;
    /// <summary>
    ///Коэффициент ставки риска короткой позиции по инструменту.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Kshort {
      get { return kshort_; }
      set {
        kshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong" field.</summary>
    public const int DlongFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlong_;
    /// <summary>
    ///Ставка риска минимальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dlong {
      get { return dlong_; }
      set {
        dlong_ = value;
      }
    }

    /// <summary>Field number for the "dshort" field.</summary>
    public const int DshortFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshort_;
    /// <summary>
    ///Ставка риска минимальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Dshort {
      get { return dshort_; }
      set {
        dshort_ = value;
      }
    }

    /// <summary>Field number for the "dlong_min" field.</summary>
    public const int DlongMinFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dlongMin_;
    /// <summary>
    ///Ставка риска начальной маржи в лонг. Подробнее: [ставка риска в лонг](https://help.tinkoff.ru/margin-trade/long/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DlongMin {
      get { return dlongMin_; }
      set {
        dlongMin_ = value;
      }
    }

    /// <summary>Field number for the "dshort_min" field.</summary>
    public const int DshortMinFieldNumber = 12;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dshortMin_;
    /// <summary>
    ///Ставка риска начальной маржи в шорт. Подробнее: [ставка риска в шорт](https://help.tinkoff.ru/margin-trade/short/risk-rate/)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DshortMin {
      get { return dshortMin_; }
      set {
        dshortMin_ = value;
      }
    }

    /// <summary>Field number for the "short_enabled_flag" field.</summary>
    public const int ShortEnabledFlagFieldNumber = 13;
    private bool shortEnabledFlag_;
    /// <summary>
    ///Признак доступности для операций в шорт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShortEnabledFlag {
      get { return shortEnabledFlag_; }
      set {
        shortEnabledFlag_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 15;
    private string exchange_ = "";
    /// <summary>
    ///Торговая площадка.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 16;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 17;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска, т.е. страны, в которой компания ведёт основной бизнес.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 18;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trading_status" field.</summary>
    public const int TradingStatusFieldNumber = 19;
    private global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus tradingStatus_ = global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified;
    /// <summary>
    ///Текущий режим торгов инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus TradingStatus {
      get { return tradingStatus_; }
      set {
        tradingStatus_ = value;
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 20;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_available_flag" field.</summary>
    public const int BuyAvailableFlagFieldNumber = 21;
    private bool buyAvailableFlag_;
    /// <summary>
    ///Признак доступности для покупки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BuyAvailableFlag {
      get { return buyAvailableFlag_; }
      set {
        buyAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "sell_available_flag" field.</summary>
    public const int SellAvailableFlagFieldNumber = 22;
    private bool sellAvailableFlag_;
    /// <summary>
    ///Признак доступности для продажи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SellAvailableFlag {
      get { return sellAvailableFlag_; }
      set {
        sellAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "min_price_increment" field.</summary>
    public const int MinPriceIncrementFieldNumber = 23;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation minPriceIncrement_;
    /// <summary>
    ///Шаг цены.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation MinPriceIncrement {
      get { return minPriceIncrement_; }
      set {
        minPriceIncrement_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 24;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 25;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_exchange" field.</summary>
    public const int RealExchangeFieldNumber = 26;
    private global::Tinkoff.Proto.InvestApi.V1.RealExchange realExchange_ = global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified;
    /// <summary>
    ///Реальная площадка исполнения расчётов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.RealExchange RealExchange {
      get { return realExchange_; }
      set {
        realExchange_ = value;
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 27;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 36;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 37;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 38;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 39;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 40;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 56;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 57;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Instrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Instrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (Lot != other.Lot) return false;
      if (Currency != other.Currency) return false;
      if (!object.Equals(Klong, other.Klong)) return false;
      if (!object.Equals(Kshort, other.Kshort)) return false;
      if (!object.Equals(Dlong, other.Dlong)) return false;
      if (!object.Equals(Dshort, other.Dshort)) return false;
      if (!object.Equals(DlongMin, other.DlongMin)) return false;
      if (!object.Equals(DshortMin, other.DshortMin)) return false;
      if (ShortEnabledFlag != other.ShortEnabledFlag) return false;
      if (Name != other.Name) return false;
      if (Exchange != other.Exchange) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (TradingStatus != other.TradingStatus) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (BuyAvailableFlag != other.BuyAvailableFlag) return false;
      if (SellAvailableFlag != other.SellAvailableFlag) return false;
      if (!object.Equals(MinPriceIncrement, other.MinPriceIncrement)) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (Uid != other.Uid) return false;
      if (RealExchange != other.RealExchange) return false;
      if (PositionUid != other.PositionUid) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Lot != 0) hash ^= Lot.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (klong_ != null) hash ^= Klong.GetHashCode();
      if (kshort_ != null) hash ^= Kshort.GetHashCode();
      if (dlong_ != null) hash ^= Dlong.GetHashCode();
      if (dshort_ != null) hash ^= Dshort.GetHashCode();
      if (dlongMin_ != null) hash ^= DlongMin.GetHashCode();
      if (dshortMin_ != null) hash ^= DshortMin.GetHashCode();
      if (ShortEnabledFlag != false) hash ^= ShortEnabledFlag.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) hash ^= TradingStatus.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (BuyAvailableFlag != false) hash ^= BuyAvailableFlag.GetHashCode();
      if (SellAvailableFlag != false) hash ^= SellAvailableFlag.GetHashCode();
      if (minPriceIncrement_ != null) hash ^= MinPriceIncrement.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) hash ^= RealExchange.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) InstrumentKind);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (Lot != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lot);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currency);
      }
      if (klong_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Klong);
      }
      if (kshort_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Kshort);
      }
      if (dlong_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Dlong);
      }
      if (dshort_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Dshort);
      }
      if (dlongMin_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DlongMin);
      }
      if (dshortMin_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(ShortEnabledFlag);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TradingStatus);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(OtcFlag);
      }
      if (BuyAvailableFlag != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(BuyAvailableFlag);
      }
      if (SellAvailableFlag != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(SellAvailableFlag);
      }
      if (minPriceIncrement_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(PositionUid);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(ForIisFlag);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(BlockedTcaFlag);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) InstrumentKind);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(194, 3);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(202, 3);
        output.WriteMessage(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Lot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lot);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (klong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Klong);
      }
      if (kshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kshort);
      }
      if (dlong_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dlong);
      }
      if (dshort_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dshort);
      }
      if (dlongMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DlongMin);
      }
      if (dshortMin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DshortMin);
      }
      if (ShortEnabledFlag != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (CountryOfRisk.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (InstrumentType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingStatus);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (BuyAvailableFlag != false) {
        size += 2 + 1;
      }
      if (SellAvailableFlag != false) {
        size += 2 + 1;
      }
      if (minPriceIncrement_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MinPriceIncrement);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RealExchange);
      }
      if (PositionUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (ForIisFlag != false) {
        size += 2 + 1;
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Instrument other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Lot != 0) {
        Lot = other.Lot;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.klong_ != null) {
        if (klong_ == null) {
          Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Klong.MergeFrom(other.Klong);
      }
      if (other.kshort_ != null) {
        if (kshort_ == null) {
          Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Kshort.MergeFrom(other.Kshort);
      }
      if (other.dlong_ != null) {
        if (dlong_ == null) {
          Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dlong.MergeFrom(other.Dlong);
      }
      if (other.dshort_ != null) {
        if (dshort_ == null) {
          Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Dshort.MergeFrom(other.Dshort);
      }
      if (other.dlongMin_ != null) {
        if (dlongMin_ == null) {
          DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DlongMin.MergeFrom(other.DlongMin);
      }
      if (other.dshortMin_ != null) {
        if (dshortMin_ == null) {
          DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DshortMin.MergeFrom(other.DshortMin);
      }
      if (other.ShortEnabledFlag != false) {
        ShortEnabledFlag = other.ShortEnabledFlag;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.TradingStatus != global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus.Unspecified) {
        TradingStatus = other.TradingStatus;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.BuyAvailableFlag != false) {
        BuyAvailableFlag = other.BuyAvailableFlag;
      }
      if (other.SellAvailableFlag != false) {
        SellAvailableFlag = other.SellAvailableFlag;
      }
      if (other.minPriceIncrement_ != null) {
        if (minPriceIncrement_ == null) {
          MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        MinPriceIncrement.MergeFrom(other.MinPriceIncrement);
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.RealExchange != global::Tinkoff.Proto.InvestApi.V1.RealExchange.Unspecified) {
        RealExchange = other.RealExchange;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      if (other.InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Exchange = input.ReadString();
            break;
          }
          case 130: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 138: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentType = input.ReadString();
            break;
          }
          case 152: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 160: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 168: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 176: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 186: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 192: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 202: {
            Uid = input.ReadString();
            break;
          }
          case 208: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 218: {
            PositionUid = input.ReadString();
            break;
          }
          case 288: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 296: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 304: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 312: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 320: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 40: {
            Lot = input.ReadInt32();
            break;
          }
          case 50: {
            Currency = input.ReadString();
            break;
          }
          case 58: {
            if (klong_ == null) {
              Klong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Klong);
            break;
          }
          case 66: {
            if (kshort_ == null) {
              Kshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Kshort);
            break;
          }
          case 74: {
            if (dlong_ == null) {
              Dlong = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dlong);
            break;
          }
          case 82: {
            if (dshort_ == null) {
              Dshort = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Dshort);
            break;
          }
          case 90: {
            if (dlongMin_ == null) {
              DlongMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DlongMin);
            break;
          }
          case 98: {
            if (dshortMin_ == null) {
              DshortMin = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DshortMin);
            break;
          }
          case 104: {
            ShortEnabledFlag = input.ReadBool();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 122: {
            Exchange = input.ReadString();
            break;
          }
          case 130: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 138: {
            CountryOfRiskName = input.ReadString();
            break;
          }
          case 146: {
            InstrumentType = input.ReadString();
            break;
          }
          case 152: {
            TradingStatus = (global::Tinkoff.Proto.InvestApi.V1.SecurityTradingStatus) input.ReadEnum();
            break;
          }
          case 160: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 168: {
            BuyAvailableFlag = input.ReadBool();
            break;
          }
          case 176: {
            SellAvailableFlag = input.ReadBool();
            break;
          }
          case 186: {
            if (minPriceIncrement_ == null) {
              MinPriceIncrement = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(MinPriceIncrement);
            break;
          }
          case 192: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 202: {
            Uid = input.ReadString();
            break;
          }
          case 208: {
            RealExchange = (global::Tinkoff.Proto.InvestApi.V1.RealExchange) input.ReadEnum();
            break;
          }
          case 218: {
            PositionUid = input.ReadString();
            break;
          }
          case 288: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 296: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 304: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 312: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
          case 320: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 450: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 458: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос дивидендов.
  /// </summary>
  public sealed partial class GetDividendsRequest : pb::IMessage<GetDividendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDividendsRequest> _parser = new pb::MessageParser<GetDividendsRequest>(() => new GetDividendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDividendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest(GetDividendsRequest other) : this() {
      figi_ = other.figi_;
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsRequest Clone() {
      return new GetDividendsRequest(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp from_;
    /// <summary>
    ///Начало запрашиваемого периода в часовом поясе UTC. Фильтрация происходит по параметру *record_date* (дата фиксации реестра).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp to_;
    /// <summary>
    ///Окончание запрашиваемого периода в часовом поясе UTC. Фильтрация происходит по параметру *record_date* (дата фиксации реестра).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDividendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDividendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDividendsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            if (from_ == null) {
              From = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(From);
            break;
          }
          case 26: {
            if (to_ == null) {
              To = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Дивиденды.
  /// </summary>
  public sealed partial class GetDividendsResponse : pb::IMessage<GetDividendsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDividendsResponse> _parser = new pb::MessageParser<GetDividendsResponse>(() => new GetDividendsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDividendsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse(GetDividendsResponse other) : this() {
      dividends_ = other.dividends_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDividendsResponse Clone() {
      return new GetDividendsResponse(this);
    }

    /// <summary>Field number for the "dividends" field.</summary>
    public const int DividendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Dividend> _repeated_dividends_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Dividend.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Dividend> dividends_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Dividend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Dividend> Dividends {
      get { return dividends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDividendsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDividendsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dividends_.Equals(other.dividends_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dividends_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dividends_.WriteTo(output, _repeated_dividends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dividends_.WriteTo(ref output, _repeated_dividends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dividends_.CalculateSize(_repeated_dividends_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDividendsResponse other) {
      if (other == null) {
        return;
      }
      dividends_.Add(other.dividends_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dividends_.AddEntriesFrom(input, _repeated_dividends_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            dividends_.AddEntriesFrom(ref input, _repeated_dividends_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация о выплате.
  /// </summary>
  public sealed partial class Dividend : pb::IMessage<Dividend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Dividend> _parser = new pb::MessageParser<Dividend>(() => new Dividend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Dividend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend(Dividend other) : this() {
      dividendNet_ = other.dividendNet_ != null ? other.dividendNet_.Clone() : null;
      paymentDate_ = other.paymentDate_ != null ? other.paymentDate_.Clone() : null;
      declaredDate_ = other.declaredDate_ != null ? other.declaredDate_.Clone() : null;
      lastBuyDate_ = other.lastBuyDate_ != null ? other.lastBuyDate_.Clone() : null;
      dividendType_ = other.dividendType_;
      recordDate_ = other.recordDate_ != null ? other.recordDate_.Clone() : null;
      regularity_ = other.regularity_;
      closePrice_ = other.closePrice_ != null ? other.closePrice_.Clone() : null;
      yieldValue_ = other.yieldValue_ != null ? other.yieldValue_.Clone() : null;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Dividend Clone() {
      return new Dividend(this);
    }

    /// <summary>Field number for the "dividend_net" field.</summary>
    public const int DividendNetFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue dividendNet_;
    /// <summary>
    ///Величина дивиденда на 1 ценную бумагу (включая валюту).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue DividendNet {
      get { return dividendNet_; }
      set {
        dividendNet_ = value;
      }
    }

    /// <summary>Field number for the "payment_date" field.</summary>
    public const int PaymentDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp paymentDate_;
    /// <summary>
    ///Дата фактических выплат в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PaymentDate {
      get { return paymentDate_; }
      set {
        paymentDate_ = value;
      }
    }

    /// <summary>Field number for the "declared_date" field.</summary>
    public const int DeclaredDateFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp declaredDate_;
    /// <summary>
    ///Дата объявления дивидендов в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeclaredDate {
      get { return declaredDate_; }
      set {
        declaredDate_ = value;
      }
    }

    /// <summary>Field number for the "last_buy_date" field.</summary>
    public const int LastBuyDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastBuyDate_;
    /// <summary>
    ///Последний день (включительно) покупки для получения выплаты в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastBuyDate {
      get { return lastBuyDate_; }
      set {
        lastBuyDate_ = value;
      }
    }

    /// <summary>Field number for the "dividend_type" field.</summary>
    public const int DividendTypeFieldNumber = 5;
    private string dividendType_ = "";
    /// <summary>
    ///Тип выплаты. Возможные значения: Regular Cash – регулярные выплаты, Cancelled – выплата отменена, Daily Accrual – ежедневное начисление, Return of Capital – возврат капитала, прочие типы выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DividendType {
      get { return dividendType_; }
      set {
        dividendType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record_date" field.</summary>
    public const int RecordDateFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp recordDate_;
    /// <summary>
    ///Дата фиксации реестра в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RecordDate {
      get { return recordDate_; }
      set {
        recordDate_ = value;
      }
    }

    /// <summary>Field number for the "regularity" field.</summary>
    public const int RegularityFieldNumber = 7;
    private string regularity_ = "";
    /// <summary>
    ///Регулярность выплаты. Возможные значения: Annual – ежегодная, Semi-Anl – каждые полгода, прочие типы выплат.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Regularity {
      get { return regularity_; }
      set {
        regularity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close_price" field.</summary>
    public const int ClosePriceFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.MoneyValue closePrice_;
    /// <summary>
    ///Цена закрытия инструмента на момент ex_dividend_date.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.MoneyValue ClosePrice {
      get { return closePrice_; }
      set {
        closePrice_ = value;
      }
    }

    /// <summary>Field number for the "yield_value" field.</summary>
    public const int YieldValueFieldNumber = 9;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation yieldValue_;
    /// <summary>
    ///Величина доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation YieldValue {
      get { return yieldValue_; }
      set {
        yieldValue_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    ///Дата и время создания записи в часовом поясе UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Dividend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Dividend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DividendNet, other.DividendNet)) return false;
      if (!object.Equals(PaymentDate, other.PaymentDate)) return false;
      if (!object.Equals(DeclaredDate, other.DeclaredDate)) return false;
      if (!object.Equals(LastBuyDate, other.LastBuyDate)) return false;
      if (DividendType != other.DividendType) return false;
      if (!object.Equals(RecordDate, other.RecordDate)) return false;
      if (Regularity != other.Regularity) return false;
      if (!object.Equals(ClosePrice, other.ClosePrice)) return false;
      if (!object.Equals(YieldValue, other.YieldValue)) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dividendNet_ != null) hash ^= DividendNet.GetHashCode();
      if (paymentDate_ != null) hash ^= PaymentDate.GetHashCode();
      if (declaredDate_ != null) hash ^= DeclaredDate.GetHashCode();
      if (lastBuyDate_ != null) hash ^= LastBuyDate.GetHashCode();
      if (DividendType.Length != 0) hash ^= DividendType.GetHashCode();
      if (recordDate_ != null) hash ^= RecordDate.GetHashCode();
      if (Regularity.Length != 0) hash ^= Regularity.GetHashCode();
      if (closePrice_ != null) hash ^= ClosePrice.GetHashCode();
      if (yieldValue_ != null) hash ^= YieldValue.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dividendNet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DividendNet);
      }
      if (paymentDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentDate);
      }
      if (declaredDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DividendType);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordDate);
      }
      if (Regularity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Regularity);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosePrice);
      }
      if (yieldValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YieldValue);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dividendNet_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DividendNet);
      }
      if (paymentDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentDate);
      }
      if (declaredDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DividendType);
      }
      if (recordDate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RecordDate);
      }
      if (Regularity.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Regularity);
      }
      if (closePrice_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ClosePrice);
      }
      if (yieldValue_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YieldValue);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CreatedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dividendNet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DividendNet);
      }
      if (paymentDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentDate);
      }
      if (declaredDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeclaredDate);
      }
      if (lastBuyDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastBuyDate);
      }
      if (DividendType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DividendType);
      }
      if (recordDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordDate);
      }
      if (Regularity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regularity);
      }
      if (closePrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosePrice);
      }
      if (yieldValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YieldValue);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Dividend other) {
      if (other == null) {
        return;
      }
      if (other.dividendNet_ != null) {
        if (dividendNet_ == null) {
          DividendNet = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        DividendNet.MergeFrom(other.DividendNet);
      }
      if (other.paymentDate_ != null) {
        if (paymentDate_ == null) {
          PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PaymentDate.MergeFrom(other.PaymentDate);
      }
      if (other.declaredDate_ != null) {
        if (declaredDate_ == null) {
          DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeclaredDate.MergeFrom(other.DeclaredDate);
      }
      if (other.lastBuyDate_ != null) {
        if (lastBuyDate_ == null) {
          LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastBuyDate.MergeFrom(other.LastBuyDate);
      }
      if (other.DividendType.Length != 0) {
        DividendType = other.DividendType;
      }
      if (other.recordDate_ != null) {
        if (recordDate_ == null) {
          RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RecordDate.MergeFrom(other.RecordDate);
      }
      if (other.Regularity.Length != 0) {
        Regularity = other.Regularity;
      }
      if (other.closePrice_ != null) {
        if (closePrice_ == null) {
          ClosePrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
        }
        ClosePrice.MergeFrom(other.ClosePrice);
      }
      if (other.yieldValue_ != null) {
        if (yieldValue_ == null) {
          YieldValue = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        YieldValue.MergeFrom(other.YieldValue);
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dividendNet_ == null) {
              DividendNet = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(DividendNet);
            break;
          }
          case 18: {
            if (paymentDate_ == null) {
              PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PaymentDate);
            break;
          }
          case 26: {
            if (declaredDate_ == null) {
              DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclaredDate);
            break;
          }
          case 34: {
            if (lastBuyDate_ == null) {
              LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastBuyDate);
            break;
          }
          case 42: {
            DividendType = input.ReadString();
            break;
          }
          case 50: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 58: {
            Regularity = input.ReadString();
            break;
          }
          case 66: {
            if (closePrice_ == null) {
              ClosePrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 74: {
            if (yieldValue_ == null) {
              YieldValue = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(YieldValue);
            break;
          }
          case 82: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (dividendNet_ == null) {
              DividendNet = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(DividendNet);
            break;
          }
          case 18: {
            if (paymentDate_ == null) {
              PaymentDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PaymentDate);
            break;
          }
          case 26: {
            if (declaredDate_ == null) {
              DeclaredDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeclaredDate);
            break;
          }
          case 34: {
            if (lastBuyDate_ == null) {
              LastBuyDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastBuyDate);
            break;
          }
          case 42: {
            DividendType = input.ReadString();
            break;
          }
          case 50: {
            if (recordDate_ == null) {
              RecordDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RecordDate);
            break;
          }
          case 58: {
            Regularity = input.ReadString();
            break;
          }
          case 66: {
            if (closePrice_ == null) {
              ClosePrice = new global::Tinkoff.Proto.InvestApi.V1.MoneyValue();
            }
            input.ReadMessage(ClosePrice);
            break;
          }
          case 74: {
            if (yieldValue_ == null) {
              YieldValue = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(YieldValue);
            break;
          }
          case 82: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос актива по идентификатору.
  /// </summary>
  public sealed partial class AssetRequest : pb::IMessage<AssetRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetRequest> _parser = new pb::MessageParser<AssetRequest>(() => new AssetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetRequest(AssetRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetRequest Clone() {
      return new AssetRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///uid-идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные по активу.
  /// </summary>
  public sealed partial class AssetResponse : pb::IMessage<AssetResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetResponse> _parser = new pb::MessageParser<AssetResponse>(() => new AssetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetResponse(AssetResponse other) : this() {
      asset_ = other.asset_ != null ? other.asset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetResponse Clone() {
      return new AssetResponse(this);
    }

    /// <summary>Field number for the "asset" field.</summary>
    public const int AssetFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.AssetFull asset_;
    /// <summary>
    ///Актив.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetFull Asset {
      get { return asset_; }
      set {
        asset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Asset, other.Asset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (asset_ != null) hash ^= Asset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (asset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Asset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (asset_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Asset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (asset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Asset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetResponse other) {
      if (other == null) {
        return;
      }
      if (other.asset_ != null) {
        if (asset_ == null) {
          Asset = new global::Tinkoff.Proto.InvestApi.V1.AssetFull();
        }
        Asset.MergeFrom(other.Asset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (asset_ == null) {
              Asset = new global::Tinkoff.Proto.InvestApi.V1.AssetFull();
            }
            input.ReadMessage(Asset);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (asset_ == null) {
              Asset = new global::Tinkoff.Proto.InvestApi.V1.AssetFull();
            }
            input.ReadMessage(Asset);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос списка активов.
  /// </summary>
  public sealed partial class AssetsRequest : pb::IMessage<AssetsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetsRequest> _parser = new pb::MessageParser<AssetsRequest>(() => new AssetsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsRequest(AssetsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsRequest Clone() {
      return new AssetsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список активов.
  /// </summary>
  public sealed partial class AssetsResponse : pb::IMessage<AssetsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetsResponse> _parser = new pb::MessageParser<AssetsResponse>(() => new AssetsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsResponse(AssetsResponse other) : this() {
      assets_ = other.assets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetsResponse Clone() {
      return new AssetsResponse(this);
    }

    /// <summary>Field number for the "assets" field.</summary>
    public const int AssetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Asset> _repeated_assets_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Asset.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Asset> assets_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Asset>();
    /// <summary>
    ///Активы.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Asset> Assets {
      get { return assets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!assets_.Equals(other.assets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= assets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      assets_.WriteTo(output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      assets_.WriteTo(ref output, _repeated_assets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += assets_.CalculateSize(_repeated_assets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetsResponse other) {
      if (other == null) {
        return;
      }
      assets_.Add(other.assets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            assets_.AddEntriesFrom(input, _repeated_assets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            assets_.AddEntriesFrom(ref input, _repeated_assets_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AssetFull : pb::IMessage<AssetFull>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetFull> _parser = new pb::MessageParser<AssetFull>(() => new AssetFull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetFull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetFull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetFull(AssetFull other) : this() {
      uid_ = other.uid_;
      type_ = other.type_;
      name_ = other.name_;
      nameBrief_ = other.nameBrief_;
      description_ = other.description_;
      deletedAt_ = other.deletedAt_ != null ? other.deletedAt_.Clone() : null;
      requiredTests_ = other.requiredTests_.Clone();
      gosRegCode_ = other.gosRegCode_;
      cfi_ = other.cfi_;
      codeNsd_ = other.codeNsd_;
      status_ = other.status_;
      brand_ = other.brand_ != null ? other.brand_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      brCode_ = other.brCode_;
      brCodeName_ = other.brCodeName_;
      instruments_ = other.instruments_.Clone();
      switch (other.ExtCase) {
        case ExtOneofCase.Currency:
          Currency = other.Currency.Clone();
          break;
        case ExtOneofCase.Security:
          Security = other.Security.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetFull Clone() {
      return new AssetFull(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.AssetType type_ = global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified;
    /// <summary>
    ///Тип актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Наименование актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_brief" field.</summary>
    public const int NameBriefFieldNumber = 4;
    private string nameBrief_ = "";
    /// <summary>
    ///Короткое наименование актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NameBrief {
      get { return nameBrief_; }
      set {
        nameBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    ///Описание актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deleted_at" field.</summary>
    public const int DeletedAtFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deletedAt_;
    /// <summary>
    ///Дата и время удаления актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeletedAt {
      get { return deletedAt_; }
      set {
        deletedAt_ = value;
      }
    }

    /// <summary>Field number for the "required_tests" field.</summary>
    public const int RequiredTestsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_requiredTests_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> requiredTests_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///Тестирование клиентов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> RequiredTests {
      get { return requiredTests_; }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 8;
    /// <summary>
    ///Валюта. Обязательно и заполняется только для type = "ASSET_TYPE_CURRENCY".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetCurrency Currency {
      get { return extCase_ == ExtOneofCase.Currency ? (global::Tinkoff.Proto.InvestApi.V1.AssetCurrency) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Currency;
      }
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 9;
    /// <summary>
    ///Ценная бумага. Обязательно и заполняется только для type = "ASSET_TYPE_SECURITY".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetSecurity Security {
      get { return extCase_ == ExtOneofCase.Security ? (global::Tinkoff.Proto.InvestApi.V1.AssetSecurity) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Security;
      }
    }

    /// <summary>Field number for the "gos_reg_code" field.</summary>
    public const int GosRegCodeFieldNumber = 10;
    private string gosRegCode_ = "";
    /// <summary>
    ///Номер государственной регистрации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GosRegCode {
      get { return gosRegCode_; }
      set {
        gosRegCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cfi" field.</summary>
    public const int CfiFieldNumber = 11;
    private string cfi_ = "";
    /// <summary>
    ///Код CFI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cfi {
      get { return cfi_; }
      set {
        cfi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code_nsd" field.</summary>
    public const int CodeNsdFieldNumber = 12;
    private string codeNsd_ = "";
    /// <summary>
    ///Код НРД инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CodeNsd {
      get { return codeNsd_; }
      set {
        codeNsd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 13;
    private string status_ = "";
    /// <summary>
    ///Статус актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brand" field.</summary>
    public const int BrandFieldNumber = 14;
    private global::Tinkoff.Proto.InvestApi.V1.Brand brand_;
    /// <summary>
    ///Бренд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Brand Brand {
      get { return brand_; }
      set {
        brand_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    /// <summary>
    ///Дата и время последнего обновления записи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "br_code" field.</summary>
    public const int BrCodeFieldNumber = 16;
    private string brCode_ = "";
    /// <summary>
    ///Код типа ц.б. по классификации Банка России.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BrCode {
      get { return brCode_; }
      set {
        brCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "br_code_name" field.</summary>
    public const int BrCodeNameFieldNumber = 17;
    private string brCodeName_ = "";
    /// <summary>
    ///Наименование кода типа ц.б. по классификации Банка России.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BrCodeName {
      get { return brCodeName_; }
      set {
        brCodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(146, global::Tinkoff.Proto.InvestApi.V1.AssetInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument>();
    /// <summary>
    ///Массив идентификаторов инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument> Instruments {
      get { return instruments_; }
    }

    private object ext_;
    /// <summary>Enum of possible cases for the "ext" oneof.</summary>
    public enum ExtOneofCase {
      None = 0,
      Currency = 8,
      Security = 9,
    }
    private ExtOneofCase extCase_ = ExtOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExtOneofCase ExtCase {
      get { return extCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExt() {
      extCase_ = ExtOneofCase.None;
      ext_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetFull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetFull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (NameBrief != other.NameBrief) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(DeletedAt, other.DeletedAt)) return false;
      if(!requiredTests_.Equals(other.requiredTests_)) return false;
      if (!object.Equals(Currency, other.Currency)) return false;
      if (!object.Equals(Security, other.Security)) return false;
      if (GosRegCode != other.GosRegCode) return false;
      if (Cfi != other.Cfi) return false;
      if (CodeNsd != other.CodeNsd) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Brand, other.Brand)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      if (BrCode != other.BrCode) return false;
      if (BrCodeName != other.BrCodeName) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      if (ExtCase != other.ExtCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NameBrief.Length != 0) hash ^= NameBrief.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (deletedAt_ != null) hash ^= DeletedAt.GetHashCode();
      hash ^= requiredTests_.GetHashCode();
      if (extCase_ == ExtOneofCase.Currency) hash ^= Currency.GetHashCode();
      if (extCase_ == ExtOneofCase.Security) hash ^= Security.GetHashCode();
      if (GosRegCode.Length != 0) hash ^= GosRegCode.GetHashCode();
      if (Cfi.Length != 0) hash ^= Cfi.GetHashCode();
      if (CodeNsd.Length != 0) hash ^= CodeNsd.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (brand_ != null) hash ^= Brand.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (BrCode.Length != 0) hash ^= BrCode.GetHashCode();
      if (BrCodeName.Length != 0) hash ^= BrCodeName.GetHashCode();
      hash ^= instruments_.GetHashCode();
      hash ^= (int) extCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (deletedAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeletedAt);
      }
      requiredTests_.WriteTo(output, _repeated_requiredTests_codec);
      if (extCase_ == ExtOneofCase.Currency) {
        output.WriteRawTag(66);
        output.WriteMessage(Currency);
      }
      if (extCase_ == ExtOneofCase.Security) {
        output.WriteRawTag(74);
        output.WriteMessage(Security);
      }
      if (GosRegCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GosRegCode);
      }
      if (Cfi.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Cfi);
      }
      if (CodeNsd.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CodeNsd);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Status);
      }
      if (brand_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Brand);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdatedAt);
      }
      if (BrCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BrCode);
      }
      if (BrCodeName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BrCodeName);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (deletedAt_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeletedAt);
      }
      requiredTests_.WriteTo(ref output, _repeated_requiredTests_codec);
      if (extCase_ == ExtOneofCase.Currency) {
        output.WriteRawTag(66);
        output.WriteMessage(Currency);
      }
      if (extCase_ == ExtOneofCase.Security) {
        output.WriteRawTag(74);
        output.WriteMessage(Security);
      }
      if (GosRegCode.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GosRegCode);
      }
      if (Cfi.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Cfi);
      }
      if (CodeNsd.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CodeNsd);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Status);
      }
      if (brand_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Brand);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdatedAt);
      }
      if (BrCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BrCode);
      }
      if (BrCodeName.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(BrCodeName);
      }
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NameBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameBrief);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (deletedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletedAt);
      }
      size += requiredTests_.CalculateSize(_repeated_requiredTests_codec);
      if (extCase_ == ExtOneofCase.Currency) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Currency);
      }
      if (extCase_ == ExtOneofCase.Security) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Security);
      }
      if (GosRegCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GosRegCode);
      }
      if (Cfi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cfi);
      }
      if (CodeNsd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CodeNsd);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (brand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Brand);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (BrCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrCode);
      }
      if (BrCodeName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrCodeName);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetFull other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NameBrief.Length != 0) {
        NameBrief = other.NameBrief;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.deletedAt_ != null) {
        if (deletedAt_ == null) {
          DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeletedAt.MergeFrom(other.DeletedAt);
      }
      requiredTests_.Add(other.requiredTests_);
      if (other.GosRegCode.Length != 0) {
        GosRegCode = other.GosRegCode;
      }
      if (other.Cfi.Length != 0) {
        Cfi = other.Cfi;
      }
      if (other.CodeNsd.Length != 0) {
        CodeNsd = other.CodeNsd;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.brand_ != null) {
        if (brand_ == null) {
          Brand = new global::Tinkoff.Proto.InvestApi.V1.Brand();
        }
        Brand.MergeFrom(other.Brand);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      if (other.BrCode.Length != 0) {
        BrCode = other.BrCode;
      }
      if (other.BrCodeName.Length != 0) {
        BrCodeName = other.BrCodeName;
      }
      instruments_.Add(other.instruments_);
      switch (other.ExtCase) {
        case ExtOneofCase.Currency:
          if (Currency == null) {
            Currency = new global::Tinkoff.Proto.InvestApi.V1.AssetCurrency();
          }
          Currency.MergeFrom(other.Currency);
          break;
        case ExtOneofCase.Security:
          if (Security == null) {
            Security = new global::Tinkoff.Proto.InvestApi.V1.AssetSecurity();
          }
          Security.MergeFrom(other.Security);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (deletedAt_ == null) {
              DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeletedAt);
            break;
          }
          case 58: {
            requiredTests_.AddEntriesFrom(input, _repeated_requiredTests_codec);
            break;
          }
          case 66: {
            global::Tinkoff.Proto.InvestApi.V1.AssetCurrency subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetCurrency();
            if (extCase_ == ExtOneofCase.Currency) {
              subBuilder.MergeFrom(Currency);
            }
            input.ReadMessage(subBuilder);
            Currency = subBuilder;
            break;
          }
          case 74: {
            global::Tinkoff.Proto.InvestApi.V1.AssetSecurity subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetSecurity();
            if (extCase_ == ExtOneofCase.Security) {
              subBuilder.MergeFrom(Security);
            }
            input.ReadMessage(subBuilder);
            Security = subBuilder;
            break;
          }
          case 82: {
            GosRegCode = input.ReadString();
            break;
          }
          case 90: {
            Cfi = input.ReadString();
            break;
          }
          case 98: {
            CodeNsd = input.ReadString();
            break;
          }
          case 106: {
            Status = input.ReadString();
            break;
          }
          case 114: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.Proto.InvestApi.V1.Brand();
            }
            input.ReadMessage(Brand);
            break;
          }
          case 122: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 130: {
            BrCode = input.ReadString();
            break;
          }
          case 138: {
            BrCodeName = input.ReadString();
            break;
          }
          case 146: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            if (deletedAt_ == null) {
              DeletedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeletedAt);
            break;
          }
          case 58: {
            requiredTests_.AddEntriesFrom(ref input, _repeated_requiredTests_codec);
            break;
          }
          case 66: {
            global::Tinkoff.Proto.InvestApi.V1.AssetCurrency subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetCurrency();
            if (extCase_ == ExtOneofCase.Currency) {
              subBuilder.MergeFrom(Currency);
            }
            input.ReadMessage(subBuilder);
            Currency = subBuilder;
            break;
          }
          case 74: {
            global::Tinkoff.Proto.InvestApi.V1.AssetSecurity subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetSecurity();
            if (extCase_ == ExtOneofCase.Security) {
              subBuilder.MergeFrom(Security);
            }
            input.ReadMessage(subBuilder);
            Security = subBuilder;
            break;
          }
          case 82: {
            GosRegCode = input.ReadString();
            break;
          }
          case 90: {
            Cfi = input.ReadString();
            break;
          }
          case 98: {
            CodeNsd = input.ReadString();
            break;
          }
          case 106: {
            Status = input.ReadString();
            break;
          }
          case 114: {
            if (brand_ == null) {
              Brand = new global::Tinkoff.Proto.InvestApi.V1.Brand();
            }
            input.ReadMessage(Brand);
            break;
          }
          case 122: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 130: {
            BrCode = input.ReadString();
            break;
          }
          case 138: {
            BrCodeName = input.ReadString();
            break;
          }
          case 146: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Информация об активе.
  /// </summary>
  public sealed partial class Asset : pb::IMessage<Asset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Asset(Asset other) : this() {
      uid_ = other.uid_;
      type_ = other.type_;
      name_ = other.name_;
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.AssetType type_ = global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified;
    /// <summary>
    ///Тип актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Наименование актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(34, global::Tinkoff.Proto.InvestApi.V1.AssetInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument>();
    /// <summary>
    ///Массив идентификаторов инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.AssetInstrument> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Type != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Валюта.
  /// </summary>
  public sealed partial class AssetCurrency : pb::IMessage<AssetCurrency>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetCurrency> _parser = new pb::MessageParser<AssetCurrency>(() => new AssetCurrency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetCurrency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetCurrency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetCurrency(AssetCurrency other) : this() {
      baseCurrency_ = other.baseCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetCurrency Clone() {
      return new AssetCurrency(this);
    }

    /// <summary>Field number for the "base_currency" field.</summary>
    public const int BaseCurrencyFieldNumber = 1;
    private string baseCurrency_ = "";
    /// <summary>
    ///ISO-код валюты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BaseCurrency {
      get { return baseCurrency_; }
      set {
        baseCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetCurrency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetCurrency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseCurrency != other.BaseCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseCurrency.Length != 0) hash ^= BaseCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BaseCurrency.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BaseCurrency.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BaseCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetCurrency other) {
      if (other == null) {
        return;
      }
      if (other.BaseCurrency.Length != 0) {
        BaseCurrency = other.BaseCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseCurrency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BaseCurrency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Ценная бумага.
  /// </summary>
  public sealed partial class AssetSecurity : pb::IMessage<AssetSecurity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetSecurity> _parser = new pb::MessageParser<AssetSecurity>(() => new AssetSecurity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetSecurity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSecurity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSecurity(AssetSecurity other) : this() {
      isin_ = other.isin_;
      type_ = other.type_;
      instrumentKind_ = other.instrumentKind_;
      switch (other.ExtCase) {
        case ExtOneofCase.Share:
          Share = other.Share.Clone();
          break;
        case ExtOneofCase.Bond:
          Bond = other.Bond.Clone();
          break;
        case ExtOneofCase.Sp:
          Sp = other.Sp.Clone();
          break;
        case ExtOneofCase.Etf:
          Etf = other.Etf.Clone();
          break;
        case ExtOneofCase.ClearingCertificate:
          ClearingCertificate = other.ClearingCertificate.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetSecurity Clone() {
      return new AssetSecurity(this);
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 1;
    private string isin_ = "";
    /// <summary>
    ///ISIN-идентификатор ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    ///Тип ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "share" field.</summary>
    public const int ShareFieldNumber = 3;
    /// <summary>
    ///Акция. Заполняется только для акций (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = share).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetShare Share {
      get { return extCase_ == ExtOneofCase.Share ? (global::Tinkoff.Proto.InvestApi.V1.AssetShare) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Share;
      }
    }

    /// <summary>Field number for the "bond" field.</summary>
    public const int BondFieldNumber = 4;
    /// <summary>
    ///Облигация. Заполняется только для облигаций (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = bond).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetBond Bond {
      get { return extCase_ == ExtOneofCase.Bond ? (global::Tinkoff.Proto.InvestApi.V1.AssetBond) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Bond;
      }
    }

    /// <summary>Field number for the "sp" field.</summary>
    public const int SpFieldNumber = 5;
    /// <summary>
    ///Структурная нота. Заполняется только для структурных продуктов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = sp).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct Sp {
      get { return extCase_ == ExtOneofCase.Sp ? (global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Sp;
      }
    }

    /// <summary>Field number for the "etf" field.</summary>
    public const int EtfFieldNumber = 6;
    /// <summary>
    /// Фонд. Заполняется только для фондов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = etf).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetEtf Etf {
      get { return extCase_ == ExtOneofCase.Etf ? (global::Tinkoff.Proto.InvestApi.V1.AssetEtf) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.Etf;
      }
    }

    /// <summary>Field number for the "clearing_certificate" field.</summary>
    public const int ClearingCertificateFieldNumber = 7;
    /// <summary>
    /// Клиринговый сертификат участия. Заполняется только для клиринговых сертификатов (тип актива asset.type = "ASSET_TYPE_SECURITY" и security.type = clearing_certificate).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate ClearingCertificate {
      get { return extCase_ == ExtOneofCase.ClearingCertificate ? (global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate) ext_ : null; }
      set {
        ext_ = value;
        extCase_ = value == null ? ExtOneofCase.None : ExtOneofCase.ClearingCertificate;
      }
    }

    private object ext_;
    /// <summary>Enum of possible cases for the "ext" oneof.</summary>
    public enum ExtOneofCase {
      None = 0,
      Share = 3,
      Bond = 4,
      Sp = 5,
      Etf = 6,
      ClearingCertificate = 7,
    }
    private ExtOneofCase extCase_ = ExtOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExtOneofCase ExtCase {
      get { return extCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExt() {
      extCase_ = ExtOneofCase.None;
      ext_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetSecurity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetSecurity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isin != other.Isin) return false;
      if (Type != other.Type) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (!object.Equals(Share, other.Share)) return false;
      if (!object.Equals(Bond, other.Bond)) return false;
      if (!object.Equals(Sp, other.Sp)) return false;
      if (!object.Equals(Etf, other.Etf)) return false;
      if (!object.Equals(ClearingCertificate, other.ClearingCertificate)) return false;
      if (ExtCase != other.ExtCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (extCase_ == ExtOneofCase.Share) hash ^= Share.GetHashCode();
      if (extCase_ == ExtOneofCase.Bond) hash ^= Bond.GetHashCode();
      if (extCase_ == ExtOneofCase.Sp) hash ^= Sp.GetHashCode();
      if (extCase_ == ExtOneofCase.Etf) hash ^= Etf.GetHashCode();
      if (extCase_ == ExtOneofCase.ClearingCertificate) hash ^= ClearingCertificate.GetHashCode();
      hash ^= (int) extCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (extCase_ == ExtOneofCase.Share) {
        output.WriteRawTag(26);
        output.WriteMessage(Share);
      }
      if (extCase_ == ExtOneofCase.Bond) {
        output.WriteRawTag(34);
        output.WriteMessage(Bond);
      }
      if (extCase_ == ExtOneofCase.Sp) {
        output.WriteRawTag(42);
        output.WriteMessage(Sp);
      }
      if (extCase_ == ExtOneofCase.Etf) {
        output.WriteRawTag(50);
        output.WriteMessage(Etf);
      }
      if (extCase_ == ExtOneofCase.ClearingCertificate) {
        output.WriteRawTag(58);
        output.WriteMessage(ClearingCertificate);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (extCase_ == ExtOneofCase.Share) {
        output.WriteRawTag(26);
        output.WriteMessage(Share);
      }
      if (extCase_ == ExtOneofCase.Bond) {
        output.WriteRawTag(34);
        output.WriteMessage(Bond);
      }
      if (extCase_ == ExtOneofCase.Sp) {
        output.WriteRawTag(42);
        output.WriteMessage(Sp);
      }
      if (extCase_ == ExtOneofCase.Etf) {
        output.WriteRawTag(50);
        output.WriteMessage(Etf);
      }
      if (extCase_ == ExtOneofCase.ClearingCertificate) {
        output.WriteRawTag(58);
        output.WriteMessage(ClearingCertificate);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (extCase_ == ExtOneofCase.Share) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Share);
      }
      if (extCase_ == ExtOneofCase.Bond) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bond);
      }
      if (extCase_ == ExtOneofCase.Sp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sp);
      }
      if (extCase_ == ExtOneofCase.Etf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Etf);
      }
      if (extCase_ == ExtOneofCase.ClearingCertificate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearingCertificate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetSecurity other) {
      if (other == null) {
        return;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      switch (other.ExtCase) {
        case ExtOneofCase.Share:
          if (Share == null) {
            Share = new global::Tinkoff.Proto.InvestApi.V1.AssetShare();
          }
          Share.MergeFrom(other.Share);
          break;
        case ExtOneofCase.Bond:
          if (Bond == null) {
            Bond = new global::Tinkoff.Proto.InvestApi.V1.AssetBond();
          }
          Bond.MergeFrom(other.Bond);
          break;
        case ExtOneofCase.Sp:
          if (Sp == null) {
            Sp = new global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct();
          }
          Sp.MergeFrom(other.Sp);
          break;
        case ExtOneofCase.Etf:
          if (Etf == null) {
            Etf = new global::Tinkoff.Proto.InvestApi.V1.AssetEtf();
          }
          Etf.MergeFrom(other.Etf);
          break;
        case ExtOneofCase.ClearingCertificate:
          if (ClearingCertificate == null) {
            ClearingCertificate = new global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate();
          }
          ClearingCertificate.MergeFrom(other.ClearingCertificate);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            global::Tinkoff.Proto.InvestApi.V1.AssetShare subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetShare();
            if (extCase_ == ExtOneofCase.Share) {
              subBuilder.MergeFrom(Share);
            }
            input.ReadMessage(subBuilder);
            Share = subBuilder;
            break;
          }
          case 34: {
            global::Tinkoff.Proto.InvestApi.V1.AssetBond subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetBond();
            if (extCase_ == ExtOneofCase.Bond) {
              subBuilder.MergeFrom(Bond);
            }
            input.ReadMessage(subBuilder);
            Bond = subBuilder;
            break;
          }
          case 42: {
            global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct();
            if (extCase_ == ExtOneofCase.Sp) {
              subBuilder.MergeFrom(Sp);
            }
            input.ReadMessage(subBuilder);
            Sp = subBuilder;
            break;
          }
          case 50: {
            global::Tinkoff.Proto.InvestApi.V1.AssetEtf subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetEtf();
            if (extCase_ == ExtOneofCase.Etf) {
              subBuilder.MergeFrom(Etf);
            }
            input.ReadMessage(subBuilder);
            Etf = subBuilder;
            break;
          }
          case 58: {
            global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate();
            if (extCase_ == ExtOneofCase.ClearingCertificate) {
              subBuilder.MergeFrom(ClearingCertificate);
            }
            input.ReadMessage(subBuilder);
            ClearingCertificate = subBuilder;
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            global::Tinkoff.Proto.InvestApi.V1.AssetShare subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetShare();
            if (extCase_ == ExtOneofCase.Share) {
              subBuilder.MergeFrom(Share);
            }
            input.ReadMessage(subBuilder);
            Share = subBuilder;
            break;
          }
          case 34: {
            global::Tinkoff.Proto.InvestApi.V1.AssetBond subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetBond();
            if (extCase_ == ExtOneofCase.Bond) {
              subBuilder.MergeFrom(Bond);
            }
            input.ReadMessage(subBuilder);
            Bond = subBuilder;
            break;
          }
          case 42: {
            global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetStructuredProduct();
            if (extCase_ == ExtOneofCase.Sp) {
              subBuilder.MergeFrom(Sp);
            }
            input.ReadMessage(subBuilder);
            Sp = subBuilder;
            break;
          }
          case 50: {
            global::Tinkoff.Proto.InvestApi.V1.AssetEtf subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetEtf();
            if (extCase_ == ExtOneofCase.Etf) {
              subBuilder.MergeFrom(Etf);
            }
            input.ReadMessage(subBuilder);
            Etf = subBuilder;
            break;
          }
          case 58: {
            global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate subBuilder = new global::Tinkoff.Proto.InvestApi.V1.AssetClearingCertificate();
            if (extCase_ == ExtOneofCase.ClearingCertificate) {
              subBuilder.MergeFrom(ClearingCertificate);
            }
            input.ReadMessage(subBuilder);
            ClearingCertificate = subBuilder;
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Акция.
  /// </summary>
  public sealed partial class AssetShare : pb::IMessage<AssetShare>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetShare> _parser = new pb::MessageParser<AssetShare>(() => new AssetShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetShare(AssetShare other) : this() {
      type_ = other.type_;
      issueSize_ = other.issueSize_ != null ? other.issueSize_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      primaryIndex_ = other.primaryIndex_;
      dividendRate_ = other.dividendRate_ != null ? other.dividendRate_.Clone() : null;
      preferredShareType_ = other.preferredShareType_;
      ipoDate_ = other.ipoDate_ != null ? other.ipoDate_.Clone() : null;
      registryDate_ = other.registryDate_ != null ? other.registryDate_.Clone() : null;
      divYieldFlag_ = other.divYieldFlag_;
      issueKind_ = other.issueKind_;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      represIsin_ = other.represIsin_;
      issueSizePlan_ = other.issueSizePlan_ != null ? other.issueSizePlan_.Clone() : null;
      totalFloat_ = other.totalFloat_ != null ? other.totalFloat_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetShare Clone() {
      return new AssetShare(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.ShareType type_ = global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified;
    /// <summary>
    ///Тип акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.ShareType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation issueSize_;
    /// <summary>
    ///Объем выпуска (шт.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 3;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 4;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index" field.</summary>
    public const int PrimaryIndexFieldNumber = 5;
    private string primaryIndex_ = "";
    /// <summary>
    ///Индекс (Bloomberg).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndex {
      get { return primaryIndex_; }
      set {
        primaryIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dividend_rate" field.</summary>
    public const int DividendRateFieldNumber = 6;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation dividendRate_;
    /// <summary>
    ///Ставка дивиденда (для привилегированных акций).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation DividendRate {
      get { return dividendRate_; }
      set {
        dividendRate_ = value;
      }
    }

    /// <summary>Field number for the "preferred_share_type" field.</summary>
    public const int PreferredShareTypeFieldNumber = 7;
    private string preferredShareType_ = "";
    /// <summary>
    ///Тип привилегированных акций.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PreferredShareType {
      get { return preferredShareType_; }
      set {
        preferredShareType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipo_date" field.</summary>
    public const int IpoDateFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ipoDate_;
    /// <summary>
    ///Дата IPO.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IpoDate {
      get { return ipoDate_; }
      set {
        ipoDate_ = value;
      }
    }

    /// <summary>Field number for the "registry_date" field.</summary>
    public const int RegistryDateFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp registryDate_;
    /// <summary>
    ///Дата регистрации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RegistryDate {
      get { return registryDate_; }
      set {
        registryDate_ = value;
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 10;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 11;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска ФИ.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения акции.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "repres_isin" field.</summary>
    public const int RepresIsinFieldNumber = 13;
    private string represIsin_ = "";
    /// <summary>
    ///ISIN базового актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RepresIsin {
      get { return represIsin_; }
      set {
        represIsin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 14;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation issueSizePlan_;
    /// <summary>
    ///Объявленное количество шт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "total_float" field.</summary>
    public const int TotalFloatFieldNumber = 15;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation totalFloat_;
    /// <summary>
    ///Количество акций в свободном обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation TotalFloat {
      get { return totalFloat_; }
      set {
        totalFloat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(IssueSize, other.IssueSize)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      if (PrimaryIndex != other.PrimaryIndex) return false;
      if (!object.Equals(DividendRate, other.DividendRate)) return false;
      if (PreferredShareType != other.PreferredShareType) return false;
      if (!object.Equals(IpoDate, other.IpoDate)) return false;
      if (!object.Equals(RegistryDate, other.RegistryDate)) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (IssueKind != other.IssueKind) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (RepresIsin != other.RepresIsin) return false;
      if (!object.Equals(IssueSizePlan, other.IssueSizePlan)) return false;
      if (!object.Equals(TotalFloat, other.TotalFloat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) hash ^= Type.GetHashCode();
      if (issueSize_ != null) hash ^= IssueSize.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (PrimaryIndex.Length != 0) hash ^= PrimaryIndex.GetHashCode();
      if (dividendRate_ != null) hash ^= DividendRate.GetHashCode();
      if (PreferredShareType.Length != 0) hash ^= PreferredShareType.GetHashCode();
      if (ipoDate_ != null) hash ^= IpoDate.GetHashCode();
      if (registryDate_ != null) hash ^= RegistryDate.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (RepresIsin.Length != 0) hash ^= RepresIsin.GetHashCode();
      if (issueSizePlan_ != null) hash ^= IssueSizePlan.GetHashCode();
      if (totalFloat_ != null) hash ^= TotalFloat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NominalCurrency);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrimaryIndex);
      }
      if (dividendRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DividendRate);
      }
      if (PreferredShareType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PreferredShareType);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IpoDate);
      }
      if (registryDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RegistryDate);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(DivYieldFlag);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IssueKind);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (RepresIsin.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RepresIsin);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(IssueSizePlan);
      }
      if (totalFloat_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TotalFloat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NominalCurrency);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PrimaryIndex);
      }
      if (dividendRate_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DividendRate);
      }
      if (PreferredShareType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PreferredShareType);
      }
      if (ipoDate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IpoDate);
      }
      if (registryDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RegistryDate);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(DivYieldFlag);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IssueKind);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (RepresIsin.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RepresIsin);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(IssueSizePlan);
      }
      if (totalFloat_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(TotalFloat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (issueSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSize);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (PrimaryIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndex);
      }
      if (dividendRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DividendRate);
      }
      if (PreferredShareType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreferredShareType);
      }
      if (ipoDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IpoDate);
      }
      if (registryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegistryDate);
      }
      if (DivYieldFlag != false) {
        size += 1 + 1;
      }
      if (IssueKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (placementDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (RepresIsin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepresIsin);
      }
      if (issueSizePlan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSizePlan);
      }
      if (totalFloat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalFloat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetShare other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Tinkoff.Proto.InvestApi.V1.ShareType.Unspecified) {
        Type = other.Type;
      }
      if (other.issueSize_ != null) {
        if (issueSize_ == null) {
          IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IssueSize.MergeFrom(other.IssueSize);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      if (other.PrimaryIndex.Length != 0) {
        PrimaryIndex = other.PrimaryIndex;
      }
      if (other.dividendRate_ != null) {
        if (dividendRate_ == null) {
          DividendRate = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        DividendRate.MergeFrom(other.DividendRate);
      }
      if (other.PreferredShareType.Length != 0) {
        PreferredShareType = other.PreferredShareType;
      }
      if (other.ipoDate_ != null) {
        if (ipoDate_ == null) {
          IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IpoDate.MergeFrom(other.IpoDate);
      }
      if (other.registryDate_ != null) {
        if (registryDate_ == null) {
          RegistryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RegistryDate.MergeFrom(other.RegistryDate);
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.RepresIsin.Length != 0) {
        RepresIsin = other.RepresIsin;
      }
      if (other.issueSizePlan_ != null) {
        if (issueSizePlan_ == null) {
          IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IssueSizePlan.MergeFrom(other.IssueSizePlan);
      }
      if (other.totalFloat_ != null) {
        if (totalFloat_ == null) {
          TotalFloat = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        TotalFloat.MergeFrom(other.TotalFloat);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 18: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 26: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 34: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 42: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 50: {
            if (dividendRate_ == null) {
              DividendRate = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DividendRate);
            break;
          }
          case 58: {
            PreferredShareType = input.ReadString();
            break;
          }
          case 66: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 74: {
            if (registryDate_ == null) {
              RegistryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RegistryDate);
            break;
          }
          case 80: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 90: {
            IssueKind = input.ReadString();
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            RepresIsin = input.ReadString();
            break;
          }
          case 114: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 122: {
            if (totalFloat_ == null) {
              TotalFloat = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalFloat);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.ShareType) input.ReadEnum();
            break;
          }
          case 18: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 26: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 34: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 42: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 50: {
            if (dividendRate_ == null) {
              DividendRate = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(DividendRate);
            break;
          }
          case 58: {
            PreferredShareType = input.ReadString();
            break;
          }
          case 66: {
            if (ipoDate_ == null) {
              IpoDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IpoDate);
            break;
          }
          case 74: {
            if (registryDate_ == null) {
              RegistryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(RegistryDate);
            break;
          }
          case 80: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 90: {
            IssueKind = input.ReadString();
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            RepresIsin = input.ReadString();
            break;
          }
          case 114: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 122: {
            if (totalFloat_ == null) {
              TotalFloat = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalFloat);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Облигация.
  /// </summary>
  public sealed partial class AssetBond : pb::IMessage<AssetBond>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetBond> _parser = new pb::MessageParser<AssetBond>(() => new AssetBond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetBond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetBond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetBond(AssetBond other) : this() {
      currentNominal_ = other.currentNominal_ != null ? other.currentNominal_.Clone() : null;
      borrowName_ = other.borrowName_;
      issueSize_ = other.issueSize_ != null ? other.issueSize_.Clone() : null;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      issueKind_ = other.issueKind_;
      interestKind_ = other.interestKind_;
      couponQuantityPerYear_ = other.couponQuantityPerYear_;
      indexedNominalFlag_ = other.indexedNominalFlag_;
      subordinatedFlag_ = other.subordinatedFlag_;
      collateralFlag_ = other.collateralFlag_;
      taxFreeFlag_ = other.taxFreeFlag_;
      amortizationFlag_ = other.amortizationFlag_;
      floatingCouponFlag_ = other.floatingCouponFlag_;
      perpetualFlag_ = other.perpetualFlag_;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      returnCondition_ = other.returnCondition_;
      stateRegDate_ = other.stateRegDate_ != null ? other.stateRegDate_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      placementPrice_ = other.placementPrice_ != null ? other.placementPrice_.Clone() : null;
      issueSizePlan_ = other.issueSizePlan_ != null ? other.issueSizePlan_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetBond Clone() {
      return new AssetBond(this);
    }

    /// <summary>Field number for the "current_nominal" field.</summary>
    public const int CurrentNominalFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation currentNominal_;
    /// <summary>
    ///Текущий номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation CurrentNominal {
      get { return currentNominal_; }
      set {
        currentNominal_ = value;
      }
    }

    /// <summary>Field number for the "borrow_name" field.</summary>
    public const int BorrowNameFieldNumber = 2;
    private string borrowName_ = "";
    /// <summary>
    ///Наименование заемщика.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BorrowName {
      get { return borrowName_; }
      set {
        borrowName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 3;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation issueSize_;
    /// <summary>
    ///Объем эмиссии облигации (стоимость).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 4;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 5;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 6;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interest_kind" field.</summary>
    public const int InterestKindFieldNumber = 7;
    private string interestKind_ = "";
    /// <summary>
    ///Форма дохода облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InterestKind {
      get { return interestKind_; }
      set {
        interestKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_quantity_per_year" field.</summary>
    public const int CouponQuantityPerYearFieldNumber = 8;
    private int couponQuantityPerYear_;
    /// <summary>
    ///Количество выплат в год.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CouponQuantityPerYear {
      get { return couponQuantityPerYear_; }
      set {
        couponQuantityPerYear_ = value;
      }
    }

    /// <summary>Field number for the "indexed_nominal_flag" field.</summary>
    public const int IndexedNominalFlagFieldNumber = 9;
    private bool indexedNominalFlag_;
    /// <summary>
    ///Признак облигации с индексируемым номиналом.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IndexedNominalFlag {
      get { return indexedNominalFlag_; }
      set {
        indexedNominalFlag_ = value;
      }
    }

    /// <summary>Field number for the "subordinated_flag" field.</summary>
    public const int SubordinatedFlagFieldNumber = 10;
    private bool subordinatedFlag_;
    /// <summary>
    ///Признак субординированной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SubordinatedFlag {
      get { return subordinatedFlag_; }
      set {
        subordinatedFlag_ = value;
      }
    }

    /// <summary>Field number for the "collateral_flag" field.</summary>
    public const int CollateralFlagFieldNumber = 11;
    private bool collateralFlag_;
    /// <summary>
    ///Признак обеспеченной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CollateralFlag {
      get { return collateralFlag_; }
      set {
        collateralFlag_ = value;
      }
    }

    /// <summary>Field number for the "tax_free_flag" field.</summary>
    public const int TaxFreeFlagFieldNumber = 12;
    private bool taxFreeFlag_;
    /// <summary>
    ///Признак показывает, что купоны облигации не облагаются налогом (для mass market).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TaxFreeFlag {
      get { return taxFreeFlag_; }
      set {
        taxFreeFlag_ = value;
      }
    }

    /// <summary>Field number for the "amortization_flag" field.</summary>
    public const int AmortizationFlagFieldNumber = 13;
    private bool amortizationFlag_;
    /// <summary>
    ///Признак облигации с амортизацией долга.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AmortizationFlag {
      get { return amortizationFlag_; }
      set {
        amortizationFlag_ = value;
      }
    }

    /// <summary>Field number for the "floating_coupon_flag" field.</summary>
    public const int FloatingCouponFlagFieldNumber = 14;
    private bool floatingCouponFlag_;
    /// <summary>
    ///Признак облигации с плавающим купоном.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FloatingCouponFlag {
      get { return floatingCouponFlag_; }
      set {
        floatingCouponFlag_ = value;
      }
    }

    /// <summary>Field number for the "perpetual_flag" field.</summary>
    public const int PerpetualFlagFieldNumber = 15;
    private bool perpetualFlag_;
    /// <summary>
    ///Признак бессрочной облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PerpetualFlag {
      get { return perpetualFlag_; }
      set {
        perpetualFlag_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "return_condition" field.</summary>
    public const int ReturnConditionFieldNumber = 17;
    private string returnCondition_ = "";
    /// <summary>
    ///Описание и условия получения дополнительного дохода.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReturnCondition {
      get { return returnCondition_; }
      set {
        returnCondition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_reg_date" field.</summary>
    public const int StateRegDateFieldNumber = 18;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stateRegDate_;
    /// <summary>
    ///Дата выпуска облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StateRegDate {
      get { return stateRegDate_; }
      set {
        stateRegDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 19;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "placement_price" field.</summary>
    public const int PlacementPriceFieldNumber = 20;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation placementPrice_;
    /// <summary>
    ///Цена размещения облигации.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation PlacementPrice {
      get { return placementPrice_; }
      set {
        placementPrice_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 21;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation issueSizePlan_;
    /// <summary>
    ///Объявленное количество шт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetBond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetBond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentNominal, other.CurrentNominal)) return false;
      if (BorrowName != other.BorrowName) return false;
      if (!object.Equals(IssueSize, other.IssueSize)) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      if (IssueKind != other.IssueKind) return false;
      if (InterestKind != other.InterestKind) return false;
      if (CouponQuantityPerYear != other.CouponQuantityPerYear) return false;
      if (IndexedNominalFlag != other.IndexedNominalFlag) return false;
      if (SubordinatedFlag != other.SubordinatedFlag) return false;
      if (CollateralFlag != other.CollateralFlag) return false;
      if (TaxFreeFlag != other.TaxFreeFlag) return false;
      if (AmortizationFlag != other.AmortizationFlag) return false;
      if (FloatingCouponFlag != other.FloatingCouponFlag) return false;
      if (PerpetualFlag != other.PerpetualFlag) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (ReturnCondition != other.ReturnCondition) return false;
      if (!object.Equals(StateRegDate, other.StateRegDate)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (!object.Equals(PlacementPrice, other.PlacementPrice)) return false;
      if (!object.Equals(IssueSizePlan, other.IssueSizePlan)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (currentNominal_ != null) hash ^= CurrentNominal.GetHashCode();
      if (BorrowName.Length != 0) hash ^= BorrowName.GetHashCode();
      if (issueSize_ != null) hash ^= IssueSize.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (InterestKind.Length != 0) hash ^= InterestKind.GetHashCode();
      if (CouponQuantityPerYear != 0) hash ^= CouponQuantityPerYear.GetHashCode();
      if (IndexedNominalFlag != false) hash ^= IndexedNominalFlag.GetHashCode();
      if (SubordinatedFlag != false) hash ^= SubordinatedFlag.GetHashCode();
      if (CollateralFlag != false) hash ^= CollateralFlag.GetHashCode();
      if (TaxFreeFlag != false) hash ^= TaxFreeFlag.GetHashCode();
      if (AmortizationFlag != false) hash ^= AmortizationFlag.GetHashCode();
      if (FloatingCouponFlag != false) hash ^= FloatingCouponFlag.GetHashCode();
      if (PerpetualFlag != false) hash ^= PerpetualFlag.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (ReturnCondition.Length != 0) hash ^= ReturnCondition.GetHashCode();
      if (stateRegDate_ != null) hash ^= StateRegDate.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (placementPrice_ != null) hash ^= PlacementPrice.GetHashCode();
      if (issueSizePlan_ != null) hash ^= IssueSizePlan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (currentNominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentNominal);
      }
      if (BorrowName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BorrowName);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NominalCurrency);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IssueKind);
      }
      if (InterestKind.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InterestKind);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (IndexedNominalFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(IndexedNominalFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(SubordinatedFlag);
      }
      if (CollateralFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(CollateralFlag);
      }
      if (TaxFreeFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(TaxFreeFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(AmortizationFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(120);
        output.WriteBool(PerpetualFlag);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MaturityDate);
      }
      if (ReturnCondition.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ReturnCondition);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IssueSizePlan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (currentNominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentNominal);
      }
      if (BorrowName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BorrowName);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(IssueSize);
      }
      if (nominal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NominalCurrency);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IssueKind);
      }
      if (InterestKind.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InterestKind);
      }
      if (CouponQuantityPerYear != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CouponQuantityPerYear);
      }
      if (IndexedNominalFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(IndexedNominalFlag);
      }
      if (SubordinatedFlag != false) {
        output.WriteRawTag(80);
        output.WriteBool(SubordinatedFlag);
      }
      if (CollateralFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(CollateralFlag);
      }
      if (TaxFreeFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(TaxFreeFlag);
      }
      if (AmortizationFlag != false) {
        output.WriteRawTag(104);
        output.WriteBool(AmortizationFlag);
      }
      if (FloatingCouponFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(FloatingCouponFlag);
      }
      if (PerpetualFlag != false) {
        output.WriteRawTag(120);
        output.WriteBool(PerpetualFlag);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MaturityDate);
      }
      if (ReturnCondition.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ReturnCondition);
      }
      if (stateRegDate_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(StateRegDate);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PlacementDate);
      }
      if (placementPrice_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(PlacementPrice);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IssueSizePlan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (currentNominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentNominal);
      }
      if (BorrowName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BorrowName);
      }
      if (issueSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSize);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (IssueKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (InterestKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InterestKind);
      }
      if (CouponQuantityPerYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CouponQuantityPerYear);
      }
      if (IndexedNominalFlag != false) {
        size += 1 + 1;
      }
      if (SubordinatedFlag != false) {
        size += 1 + 1;
      }
      if (CollateralFlag != false) {
        size += 1 + 1;
      }
      if (TaxFreeFlag != false) {
        size += 1 + 1;
      }
      if (AmortizationFlag != false) {
        size += 1 + 1;
      }
      if (FloatingCouponFlag != false) {
        size += 1 + 1;
      }
      if (PerpetualFlag != false) {
        size += 1 + 1;
      }
      if (maturityDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (ReturnCondition.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReturnCondition);
      }
      if (stateRegDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StateRegDate);
      }
      if (placementDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (placementPrice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlacementPrice);
      }
      if (issueSizePlan_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IssueSizePlan);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetBond other) {
      if (other == null) {
        return;
      }
      if (other.currentNominal_ != null) {
        if (currentNominal_ == null) {
          CurrentNominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        CurrentNominal.MergeFrom(other.CurrentNominal);
      }
      if (other.BorrowName.Length != 0) {
        BorrowName = other.BorrowName;
      }
      if (other.issueSize_ != null) {
        if (issueSize_ == null) {
          IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IssueSize.MergeFrom(other.IssueSize);
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.InterestKind.Length != 0) {
        InterestKind = other.InterestKind;
      }
      if (other.CouponQuantityPerYear != 0) {
        CouponQuantityPerYear = other.CouponQuantityPerYear;
      }
      if (other.IndexedNominalFlag != false) {
        IndexedNominalFlag = other.IndexedNominalFlag;
      }
      if (other.SubordinatedFlag != false) {
        SubordinatedFlag = other.SubordinatedFlag;
      }
      if (other.CollateralFlag != false) {
        CollateralFlag = other.CollateralFlag;
      }
      if (other.TaxFreeFlag != false) {
        TaxFreeFlag = other.TaxFreeFlag;
      }
      if (other.AmortizationFlag != false) {
        AmortizationFlag = other.AmortizationFlag;
      }
      if (other.FloatingCouponFlag != false) {
        FloatingCouponFlag = other.FloatingCouponFlag;
      }
      if (other.PerpetualFlag != false) {
        PerpetualFlag = other.PerpetualFlag;
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.ReturnCondition.Length != 0) {
        ReturnCondition = other.ReturnCondition;
      }
      if (other.stateRegDate_ != null) {
        if (stateRegDate_ == null) {
          StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StateRegDate.MergeFrom(other.StateRegDate);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.placementPrice_ != null) {
        if (placementPrice_ == null) {
          PlacementPrice = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        PlacementPrice.MergeFrom(other.PlacementPrice);
      }
      if (other.issueSizePlan_ != null) {
        if (issueSizePlan_ == null) {
          IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IssueSizePlan.MergeFrom(other.IssueSizePlan);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentNominal_ == null) {
              CurrentNominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(CurrentNominal);
            break;
          }
          case 18: {
            BorrowName = input.ReadString();
            break;
          }
          case 26: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 42: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 50: {
            IssueKind = input.ReadString();
            break;
          }
          case 58: {
            InterestKind = input.ReadString();
            break;
          }
          case 64: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 72: {
            IndexedNominalFlag = input.ReadBool();
            break;
          }
          case 80: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 88: {
            CollateralFlag = input.ReadBool();
            break;
          }
          case 96: {
            TaxFreeFlag = input.ReadBool();
            break;
          }
          case 104: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 112: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 120: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 130: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 138: {
            ReturnCondition = input.ReadString();
            break;
          }
          case 146: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 154: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 162: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 170: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (currentNominal_ == null) {
              CurrentNominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(CurrentNominal);
            break;
          }
          case 18: {
            BorrowName = input.ReadString();
            break;
          }
          case 26: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 34: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 42: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 50: {
            IssueKind = input.ReadString();
            break;
          }
          case 58: {
            InterestKind = input.ReadString();
            break;
          }
          case 64: {
            CouponQuantityPerYear = input.ReadInt32();
            break;
          }
          case 72: {
            IndexedNominalFlag = input.ReadBool();
            break;
          }
          case 80: {
            SubordinatedFlag = input.ReadBool();
            break;
          }
          case 88: {
            CollateralFlag = input.ReadBool();
            break;
          }
          case 96: {
            TaxFreeFlag = input.ReadBool();
            break;
          }
          case 104: {
            AmortizationFlag = input.ReadBool();
            break;
          }
          case 112: {
            FloatingCouponFlag = input.ReadBool();
            break;
          }
          case 120: {
            PerpetualFlag = input.ReadBool();
            break;
          }
          case 130: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 138: {
            ReturnCondition = input.ReadString();
            break;
          }
          case 146: {
            if (stateRegDate_ == null) {
              StateRegDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StateRegDate);
            break;
          }
          case 154: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 162: {
            if (placementPrice_ == null) {
              PlacementPrice = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PlacementPrice);
            break;
          }
          case 170: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Структурная нота.
  /// </summary>
  public sealed partial class AssetStructuredProduct : pb::IMessage<AssetStructuredProduct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetStructuredProduct> _parser = new pb::MessageParser<AssetStructuredProduct>(() => new AssetStructuredProduct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetStructuredProduct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetStructuredProduct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetStructuredProduct(AssetStructuredProduct other) : this() {
      borrowName_ = other.borrowName_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      type_ = other.type_;
      logicPortfolio_ = other.logicPortfolio_;
      assetType_ = other.assetType_;
      basicAsset_ = other.basicAsset_;
      safetyBarrier_ = other.safetyBarrier_ != null ? other.safetyBarrier_.Clone() : null;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      issueSizePlan_ = other.issueSizePlan_ != null ? other.issueSizePlan_.Clone() : null;
      issueSize_ = other.issueSize_ != null ? other.issueSize_.Clone() : null;
      placementDate_ = other.placementDate_ != null ? other.placementDate_.Clone() : null;
      issueKind_ = other.issueKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetStructuredProduct Clone() {
      return new AssetStructuredProduct(this);
    }

    /// <summary>Field number for the "borrow_name" field.</summary>
    public const int BorrowNameFieldNumber = 1;
    private string borrowName_ = "";
    /// <summary>
    ///Наименование заемщика.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BorrowName {
      get { return borrowName_; }
      set {
        borrowName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 3;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Tinkoff.Proto.InvestApi.V1.StructuredProductType type_ = global::Tinkoff.Proto.InvestApi.V1.StructuredProductType.SpTypeUnspecified;
    /// <summary>
    ///Тип структурной ноты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.StructuredProductType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "logic_portfolio" field.</summary>
    public const int LogicPortfolioFieldNumber = 5;
    private string logicPortfolio_ = "";
    /// <summary>
    ///Стратегия портфеля.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogicPortfolio {
      get { return logicPortfolio_; }
      set {
        logicPortfolio_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 6;
    private global::Tinkoff.Proto.InvestApi.V1.AssetType assetType_ = global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified;
    /// <summary>
    ///Тип базового актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.AssetType AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }

    /// <summary>Field number for the "basic_asset" field.</summary>
    public const int BasicAssetFieldNumber = 7;
    private string basicAsset_ = "";
    /// <summary>
    ///Вид базового актива в зависимости от типа базового актива.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BasicAsset {
      get { return basicAsset_; }
      set {
        basicAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "safety_barrier" field.</summary>
    public const int SafetyBarrierFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation safetyBarrier_;
    /// <summary>
    ///Барьер сохранности (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation SafetyBarrier {
      get { return safetyBarrier_; }
      set {
        safetyBarrier_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maturityDate_;
    /// <summary>
    ///Дата погашения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_size_plan" field.</summary>
    public const int IssueSizePlanFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation issueSizePlan_;
    /// <summary>
    ///Объявленное количество шт.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IssueSizePlan {
      get { return issueSizePlan_; }
      set {
        issueSizePlan_ = value;
      }
    }

    /// <summary>Field number for the "issue_size" field.</summary>
    public const int IssueSizeFieldNumber = 11;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation issueSize_;
    /// <summary>
    ///Объем размещения.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IssueSize {
      get { return issueSize_; }
      set {
        issueSize_ = value;
      }
    }

    /// <summary>Field number for the "placement_date" field.</summary>
    public const int PlacementDateFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp placementDate_;
    /// <summary>
    ///Дата размещения ноты.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp PlacementDate {
      get { return placementDate_; }
      set {
        placementDate_ = value;
      }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 13;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetStructuredProduct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetStructuredProduct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BorrowName != other.BorrowName) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      if (Type != other.Type) return false;
      if (LogicPortfolio != other.LogicPortfolio) return false;
      if (AssetType != other.AssetType) return false;
      if (BasicAsset != other.BasicAsset) return false;
      if (!object.Equals(SafetyBarrier, other.SafetyBarrier)) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(IssueSizePlan, other.IssueSizePlan)) return false;
      if (!object.Equals(IssueSize, other.IssueSize)) return false;
      if (!object.Equals(PlacementDate, other.PlacementDate)) return false;
      if (IssueKind != other.IssueKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BorrowName.Length != 0) hash ^= BorrowName.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (Type != global::Tinkoff.Proto.InvestApi.V1.StructuredProductType.SpTypeUnspecified) hash ^= Type.GetHashCode();
      if (LogicPortfolio.Length != 0) hash ^= LogicPortfolio.GetHashCode();
      if (AssetType != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) hash ^= AssetType.GetHashCode();
      if (BasicAsset.Length != 0) hash ^= BasicAsset.GetHashCode();
      if (safetyBarrier_ != null) hash ^= SafetyBarrier.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (issueSizePlan_ != null) hash ^= IssueSizePlan.GetHashCode();
      if (issueSize_ != null) hash ^= IssueSize.GetHashCode();
      if (placementDate_ != null) hash ^= PlacementDate.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BorrowName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BorrowName);
      }
      if (nominal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NominalCurrency);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (LogicPortfolio.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogicPortfolio);
      }
      if (AssetType != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BasicAsset);
      }
      if (safetyBarrier_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SafetyBarrier);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MaturityDate);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(IssueSizePlan);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(IssueSize);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IssueKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BorrowName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BorrowName);
      }
      if (nominal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NominalCurrency);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (LogicPortfolio.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogicPortfolio);
      }
      if (AssetType != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) AssetType);
      }
      if (BasicAsset.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BasicAsset);
      }
      if (safetyBarrier_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SafetyBarrier);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MaturityDate);
      }
      if (issueSizePlan_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(IssueSizePlan);
      }
      if (issueSize_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(IssueSize);
      }
      if (placementDate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PlacementDate);
      }
      if (IssueKind.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(IssueKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BorrowName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BorrowName);
      }
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (Type != global::Tinkoff.Proto.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (LogicPortfolio.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogicPortfolio);
      }
      if (AssetType != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetType);
      }
      if (BasicAsset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BasicAsset);
      }
      if (safetyBarrier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SafetyBarrier);
      }
      if (maturityDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (issueSizePlan_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSizePlan);
      }
      if (issueSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssueSize);
      }
      if (placementDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlacementDate);
      }
      if (IssueKind.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetStructuredProduct other) {
      if (other == null) {
        return;
      }
      if (other.BorrowName.Length != 0) {
        BorrowName = other.BorrowName;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      if (other.Type != global::Tinkoff.Proto.InvestApi.V1.StructuredProductType.SpTypeUnspecified) {
        Type = other.Type;
      }
      if (other.LogicPortfolio.Length != 0) {
        LogicPortfolio = other.LogicPortfolio;
      }
      if (other.AssetType != global::Tinkoff.Proto.InvestApi.V1.AssetType.Unspecified) {
        AssetType = other.AssetType;
      }
      if (other.BasicAsset.Length != 0) {
        BasicAsset = other.BasicAsset;
      }
      if (other.safetyBarrier_ != null) {
        if (safetyBarrier_ == null) {
          SafetyBarrier = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        SafetyBarrier.MergeFrom(other.SafetyBarrier);
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.issueSizePlan_ != null) {
        if (issueSizePlan_ == null) {
          IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IssueSizePlan.MergeFrom(other.IssueSizePlan);
      }
      if (other.issueSize_ != null) {
        if (issueSize_ == null) {
          IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IssueSize.MergeFrom(other.IssueSize);
      }
      if (other.placementDate_ != null) {
        if (placementDate_ == null) {
          PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        PlacementDate.MergeFrom(other.PlacementDate);
      }
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BorrowName = input.ReadString();
            break;
          }
          case 18: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 26: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.StructuredProductType) input.ReadEnum();
            break;
          }
          case 42: {
            LogicPortfolio = input.ReadString();
            break;
          }
          case 48: {
            AssetType = (global::Tinkoff.Proto.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 58: {
            BasicAsset = input.ReadString();
            break;
          }
          case 66: {
            if (safetyBarrier_ == null) {
              SafetyBarrier = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SafetyBarrier);
            break;
          }
          case 74: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 82: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 90: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            IssueKind = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BorrowName = input.ReadString();
            break;
          }
          case 18: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 26: {
            NominalCurrency = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Tinkoff.Proto.InvestApi.V1.StructuredProductType) input.ReadEnum();
            break;
          }
          case 42: {
            LogicPortfolio = input.ReadString();
            break;
          }
          case 48: {
            AssetType = (global::Tinkoff.Proto.InvestApi.V1.AssetType) input.ReadEnum();
            break;
          }
          case 58: {
            BasicAsset = input.ReadString();
            break;
          }
          case 66: {
            if (safetyBarrier_ == null) {
              SafetyBarrier = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SafetyBarrier);
            break;
          }
          case 74: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 82: {
            if (issueSizePlan_ == null) {
              IssueSizePlan = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSizePlan);
            break;
          }
          case 90: {
            if (issueSize_ == null) {
              IssueSize = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IssueSize);
            break;
          }
          case 98: {
            if (placementDate_ == null) {
              PlacementDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(PlacementDate);
            break;
          }
          case 106: {
            IssueKind = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Фонд.
  /// </summary>
  public sealed partial class AssetEtf : pb::IMessage<AssetEtf>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetEtf> _parser = new pb::MessageParser<AssetEtf>(() => new AssetEtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetEtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetEtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetEtf(AssetEtf other) : this() {
      totalExpense_ = other.totalExpense_ != null ? other.totalExpense_.Clone() : null;
      hurdleRate_ = other.hurdleRate_ != null ? other.hurdleRate_.Clone() : null;
      performanceFee_ = other.performanceFee_ != null ? other.performanceFee_.Clone() : null;
      fixedCommission_ = other.fixedCommission_ != null ? other.fixedCommission_.Clone() : null;
      paymentType_ = other.paymentType_;
      watermarkFlag_ = other.watermarkFlag_;
      buyPremium_ = other.buyPremium_ != null ? other.buyPremium_.Clone() : null;
      sellDiscount_ = other.sellDiscount_ != null ? other.sellDiscount_.Clone() : null;
      rebalancingFlag_ = other.rebalancingFlag_;
      rebalancingFreq_ = other.rebalancingFreq_;
      managementType_ = other.managementType_;
      primaryIndex_ = other.primaryIndex_;
      focusType_ = other.focusType_;
      leveragedFlag_ = other.leveragedFlag_;
      numShare_ = other.numShare_ != null ? other.numShare_.Clone() : null;
      ucitsFlag_ = other.ucitsFlag_;
      releasedDate_ = other.releasedDate_ != null ? other.releasedDate_.Clone() : null;
      description_ = other.description_;
      primaryIndexDescription_ = other.primaryIndexDescription_;
      primaryIndexCompany_ = other.primaryIndexCompany_;
      indexRecoveryPeriod_ = other.indexRecoveryPeriod_ != null ? other.indexRecoveryPeriod_.Clone() : null;
      inavCode_ = other.inavCode_;
      divYieldFlag_ = other.divYieldFlag_;
      expenseCommission_ = other.expenseCommission_ != null ? other.expenseCommission_.Clone() : null;
      primaryIndexTrackingError_ = other.primaryIndexTrackingError_ != null ? other.primaryIndexTrackingError_.Clone() : null;
      rebalancingPlan_ = other.rebalancingPlan_;
      taxRate_ = other.taxRate_;
      rebalancingDates_ = other.rebalancingDates_.Clone();
      issueKind_ = other.issueKind_;
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetEtf Clone() {
      return new AssetEtf(this);
    }

    /// <summary>Field number for the "total_expense" field.</summary>
    public const int TotalExpenseFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation totalExpense_;
    /// <summary>
    ///Суммарные расходы фонда (в %).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation TotalExpense {
      get { return totalExpense_; }
      set {
        totalExpense_ = value;
      }
    }

    /// <summary>Field number for the "hurdle_rate" field.</summary>
    public const int HurdleRateFieldNumber = 2;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation hurdleRate_;
    /// <summary>
    ///Барьерная ставка доходности после которой фонд имеет право на perfomance fee (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation HurdleRate {
      get { return hurdleRate_; }
      set {
        hurdleRate_ = value;
      }
    }

    /// <summary>Field number for the "performance_fee" field.</summary>
    public const int PerformanceFeeFieldNumber = 3;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation performanceFee_;
    /// <summary>
    ///Комиссия за успешные результаты фонда (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation PerformanceFee {
      get { return performanceFee_; }
      set {
        performanceFee_ = value;
      }
    }

    /// <summary>Field number for the "fixed_commission" field.</summary>
    public const int FixedCommissionFieldNumber = 4;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation fixedCommission_;
    /// <summary>
    ///Фиксированная комиссия за управление (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation FixedCommission {
      get { return fixedCommission_; }
      set {
        fixedCommission_ = value;
      }
    }

    /// <summary>Field number for the "payment_type" field.</summary>
    public const int PaymentTypeFieldNumber = 5;
    private string paymentType_ = "";
    /// <summary>
    ///Тип распределения доходов от выплат по бумагам.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PaymentType {
      get { return paymentType_; }
      set {
        paymentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "watermark_flag" field.</summary>
    public const int WatermarkFlagFieldNumber = 6;
    private bool watermarkFlag_;
    /// <summary>
    ///Признак необходимости выхода фонда в плюс для получения комиссии.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WatermarkFlag {
      get { return watermarkFlag_; }
      set {
        watermarkFlag_ = value;
      }
    }

    /// <summary>Field number for the "buy_premium" field.</summary>
    public const int BuyPremiumFieldNumber = 7;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation buyPremium_;
    /// <summary>
    ///Премия (надбавка к цене) при покупке доли в фонде (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation BuyPremium {
      get { return buyPremium_; }
      set {
        buyPremium_ = value;
      }
    }

    /// <summary>Field number for the "sell_discount" field.</summary>
    public const int SellDiscountFieldNumber = 8;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation sellDiscount_;
    /// <summary>
    ///Ставка дисконта (вычет из цены) при продаже доли в фонде (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation SellDiscount {
      get { return sellDiscount_; }
      set {
        sellDiscount_ = value;
      }
    }

    /// <summary>Field number for the "rebalancing_flag" field.</summary>
    public const int RebalancingFlagFieldNumber = 9;
    private bool rebalancingFlag_;
    /// <summary>
    ///Признак ребалансируемости портфеля фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RebalancingFlag {
      get { return rebalancingFlag_; }
      set {
        rebalancingFlag_ = value;
      }
    }

    /// <summary>Field number for the "rebalancing_freq" field.</summary>
    public const int RebalancingFreqFieldNumber = 10;
    private string rebalancingFreq_ = "";
    /// <summary>
    ///Периодичность ребалансировки.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingFreq {
      get { return rebalancingFreq_; }
      set {
        rebalancingFreq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "management_type" field.</summary>
    public const int ManagementTypeFieldNumber = 11;
    private string managementType_ = "";
    /// <summary>
    ///Тип управления.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ManagementType {
      get { return managementType_; }
      set {
        managementType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index" field.</summary>
    public const int PrimaryIndexFieldNumber = 12;
    private string primaryIndex_ = "";
    /// <summary>
    ///Индекс, который реплицирует (старается копировать) фонд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndex {
      get { return primaryIndex_; }
      set {
        primaryIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "focus_type" field.</summary>
    public const int FocusTypeFieldNumber = 13;
    private string focusType_ = "";
    /// <summary>
    ///База ETF.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FocusType {
      get { return focusType_; }
      set {
        focusType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leveraged_flag" field.</summary>
    public const int LeveragedFlagFieldNumber = 14;
    private bool leveragedFlag_;
    /// <summary>
    ///Признак использования заемных активов (плечо).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LeveragedFlag {
      get { return leveragedFlag_; }
      set {
        leveragedFlag_ = value;
      }
    }

    /// <summary>Field number for the "num_share" field.</summary>
    public const int NumShareFieldNumber = 15;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation numShare_;
    /// <summary>
    ///Количество акций в обращении.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation NumShare {
      get { return numShare_; }
      set {
        numShare_ = value;
      }
    }

    /// <summary>Field number for the "ucits_flag" field.</summary>
    public const int UcitsFlagFieldNumber = 16;
    private bool ucitsFlag_;
    /// <summary>
    ///Признак обязательства по отчетности перед регулятором.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UcitsFlag {
      get { return ucitsFlag_; }
      set {
        ucitsFlag_ = value;
      }
    }

    /// <summary>Field number for the "released_date" field.</summary>
    public const int ReleasedDateFieldNumber = 17;
    private global::Google.Protobuf.WellKnownTypes.Timestamp releasedDate_;
    /// <summary>
    ///Дата выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ReleasedDate {
      get { return releasedDate_; }
      set {
        releasedDate_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 18;
    private string description_ = "";
    /// <summary>
    ///Описание фонда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index_description" field.</summary>
    public const int PrimaryIndexDescriptionFieldNumber = 19;
    private string primaryIndexDescription_ = "";
    /// <summary>
    ///Описание индекса, за которым следует фонд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndexDescription {
      get { return primaryIndexDescription_; }
      set {
        primaryIndexDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_index_company" field.</summary>
    public const int PrimaryIndexCompanyFieldNumber = 20;
    private string primaryIndexCompany_ = "";
    /// <summary>
    ///Основные компании, в которые вкладывается фонд.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrimaryIndexCompany {
      get { return primaryIndexCompany_; }
      set {
        primaryIndexCompany_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index_recovery_period" field.</summary>
    public const int IndexRecoveryPeriodFieldNumber = 21;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation indexRecoveryPeriod_;
    /// <summary>
    ///Срок восстановления индекса (после просадки).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation IndexRecoveryPeriod {
      get { return indexRecoveryPeriod_; }
      set {
        indexRecoveryPeriod_ = value;
      }
    }

    /// <summary>Field number for the "inav_code" field.</summary>
    public const int InavCodeFieldNumber = 22;
    private string inavCode_ = "";
    /// <summary>
    ///IVAV-код.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InavCode {
      get { return inavCode_; }
      set {
        inavCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "div_yield_flag" field.</summary>
    public const int DivYieldFlagFieldNumber = 23;
    private bool divYieldFlag_;
    /// <summary>
    ///Признак наличия дивидендной доходности.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DivYieldFlag {
      get { return divYieldFlag_; }
      set {
        divYieldFlag_ = value;
      }
    }

    /// <summary>Field number for the "expense_commission" field.</summary>
    public const int ExpenseCommissionFieldNumber = 24;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation expenseCommission_;
    /// <summary>
    ///Комиссия на покрытие расходов фонда (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation ExpenseCommission {
      get { return expenseCommission_; }
      set {
        expenseCommission_ = value;
      }
    }

    /// <summary>Field number for the "primary_index_tracking_error" field.</summary>
    public const int PrimaryIndexTrackingErrorFieldNumber = 25;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation primaryIndexTrackingError_;
    /// <summary>
    ///Ошибка следования за индексом (в процентах).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation PrimaryIndexTrackingError {
      get { return primaryIndexTrackingError_; }
      set {
        primaryIndexTrackingError_ = value;
      }
    }

    /// <summary>Field number for the "rebalancing_plan" field.</summary>
    public const int RebalancingPlanFieldNumber = 26;
    private string rebalancingPlan_ = "";
    /// <summary>
    ///Плановая ребалансировка портфеля.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RebalancingPlan {
      get { return rebalancingPlan_; }
      set {
        rebalancingPlan_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tax_rate" field.</summary>
    public const int TaxRateFieldNumber = 27;
    private string taxRate_ = "";
    /// <summary>
    ///Ставки налогообложения дивидендов и купонов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TaxRate {
      get { return taxRate_; }
      set {
        taxRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rebalancing_dates" field.</summary>
    public const int RebalancingDatesFieldNumber = 28;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Timestamp> _repeated_rebalancingDates_codec
        = pb::FieldCodec.ForMessage(226, global::Google.Protobuf.WellKnownTypes.Timestamp.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> rebalancingDates_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp>();
    /// <summary>
    ///Даты ребалансировок.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> RebalancingDates {
      get { return rebalancingDates_; }
    }

    /// <summary>Field number for the "issue_kind" field.</summary>
    public const int IssueKindFieldNumber = 29;
    private string issueKind_ = "";
    /// <summary>
    ///Форма выпуска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IssueKind {
      get { return issueKind_; }
      set {
        issueKind_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 30;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 31;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetEtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetEtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TotalExpense, other.TotalExpense)) return false;
      if (!object.Equals(HurdleRate, other.HurdleRate)) return false;
      if (!object.Equals(PerformanceFee, other.PerformanceFee)) return false;
      if (!object.Equals(FixedCommission, other.FixedCommission)) return false;
      if (PaymentType != other.PaymentType) return false;
      if (WatermarkFlag != other.WatermarkFlag) return false;
      if (!object.Equals(BuyPremium, other.BuyPremium)) return false;
      if (!object.Equals(SellDiscount, other.SellDiscount)) return false;
      if (RebalancingFlag != other.RebalancingFlag) return false;
      if (RebalancingFreq != other.RebalancingFreq) return false;
      if (ManagementType != other.ManagementType) return false;
      if (PrimaryIndex != other.PrimaryIndex) return false;
      if (FocusType != other.FocusType) return false;
      if (LeveragedFlag != other.LeveragedFlag) return false;
      if (!object.Equals(NumShare, other.NumShare)) return false;
      if (UcitsFlag != other.UcitsFlag) return false;
      if (!object.Equals(ReleasedDate, other.ReleasedDate)) return false;
      if (Description != other.Description) return false;
      if (PrimaryIndexDescription != other.PrimaryIndexDescription) return false;
      if (PrimaryIndexCompany != other.PrimaryIndexCompany) return false;
      if (!object.Equals(IndexRecoveryPeriod, other.IndexRecoveryPeriod)) return false;
      if (InavCode != other.InavCode) return false;
      if (DivYieldFlag != other.DivYieldFlag) return false;
      if (!object.Equals(ExpenseCommission, other.ExpenseCommission)) return false;
      if (!object.Equals(PrimaryIndexTrackingError, other.PrimaryIndexTrackingError)) return false;
      if (RebalancingPlan != other.RebalancingPlan) return false;
      if (TaxRate != other.TaxRate) return false;
      if(!rebalancingDates_.Equals(other.rebalancingDates_)) return false;
      if (IssueKind != other.IssueKind) return false;
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (totalExpense_ != null) hash ^= TotalExpense.GetHashCode();
      if (hurdleRate_ != null) hash ^= HurdleRate.GetHashCode();
      if (performanceFee_ != null) hash ^= PerformanceFee.GetHashCode();
      if (fixedCommission_ != null) hash ^= FixedCommission.GetHashCode();
      if (PaymentType.Length != 0) hash ^= PaymentType.GetHashCode();
      if (WatermarkFlag != false) hash ^= WatermarkFlag.GetHashCode();
      if (buyPremium_ != null) hash ^= BuyPremium.GetHashCode();
      if (sellDiscount_ != null) hash ^= SellDiscount.GetHashCode();
      if (RebalancingFlag != false) hash ^= RebalancingFlag.GetHashCode();
      if (RebalancingFreq.Length != 0) hash ^= RebalancingFreq.GetHashCode();
      if (ManagementType.Length != 0) hash ^= ManagementType.GetHashCode();
      if (PrimaryIndex.Length != 0) hash ^= PrimaryIndex.GetHashCode();
      if (FocusType.Length != 0) hash ^= FocusType.GetHashCode();
      if (LeveragedFlag != false) hash ^= LeveragedFlag.GetHashCode();
      if (numShare_ != null) hash ^= NumShare.GetHashCode();
      if (UcitsFlag != false) hash ^= UcitsFlag.GetHashCode();
      if (releasedDate_ != null) hash ^= ReleasedDate.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (PrimaryIndexDescription.Length != 0) hash ^= PrimaryIndexDescription.GetHashCode();
      if (PrimaryIndexCompany.Length != 0) hash ^= PrimaryIndexCompany.GetHashCode();
      if (indexRecoveryPeriod_ != null) hash ^= IndexRecoveryPeriod.GetHashCode();
      if (InavCode.Length != 0) hash ^= InavCode.GetHashCode();
      if (DivYieldFlag != false) hash ^= DivYieldFlag.GetHashCode();
      if (expenseCommission_ != null) hash ^= ExpenseCommission.GetHashCode();
      if (primaryIndexTrackingError_ != null) hash ^= PrimaryIndexTrackingError.GetHashCode();
      if (RebalancingPlan.Length != 0) hash ^= RebalancingPlan.GetHashCode();
      if (TaxRate.Length != 0) hash ^= TaxRate.GetHashCode();
      hash ^= rebalancingDates_.GetHashCode();
      if (IssueKind.Length != 0) hash ^= IssueKind.GetHashCode();
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (totalExpense_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TotalExpense);
      }
      if (hurdleRate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HurdleRate);
      }
      if (performanceFee_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PerformanceFee);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixedCommission);
      }
      if (PaymentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentType);
      }
      if (WatermarkFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(WatermarkFlag);
      }
      if (buyPremium_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BuyPremium);
      }
      if (sellDiscount_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SellDiscount);
      }
      if (RebalancingFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(RebalancingFlag);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RebalancingFreq);
      }
      if (ManagementType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ManagementType);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PrimaryIndex);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FocusType);
      }
      if (LeveragedFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(LeveragedFlag);
      }
      if (numShare_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(NumShare);
      }
      if (UcitsFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(UcitsFlag);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Description);
      }
      if (PrimaryIndexDescription.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PrimaryIndexDescription);
      }
      if (PrimaryIndexCompany.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PrimaryIndexCompany);
      }
      if (indexRecoveryPeriod_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IndexRecoveryPeriod);
      }
      if (InavCode.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(InavCode);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (expenseCommission_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpenseCommission);
      }
      if (primaryIndexTrackingError_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PrimaryIndexTrackingError);
      }
      if (RebalancingPlan.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(RebalancingPlan);
      }
      if (TaxRate.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(TaxRate);
      }
      rebalancingDates_.WriteTo(output, _repeated_rebalancingDates_codec);
      if (IssueKind.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueKind);
      }
      if (nominal_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (totalExpense_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TotalExpense);
      }
      if (hurdleRate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HurdleRate);
      }
      if (performanceFee_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PerformanceFee);
      }
      if (fixedCommission_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FixedCommission);
      }
      if (PaymentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentType);
      }
      if (WatermarkFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(WatermarkFlag);
      }
      if (buyPremium_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BuyPremium);
      }
      if (sellDiscount_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SellDiscount);
      }
      if (RebalancingFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(RebalancingFlag);
      }
      if (RebalancingFreq.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RebalancingFreq);
      }
      if (ManagementType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ManagementType);
      }
      if (PrimaryIndex.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PrimaryIndex);
      }
      if (FocusType.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(FocusType);
      }
      if (LeveragedFlag != false) {
        output.WriteRawTag(112);
        output.WriteBool(LeveragedFlag);
      }
      if (numShare_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(NumShare);
      }
      if (UcitsFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(UcitsFlag);
      }
      if (releasedDate_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ReleasedDate);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Description);
      }
      if (PrimaryIndexDescription.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(PrimaryIndexDescription);
      }
      if (PrimaryIndexCompany.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(PrimaryIndexCompany);
      }
      if (indexRecoveryPeriod_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(IndexRecoveryPeriod);
      }
      if (InavCode.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(InavCode);
      }
      if (DivYieldFlag != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DivYieldFlag);
      }
      if (expenseCommission_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ExpenseCommission);
      }
      if (primaryIndexTrackingError_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PrimaryIndexTrackingError);
      }
      if (RebalancingPlan.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(RebalancingPlan);
      }
      if (TaxRate.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(TaxRate);
      }
      rebalancingDates_.WriteTo(ref output, _repeated_rebalancingDates_codec);
      if (IssueKind.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(IssueKind);
      }
      if (nominal_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (totalExpense_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalExpense);
      }
      if (hurdleRate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HurdleRate);
      }
      if (performanceFee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PerformanceFee);
      }
      if (fixedCommission_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedCommission);
      }
      if (PaymentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentType);
      }
      if (WatermarkFlag != false) {
        size += 1 + 1;
      }
      if (buyPremium_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuyPremium);
      }
      if (sellDiscount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellDiscount);
      }
      if (RebalancingFlag != false) {
        size += 1 + 1;
      }
      if (RebalancingFreq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RebalancingFreq);
      }
      if (ManagementType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ManagementType);
      }
      if (PrimaryIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndex);
      }
      if (FocusType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FocusType);
      }
      if (LeveragedFlag != false) {
        size += 1 + 1;
      }
      if (numShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NumShare);
      }
      if (UcitsFlag != false) {
        size += 2 + 1;
      }
      if (releasedDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReleasedDate);
      }
      if (Description.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (PrimaryIndexDescription.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndexDescription);
      }
      if (PrimaryIndexCompany.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrimaryIndexCompany);
      }
      if (indexRecoveryPeriod_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndexRecoveryPeriod);
      }
      if (InavCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InavCode);
      }
      if (DivYieldFlag != false) {
        size += 2 + 1;
      }
      if (expenseCommission_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpenseCommission);
      }
      if (primaryIndexTrackingError_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrimaryIndexTrackingError);
      }
      if (RebalancingPlan.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RebalancingPlan);
      }
      if (TaxRate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TaxRate);
      }
      size += rebalancingDates_.CalculateSize(_repeated_rebalancingDates_codec);
      if (IssueKind.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(IssueKind);
      }
      if (nominal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetEtf other) {
      if (other == null) {
        return;
      }
      if (other.totalExpense_ != null) {
        if (totalExpense_ == null) {
          TotalExpense = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        TotalExpense.MergeFrom(other.TotalExpense);
      }
      if (other.hurdleRate_ != null) {
        if (hurdleRate_ == null) {
          HurdleRate = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        HurdleRate.MergeFrom(other.HurdleRate);
      }
      if (other.performanceFee_ != null) {
        if (performanceFee_ == null) {
          PerformanceFee = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        PerformanceFee.MergeFrom(other.PerformanceFee);
      }
      if (other.fixedCommission_ != null) {
        if (fixedCommission_ == null) {
          FixedCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        FixedCommission.MergeFrom(other.FixedCommission);
      }
      if (other.PaymentType.Length != 0) {
        PaymentType = other.PaymentType;
      }
      if (other.WatermarkFlag != false) {
        WatermarkFlag = other.WatermarkFlag;
      }
      if (other.buyPremium_ != null) {
        if (buyPremium_ == null) {
          BuyPremium = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        BuyPremium.MergeFrom(other.BuyPremium);
      }
      if (other.sellDiscount_ != null) {
        if (sellDiscount_ == null) {
          SellDiscount = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        SellDiscount.MergeFrom(other.SellDiscount);
      }
      if (other.RebalancingFlag != false) {
        RebalancingFlag = other.RebalancingFlag;
      }
      if (other.RebalancingFreq.Length != 0) {
        RebalancingFreq = other.RebalancingFreq;
      }
      if (other.ManagementType.Length != 0) {
        ManagementType = other.ManagementType;
      }
      if (other.PrimaryIndex.Length != 0) {
        PrimaryIndex = other.PrimaryIndex;
      }
      if (other.FocusType.Length != 0) {
        FocusType = other.FocusType;
      }
      if (other.LeveragedFlag != false) {
        LeveragedFlag = other.LeveragedFlag;
      }
      if (other.numShare_ != null) {
        if (numShare_ == null) {
          NumShare = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        NumShare.MergeFrom(other.NumShare);
      }
      if (other.UcitsFlag != false) {
        UcitsFlag = other.UcitsFlag;
      }
      if (other.releasedDate_ != null) {
        if (releasedDate_ == null) {
          ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ReleasedDate.MergeFrom(other.ReleasedDate);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.PrimaryIndexDescription.Length != 0) {
        PrimaryIndexDescription = other.PrimaryIndexDescription;
      }
      if (other.PrimaryIndexCompany.Length != 0) {
        PrimaryIndexCompany = other.PrimaryIndexCompany;
      }
      if (other.indexRecoveryPeriod_ != null) {
        if (indexRecoveryPeriod_ == null) {
          IndexRecoveryPeriod = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        IndexRecoveryPeriod.MergeFrom(other.IndexRecoveryPeriod);
      }
      if (other.InavCode.Length != 0) {
        InavCode = other.InavCode;
      }
      if (other.DivYieldFlag != false) {
        DivYieldFlag = other.DivYieldFlag;
      }
      if (other.expenseCommission_ != null) {
        if (expenseCommission_ == null) {
          ExpenseCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        ExpenseCommission.MergeFrom(other.ExpenseCommission);
      }
      if (other.primaryIndexTrackingError_ != null) {
        if (primaryIndexTrackingError_ == null) {
          PrimaryIndexTrackingError = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        PrimaryIndexTrackingError.MergeFrom(other.PrimaryIndexTrackingError);
      }
      if (other.RebalancingPlan.Length != 0) {
        RebalancingPlan = other.RebalancingPlan;
      }
      if (other.TaxRate.Length != 0) {
        TaxRate = other.TaxRate;
      }
      rebalancingDates_.Add(other.rebalancingDates_);
      if (other.IssueKind.Length != 0) {
        IssueKind = other.IssueKind;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (totalExpense_ == null) {
              TotalExpense = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalExpense);
            break;
          }
          case 18: {
            if (hurdleRate_ == null) {
              HurdleRate = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(HurdleRate);
            break;
          }
          case 26: {
            if (performanceFee_ == null) {
              PerformanceFee = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PerformanceFee);
            break;
          }
          case 34: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 42: {
            PaymentType = input.ReadString();
            break;
          }
          case 48: {
            WatermarkFlag = input.ReadBool();
            break;
          }
          case 58: {
            if (buyPremium_ == null) {
              BuyPremium = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BuyPremium);
            break;
          }
          case 66: {
            if (sellDiscount_ == null) {
              SellDiscount = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SellDiscount);
            break;
          }
          case 72: {
            RebalancingFlag = input.ReadBool();
            break;
          }
          case 82: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 90: {
            ManagementType = input.ReadString();
            break;
          }
          case 98: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 106: {
            FocusType = input.ReadString();
            break;
          }
          case 112: {
            LeveragedFlag = input.ReadBool();
            break;
          }
          case 122: {
            if (numShare_ == null) {
              NumShare = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShare);
            break;
          }
          case 128: {
            UcitsFlag = input.ReadBool();
            break;
          }
          case 138: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 146: {
            Description = input.ReadString();
            break;
          }
          case 154: {
            PrimaryIndexDescription = input.ReadString();
            break;
          }
          case 162: {
            PrimaryIndexCompany = input.ReadString();
            break;
          }
          case 170: {
            if (indexRecoveryPeriod_ == null) {
              IndexRecoveryPeriod = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IndexRecoveryPeriod);
            break;
          }
          case 178: {
            InavCode = input.ReadString();
            break;
          }
          case 184: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 194: {
            if (expenseCommission_ == null) {
              ExpenseCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ExpenseCommission);
            break;
          }
          case 202: {
            if (primaryIndexTrackingError_ == null) {
              PrimaryIndexTrackingError = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PrimaryIndexTrackingError);
            break;
          }
          case 210: {
            RebalancingPlan = input.ReadString();
            break;
          }
          case 218: {
            TaxRate = input.ReadString();
            break;
          }
          case 226: {
            rebalancingDates_.AddEntriesFrom(input, _repeated_rebalancingDates_codec);
            break;
          }
          case 234: {
            IssueKind = input.ReadString();
            break;
          }
          case 242: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 250: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (totalExpense_ == null) {
              TotalExpense = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(TotalExpense);
            break;
          }
          case 18: {
            if (hurdleRate_ == null) {
              HurdleRate = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(HurdleRate);
            break;
          }
          case 26: {
            if (performanceFee_ == null) {
              PerformanceFee = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PerformanceFee);
            break;
          }
          case 34: {
            if (fixedCommission_ == null) {
              FixedCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(FixedCommission);
            break;
          }
          case 42: {
            PaymentType = input.ReadString();
            break;
          }
          case 48: {
            WatermarkFlag = input.ReadBool();
            break;
          }
          case 58: {
            if (buyPremium_ == null) {
              BuyPremium = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(BuyPremium);
            break;
          }
          case 66: {
            if (sellDiscount_ == null) {
              SellDiscount = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(SellDiscount);
            break;
          }
          case 72: {
            RebalancingFlag = input.ReadBool();
            break;
          }
          case 82: {
            RebalancingFreq = input.ReadString();
            break;
          }
          case 90: {
            ManagementType = input.ReadString();
            break;
          }
          case 98: {
            PrimaryIndex = input.ReadString();
            break;
          }
          case 106: {
            FocusType = input.ReadString();
            break;
          }
          case 112: {
            LeveragedFlag = input.ReadBool();
            break;
          }
          case 122: {
            if (numShare_ == null) {
              NumShare = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(NumShare);
            break;
          }
          case 128: {
            UcitsFlag = input.ReadBool();
            break;
          }
          case 138: {
            if (releasedDate_ == null) {
              ReleasedDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ReleasedDate);
            break;
          }
          case 146: {
            Description = input.ReadString();
            break;
          }
          case 154: {
            PrimaryIndexDescription = input.ReadString();
            break;
          }
          case 162: {
            PrimaryIndexCompany = input.ReadString();
            break;
          }
          case 170: {
            if (indexRecoveryPeriod_ == null) {
              IndexRecoveryPeriod = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(IndexRecoveryPeriod);
            break;
          }
          case 178: {
            InavCode = input.ReadString();
            break;
          }
          case 184: {
            DivYieldFlag = input.ReadBool();
            break;
          }
          case 194: {
            if (expenseCommission_ == null) {
              ExpenseCommission = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(ExpenseCommission);
            break;
          }
          case 202: {
            if (primaryIndexTrackingError_ == null) {
              PrimaryIndexTrackingError = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(PrimaryIndexTrackingError);
            break;
          }
          case 210: {
            RebalancingPlan = input.ReadString();
            break;
          }
          case 218: {
            TaxRate = input.ReadString();
            break;
          }
          case 226: {
            rebalancingDates_.AddEntriesFrom(ref input, _repeated_rebalancingDates_codec);
            break;
          }
          case 234: {
            IssueKind = input.ReadString();
            break;
          }
          case 242: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 250: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Клиринговый сертификат участия.
  /// </summary>
  public sealed partial class AssetClearingCertificate : pb::IMessage<AssetClearingCertificate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetClearingCertificate> _parser = new pb::MessageParser<AssetClearingCertificate>(() => new AssetClearingCertificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetClearingCertificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetClearingCertificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetClearingCertificate(AssetClearingCertificate other) : this() {
      nominal_ = other.nominal_ != null ? other.nominal_.Clone() : null;
      nominalCurrency_ = other.nominalCurrency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetClearingCertificate Clone() {
      return new AssetClearingCertificate(this);
    }

    /// <summary>Field number for the "nominal" field.</summary>
    public const int NominalFieldNumber = 1;
    private global::Tinkoff.Proto.InvestApi.V1.Quotation nominal_;
    /// <summary>
    ///Номинал.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.Quotation Nominal {
      get { return nominal_; }
      set {
        nominal_ = value;
      }
    }

    /// <summary>Field number for the "nominal_currency" field.</summary>
    public const int NominalCurrencyFieldNumber = 2;
    private string nominalCurrency_ = "";
    /// <summary>
    ///Валюта номинала.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NominalCurrency {
      get { return nominalCurrency_; }
      set {
        nominalCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetClearingCertificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetClearingCertificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Nominal, other.Nominal)) return false;
      if (NominalCurrency != other.NominalCurrency) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (nominal_ != null) hash ^= Nominal.GetHashCode();
      if (NominalCurrency.Length != 0) hash ^= NominalCurrency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (nominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (nominal_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NominalCurrency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (nominal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nominal);
      }
      if (NominalCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NominalCurrency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetClearingCertificate other) {
      if (other == null) {
        return;
      }
      if (other.nominal_ != null) {
        if (nominal_ == null) {
          Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
        }
        Nominal.MergeFrom(other.Nominal);
      }
      if (other.NominalCurrency.Length != 0) {
        NominalCurrency = other.NominalCurrency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 18: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (nominal_ == null) {
              Nominal = new global::Tinkoff.Proto.InvestApi.V1.Quotation();
            }
            input.ReadMessage(Nominal);
            break;
          }
          case 18: {
            NominalCurrency = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Бренд.
  /// </summary>
  public sealed partial class Brand : pb::IMessage<Brand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Brand> _parser = new pb::MessageParser<Brand>(() => new Brand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Brand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Brand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Brand(Brand other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      description_ = other.description_;
      info_ = other.info_;
      company_ = other.company_;
      sector_ = other.sector_;
      countryOfRisk_ = other.countryOfRisk_;
      countryOfRiskName_ = other.countryOfRiskName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Brand Clone() {
      return new Brand(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///uid идентификатор бренда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///Наименование бренда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///Описание.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private string info_ = "";
    /// <summary>
    ///Информация о бренде.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "company" field.</summary>
    public const int CompanyFieldNumber = 5;
    private string company_ = "";
    /// <summary>
    ///Компания.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Company {
      get { return company_; }
      set {
        company_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sector" field.</summary>
    public const int SectorFieldNumber = 6;
    private string sector_ = "";
    /// <summary>
    ///Сектор.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sector {
      get { return sector_; }
      set {
        sector_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk" field.</summary>
    public const int CountryOfRiskFieldNumber = 7;
    private string countryOfRisk_ = "";
    /// <summary>
    ///Код страны риска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRisk {
      get { return countryOfRisk_; }
      set {
        countryOfRisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country_of_risk_name" field.</summary>
    public const int CountryOfRiskNameFieldNumber = 8;
    private string countryOfRiskName_ = "";
    /// <summary>
    ///Наименование страны риска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CountryOfRiskName {
      get { return countryOfRiskName_; }
      set {
        countryOfRiskName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Brand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Brand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Info != other.Info) return false;
      if (Company != other.Company) return false;
      if (Sector != other.Sector) return false;
      if (CountryOfRisk != other.CountryOfRisk) return false;
      if (CountryOfRiskName != other.CountryOfRiskName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (Company.Length != 0) hash ^= Company.GetHashCode();
      if (Sector.Length != 0) hash ^= Sector.GetHashCode();
      if (CountryOfRisk.Length != 0) hash ^= CountryOfRisk.GetHashCode();
      if (CountryOfRiskName.Length != 0) hash ^= CountryOfRiskName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
      if (Company.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Company);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sector);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CountryOfRiskName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
      if (Company.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Company);
      }
      if (Sector.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Sector);
      }
      if (CountryOfRisk.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CountryOfRiskName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (Company.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Company);
      }
      if (Sector.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sector);
      }
      if (CountryOfRisk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryOfRisk);
      }
      if (CountryOfRiskName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CountryOfRiskName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Brand other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.Company.Length != 0) {
        Company = other.Company;
      }
      if (other.Sector.Length != 0) {
        Sector = other.Sector;
      }
      if (other.CountryOfRisk.Length != 0) {
        CountryOfRisk = other.CountryOfRisk;
      }
      if (other.CountryOfRiskName.Length != 0) {
        CountryOfRiskName = other.CountryOfRiskName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
          case 42: {
            Company = input.ReadString();
            break;
          }
          case 50: {
            Sector = input.ReadString();
            break;
          }
          case 58: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 66: {
            CountryOfRiskName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
          case 42: {
            Company = input.ReadString();
            break;
          }
          case 50: {
            Sector = input.ReadString();
            break;
          }
          case 58: {
            CountryOfRisk = input.ReadString();
            break;
          }
          case 66: {
            CountryOfRiskName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Идентификаторы инструмента.
  /// </summary>
  public sealed partial class AssetInstrument : pb::IMessage<AssetInstrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetInstrument> _parser = new pb::MessageParser<AssetInstrument>(() => new AssetInstrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AssetInstrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetInstrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetInstrument(AssetInstrument other) : this() {
      uid_ = other.uid_;
      figi_ = other.figi_;
      instrumentType_ = other.instrumentType_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      links_ = other.links_.Clone();
      instrumentKind_ = other.instrumentKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AssetInstrument Clone() {
      return new AssetInstrument(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    /// <summary>
    ///uid идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 2;
    private string figi_ = "";
    /// <summary>
    ///figi идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 3;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 4;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 5;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код (секция торгов).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.InstrumentLink> _repeated_links_codec
        = pb::FieldCodec.ForMessage(50, global::Tinkoff.Proto.InvestApi.V1.InstrumentLink.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.InstrumentLink> links_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.InstrumentLink>();
    /// <summary>
    ///Массив связанных инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.InstrumentLink> Links {
      get { return links_; }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AssetInstrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AssetInstrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Figi != other.Figi) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if(!links_.Equals(other.links_)) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      hash ^= links_.GetHashCode();
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentType);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassCode);
      }
      links_.WriteTo(output, _repeated_links_codec);
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstrumentType);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassCode);
      }
      links_.WriteTo(ref output, _repeated_links_codec);
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      size += links_.CalculateSize(_repeated_links_codec);
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AssetInstrument other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      links_.Add(other.links_);
      if (other.InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            InstrumentType = input.ReadString();
            break;
          }
          case 34: {
            Ticker = input.ReadString();
            break;
          }
          case 42: {
            ClassCode = input.ReadString();
            break;
          }
          case 50: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            InstrumentType = input.ReadString();
            break;
          }
          case 34: {
            Ticker = input.ReadString();
            break;
          }
          case 42: {
            ClassCode = input.ReadString();
            break;
          }
          case 50: {
            links_.AddEntriesFrom(ref input, _repeated_links_codec);
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Связь с другим инструментом.
  /// </summary>
  public sealed partial class InstrumentLink : pb::IMessage<InstrumentLink>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentLink> _parser = new pb::MessageParser<InstrumentLink>(() => new InstrumentLink());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentLink> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentLink() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentLink(InstrumentLink other) : this() {
      type_ = other.type_;
      instrumentUid_ = other.instrumentUid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentLink Clone() {
      return new InstrumentLink(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///Тип связи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_uid" field.</summary>
    public const int InstrumentUidFieldNumber = 2;
    private string instrumentUid_ = "";
    /// <summary>
    ///uid идентификатор связанного инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentUid {
      get { return instrumentUid_; }
      set {
        instrumentUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentLink);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentLink other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (InstrumentUid != other.InstrumentUid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (InstrumentUid.Length != 0) hash ^= InstrumentUid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (InstrumentUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (InstrumentUid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstrumentUid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (InstrumentUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentUid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentLink other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.InstrumentUid.Length != 0) {
        InstrumentUid = other.InstrumentUid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            InstrumentUid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            InstrumentUid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос списка избранных инструментов, входные параметры не требуются.
  /// </summary>
  public sealed partial class GetFavoritesRequest : pb::IMessage<GetFavoritesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFavoritesRequest> _parser = new pb::MessageParser<GetFavoritesRequest>(() => new GetFavoritesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFavoritesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesRequest(GetFavoritesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesRequest Clone() {
      return new GetFavoritesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFavoritesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFavoritesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFavoritesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///В ответ передаётся список избранных инструментов в качестве массива.
  /// </summary>
  public sealed partial class GetFavoritesResponse : pb::IMessage<GetFavoritesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFavoritesResponse> _parser = new pb::MessageParser<GetFavoritesResponse>(() => new GetFavoritesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFavoritesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesResponse(GetFavoritesResponse other) : this() {
      favoriteInstruments_ = other.favoriteInstruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFavoritesResponse Clone() {
      return new GetFavoritesResponse(this);
    }

    /// <summary>Field number for the "favorite_instruments" field.</summary>
    public const int FavoriteInstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument> _repeated_favoriteInstruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument> favoriteInstruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument>();
    /// <summary>
    ///Массив инструментов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument> FavoriteInstruments {
      get { return favoriteInstruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFavoritesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFavoritesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!favoriteInstruments_.Equals(other.favoriteInstruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= favoriteInstruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      favoriteInstruments_.WriteTo(output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      favoriteInstruments_.WriteTo(ref output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += favoriteInstruments_.CalculateSize(_repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFavoritesResponse other) {
      if (other == null) {
        return;
      }
      favoriteInstruments_.Add(other.favoriteInstruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(ref input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Массив избранных инструментов.
  /// </summary>
  public sealed partial class FavoriteInstrument : pb::IMessage<FavoriteInstrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FavoriteInstrument> _parser = new pb::MessageParser<FavoriteInstrument>(() => new FavoriteInstrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FavoriteInstrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FavoriteInstrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FavoriteInstrument(FavoriteInstrument other) : this() {
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      isin_ = other.isin_;
      instrumentType_ = other.instrumentType_;
      otcFlag_ = other.otcFlag_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      instrumentKind_ = other.instrumentKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FavoriteInstrument Clone() {
      return new FavoriteInstrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 2;
    private string ticker_ = "";
    /// <summary>
    ///Тикер инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 3;
    private string classCode_ = "";
    /// <summary>
    ///Класс-код инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 4;
    private string isin_ = "";
    /// <summary>
    ///Isin-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 11;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "otc_flag" field.</summary>
    public const int OtcFlagFieldNumber = 16;
    private bool otcFlag_;
    /// <summary>
    ///Признак внебиржевой ценной бумаги.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OtcFlag {
      get { return otcFlag_; }
      set {
        otcFlag_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 17;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 18;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FavoriteInstrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FavoriteInstrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Isin != other.Isin) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (OtcFlag != other.OtcFlag) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (OtcFlag != false) hash ^= OtcFlag.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(InstrumentType);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OtcFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassCode);
      }
      if (Isin.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Isin);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(InstrumentType);
      }
      if (OtcFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OtcFlag);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (OtcFlag != false) {
        size += 2 + 1;
      }
      if (ApiTradeAvailableFlag != false) {
        size += 2 + 1;
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FavoriteInstrument other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.OtcFlag != false) {
        OtcFlag = other.OtcFlag;
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 90: {
            InstrumentType = input.ReadString();
            break;
          }
          case 128: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 136: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 144: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
          case 18: {
            Ticker = input.ReadString();
            break;
          }
          case 26: {
            ClassCode = input.ReadString();
            break;
          }
          case 34: {
            Isin = input.ReadString();
            break;
          }
          case 90: {
            InstrumentType = input.ReadString();
            break;
          }
          case 128: {
            OtcFlag = input.ReadBool();
            break;
          }
          case 136: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 144: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос редактирования списка избранных инструментов.
  /// </summary>
  public sealed partial class EditFavoritesRequest : pb::IMessage<EditFavoritesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditFavoritesRequest> _parser = new pb::MessageParser<EditFavoritesRequest>(() => new EditFavoritesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EditFavoritesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequest(EditFavoritesRequest other) : this() {
      instruments_ = other.instruments_.Clone();
      actionType_ = other.actionType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequest Clone() {
      return new EditFavoritesRequest(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument>();
    /// <summary>
    ///Массив инструментов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.EditFavoritesRequestInstrument> Instruments {
      get { return instruments_; }
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 6;
    private global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType actionType_ = global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType.Unspecified;
    /// <summary>
    ///Тип действия со списком.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EditFavoritesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EditFavoritesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      if (ActionType != other.ActionType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (ActionType != global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType.Unspecified) hash ^= ActionType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (ActionType != global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (ActionType != global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ActionType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (ActionType != global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EditFavoritesRequest other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      if (other.ActionType != global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType.Unspecified) {
        ActionType = other.ActionType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
          case 48: {
            ActionType = (global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
          case 48: {
            ActionType = (global::Tinkoff.Proto.InvestApi.V1.EditFavoritesActionType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Массив инструментов для редактирования списка избранных инструментов.
  /// </summary>
  public sealed partial class EditFavoritesRequestInstrument : pb::IMessage<EditFavoritesRequestInstrument>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditFavoritesRequestInstrument> _parser = new pb::MessageParser<EditFavoritesRequestInstrument>(() => new EditFavoritesRequestInstrument());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EditFavoritesRequestInstrument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequestInstrument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequestInstrument(EditFavoritesRequestInstrument other) : this() {
      figi_ = other.figi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesRequestInstrument Clone() {
      return new EditFavoritesRequestInstrument(this);
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 1;
    private string figi_ = "";
    /// <summary>
    ///Figi-идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EditFavoritesRequestInstrument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EditFavoritesRequestInstrument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Figi != other.Figi) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Figi.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Figi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EditFavoritesRequestInstrument other) {
      if (other == null) {
        return;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Figi = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Результат редактирования списка избранных инструментов.
  /// </summary>
  public sealed partial class EditFavoritesResponse : pb::IMessage<EditFavoritesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EditFavoritesResponse> _parser = new pb::MessageParser<EditFavoritesResponse>(() => new EditFavoritesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EditFavoritesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesResponse(EditFavoritesResponse other) : this() {
      favoriteInstruments_ = other.favoriteInstruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EditFavoritesResponse Clone() {
      return new EditFavoritesResponse(this);
    }

    /// <summary>Field number for the "favorite_instruments" field.</summary>
    public const int FavoriteInstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument> _repeated_favoriteInstruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument> favoriteInstruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument>();
    /// <summary>
    ///Массив инструментов
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.FavoriteInstrument> FavoriteInstruments {
      get { return favoriteInstruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EditFavoritesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EditFavoritesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!favoriteInstruments_.Equals(other.favoriteInstruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= favoriteInstruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      favoriteInstruments_.WriteTo(output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      favoriteInstruments_.WriteTo(ref output, _repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += favoriteInstruments_.CalculateSize(_repeated_favoriteInstruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EditFavoritesResponse other) {
      if (other == null) {
        return;
      }
      favoriteInstruments_.Add(other.favoriteInstruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            favoriteInstruments_.AddEntriesFrom(ref input, _repeated_favoriteInstruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос справочника стран.
  /// </summary>
  public sealed partial class GetCountriesRequest : pb::IMessage<GetCountriesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetCountriesRequest> _parser = new pb::MessageParser<GetCountriesRequest>(() => new GetCountriesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetCountriesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesRequest(GetCountriesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesRequest Clone() {
      return new GetCountriesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetCountriesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetCountriesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetCountriesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Справочник стран.
  /// </summary>
  public sealed partial class GetCountriesResponse : pb::IMessage<GetCountriesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetCountriesResponse> _parser = new pb::MessageParser<GetCountriesResponse>(() => new GetCountriesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetCountriesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesResponse(GetCountriesResponse other) : this() {
      countries_ = other.countries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetCountriesResponse Clone() {
      return new GetCountriesResponse(this);
    }

    /// <summary>Field number for the "countries" field.</summary>
    public const int CountriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.CountryResponse> _repeated_countries_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.CountryResponse.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.CountryResponse> countries_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.CountryResponse>();
    /// <summary>
    ///Массив стран.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.CountryResponse> Countries {
      get { return countries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetCountriesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetCountriesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!countries_.Equals(other.countries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= countries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      countries_.WriteTo(output, _repeated_countries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      countries_.WriteTo(ref output, _repeated_countries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += countries_.CalculateSize(_repeated_countries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetCountriesResponse other) {
      if (other == null) {
        return;
      }
      countries_.Add(other.countries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            countries_.AddEntriesFrom(input, _repeated_countries_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            countries_.AddEntriesFrom(ref input, _repeated_countries_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Данные о стране.
  /// </summary>
  public sealed partial class CountryResponse : pb::IMessage<CountryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CountryResponse> _parser = new pb::MessageParser<CountryResponse>(() => new CountryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CountryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CountryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CountryResponse(CountryResponse other) : this() {
      alfaTwo_ = other.alfaTwo_;
      alfaThree_ = other.alfaThree_;
      name_ = other.name_;
      nameBrief_ = other.nameBrief_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CountryResponse Clone() {
      return new CountryResponse(this);
    }

    /// <summary>Field number for the "alfa_two" field.</summary>
    public const int AlfaTwoFieldNumber = 1;
    private string alfaTwo_ = "";
    /// <summary>
    ///Двухбуквенный код страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlfaTwo {
      get { return alfaTwo_; }
      set {
        alfaTwo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alfa_three" field.</summary>
    public const int AlfaThreeFieldNumber = 2;
    private string alfaThree_ = "";
    /// <summary>
    ///Трёхбуквенный код страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlfaThree {
      get { return alfaThree_; }
      set {
        alfaThree_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Наименование страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_brief" field.</summary>
    public const int NameBriefFieldNumber = 4;
    private string nameBrief_ = "";
    /// <summary>
    ///Краткое наименование страны.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NameBrief {
      get { return nameBrief_; }
      set {
        nameBrief_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CountryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CountryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlfaTwo != other.AlfaTwo) return false;
      if (AlfaThree != other.AlfaThree) return false;
      if (Name != other.Name) return false;
      if (NameBrief != other.NameBrief) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AlfaTwo.Length != 0) hash ^= AlfaTwo.GetHashCode();
      if (AlfaThree.Length != 0) hash ^= AlfaThree.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NameBrief.Length != 0) hash ^= NameBrief.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AlfaTwo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlfaTwo);
      }
      if (AlfaThree.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AlfaThree);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AlfaTwo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlfaTwo);
      }
      if (AlfaThree.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AlfaThree);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (NameBrief.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameBrief);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AlfaTwo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlfaTwo);
      }
      if (AlfaThree.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlfaThree);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NameBrief.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameBrief);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CountryResponse other) {
      if (other == null) {
        return;
      }
      if (other.AlfaTwo.Length != 0) {
        AlfaTwo = other.AlfaTwo;
      }
      if (other.AlfaThree.Length != 0) {
        AlfaThree = other.AlfaThree;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NameBrief.Length != 0) {
        NameBrief = other.NameBrief;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AlfaTwo = input.ReadString();
            break;
          }
          case 18: {
            AlfaThree = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AlfaTwo = input.ReadString();
            break;
          }
          case 18: {
            AlfaThree = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            NameBrief = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос на поиск инструментов.
  /// </summary>
  public sealed partial class FindInstrumentRequest : pb::IMessage<FindInstrumentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FindInstrumentRequest> _parser = new pb::MessageParser<FindInstrumentRequest>(() => new FindInstrumentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FindInstrumentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentRequest(FindInstrumentRequest other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentRequest Clone() {
      return new FindInstrumentRequest(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    /// <summary>
    ///Строка поиска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FindInstrumentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FindInstrumentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FindInstrumentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Результат поиска инструментов.
  /// </summary>
  public sealed partial class FindInstrumentResponse : pb::IMessage<FindInstrumentResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FindInstrumentResponse> _parser = new pb::MessageParser<FindInstrumentResponse>(() => new FindInstrumentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FindInstrumentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentResponse(FindInstrumentResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FindInstrumentResponse Clone() {
      return new FindInstrumentResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.InstrumentShort> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.InstrumentShort.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.InstrumentShort> instruments_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.InstrumentShort>();
    /// <summary>
    ///Массив инструментов, удовлетворяющих условиям поиска.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.InstrumentShort> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FindInstrumentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FindInstrumentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      instruments_.WriteTo(ref output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FindInstrumentResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(ref input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Краткая информация об инструменте.
  /// </summary>
  public sealed partial class InstrumentShort : pb::IMessage<InstrumentShort>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentShort> _parser = new pb::MessageParser<InstrumentShort>(() => new InstrumentShort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentShort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentShort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentShort(InstrumentShort other) : this() {
      isin_ = other.isin_;
      figi_ = other.figi_;
      ticker_ = other.ticker_;
      classCode_ = other.classCode_;
      instrumentType_ = other.instrumentType_;
      name_ = other.name_;
      uid_ = other.uid_;
      positionUid_ = other.positionUid_;
      instrumentKind_ = other.instrumentKind_;
      apiTradeAvailableFlag_ = other.apiTradeAvailableFlag_;
      forIisFlag_ = other.forIisFlag_;
      first1MinCandleDate_ = other.first1MinCandleDate_ != null ? other.first1MinCandleDate_.Clone() : null;
      first1DayCandleDate_ = other.first1DayCandleDate_ != null ? other.first1DayCandleDate_.Clone() : null;
      forQualInvestorFlag_ = other.forQualInvestorFlag_;
      weekendFlag_ = other.weekendFlag_;
      blockedTcaFlag_ = other.blockedTcaFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentShort Clone() {
      return new InstrumentShort(this);
    }

    /// <summary>Field number for the "isin" field.</summary>
    public const int IsinFieldNumber = 1;
    private string isin_ = "";
    /// <summary>
    ///Isin инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Isin {
      get { return isin_; }
      set {
        isin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "figi" field.</summary>
    public const int FigiFieldNumber = 2;
    private string figi_ = "";
    /// <summary>
    ///Figi инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Figi {
      get { return figi_; }
      set {
        figi_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 3;
    private string ticker_ = "";
    /// <summary>
    ///Ticker инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ticker {
      get { return ticker_; }
      set {
        ticker_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 4;
    private string classCode_ = "";
    /// <summary>
    ///ClassCode инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_type" field.</summary>
    public const int InstrumentTypeFieldNumber = 5;
    private string instrumentType_ = "";
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InstrumentType {
      get { return instrumentType_; }
      set {
        instrumentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///Название инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 7;
    private string uid_ = "";
    /// <summary>
    ///Уникальный идентификатор инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position_uid" field.</summary>
    public const int PositionUidFieldNumber = 8;
    private string positionUid_ = "";
    /// <summary>
    ///Уникальный идентификатор позиции инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionUid {
      get { return positionUid_; }
      set {
        positionUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instrument_kind" field.</summary>
    public const int InstrumentKindFieldNumber = 10;
    private global::Tinkoff.Proto.InvestApi.V1.InstrumentType instrumentKind_ = global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified;
    /// <summary>
    ///Тип инструмента.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Tinkoff.Proto.InvestApi.V1.InstrumentType InstrumentKind {
      get { return instrumentKind_; }
      set {
        instrumentKind_ = value;
      }
    }

    /// <summary>Field number for the "api_trade_available_flag" field.</summary>
    public const int ApiTradeAvailableFlagFieldNumber = 11;
    private bool apiTradeAvailableFlag_;
    /// <summary>
    ///Параметр указывает на возможность торговать инструментом через API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApiTradeAvailableFlag {
      get { return apiTradeAvailableFlag_; }
      set {
        apiTradeAvailableFlag_ = value;
      }
    }

    /// <summary>Field number for the "for_iis_flag" field.</summary>
    public const int ForIisFlagFieldNumber = 12;
    private bool forIisFlag_;
    /// <summary>
    ///Признак доступности для ИИС.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForIisFlag {
      get { return forIisFlag_; }
      set {
        forIisFlag_ = value;
      }
    }

    /// <summary>Field number for the "first_1min_candle_date" field.</summary>
    public const int First1MinCandleDateFieldNumber = 26;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1MinCandleDate_;
    /// <summary>
    ///Дата первой минутной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1MinCandleDate {
      get { return first1MinCandleDate_; }
      set {
        first1MinCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "first_1day_candle_date" field.</summary>
    public const int First1DayCandleDateFieldNumber = 27;
    private global::Google.Protobuf.WellKnownTypes.Timestamp first1DayCandleDate_;
    /// <summary>
    ///Дата первой дневной свечи.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp First1DayCandleDate {
      get { return first1DayCandleDate_; }
      set {
        first1DayCandleDate_ = value;
      }
    }

    /// <summary>Field number for the "for_qual_investor_flag" field.</summary>
    public const int ForQualInvestorFlagFieldNumber = 28;
    private bool forQualInvestorFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForQualInvestorFlag {
      get { return forQualInvestorFlag_; }
      set {
        forQualInvestorFlag_ = value;
      }
    }

    /// <summary>Field number for the "weekend_flag" field.</summary>
    public const int WeekendFlagFieldNumber = 29;
    private bool weekendFlag_;
    /// <summary>
    ///Флаг отображающий доступность торговли инструментом по выходным
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WeekendFlag {
      get { return weekendFlag_; }
      set {
        weekendFlag_ = value;
      }
    }

    /// <summary>Field number for the "blocked_tca_flag" field.</summary>
    public const int BlockedTcaFlagFieldNumber = 30;
    private bool blockedTcaFlag_;
    /// <summary>
    ///Флаг заблокированного ТКС
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BlockedTcaFlag {
      get { return blockedTcaFlag_; }
      set {
        blockedTcaFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentShort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentShort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Isin != other.Isin) return false;
      if (Figi != other.Figi) return false;
      if (Ticker != other.Ticker) return false;
      if (ClassCode != other.ClassCode) return false;
      if (InstrumentType != other.InstrumentType) return false;
      if (Name != other.Name) return false;
      if (Uid != other.Uid) return false;
      if (PositionUid != other.PositionUid) return false;
      if (InstrumentKind != other.InstrumentKind) return false;
      if (ApiTradeAvailableFlag != other.ApiTradeAvailableFlag) return false;
      if (ForIisFlag != other.ForIisFlag) return false;
      if (!object.Equals(First1MinCandleDate, other.First1MinCandleDate)) return false;
      if (!object.Equals(First1DayCandleDate, other.First1DayCandleDate)) return false;
      if (ForQualInvestorFlag != other.ForQualInvestorFlag) return false;
      if (WeekendFlag != other.WeekendFlag) return false;
      if (BlockedTcaFlag != other.BlockedTcaFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Isin.Length != 0) hash ^= Isin.GetHashCode();
      if (Figi.Length != 0) hash ^= Figi.GetHashCode();
      if (Ticker.Length != 0) hash ^= Ticker.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (InstrumentType.Length != 0) hash ^= InstrumentType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (PositionUid.Length != 0) hash ^= PositionUid.GetHashCode();
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) hash ^= InstrumentKind.GetHashCode();
      if (ApiTradeAvailableFlag != false) hash ^= ApiTradeAvailableFlag.GetHashCode();
      if (ForIisFlag != false) hash ^= ForIisFlag.GetHashCode();
      if (first1MinCandleDate_ != null) hash ^= First1MinCandleDate.GetHashCode();
      if (first1DayCandleDate_ != null) hash ^= First1DayCandleDate.GetHashCode();
      if (ForQualInvestorFlag != false) hash ^= ForQualInvestorFlag.GetHashCode();
      if (WeekendFlag != false) hash ^= WeekendFlag.GetHashCode();
      if (BlockedTcaFlag != false) hash ^= BlockedTcaFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstrumentType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PositionUid);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ForIisFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(BlockedTcaFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Isin.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Isin);
      }
      if (Figi.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Figi);
      }
      if (Ticker.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ticker);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (InstrumentType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstrumentType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Uid);
      }
      if (PositionUid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PositionUid);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) InstrumentKind);
      }
      if (ApiTradeAvailableFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(ApiTradeAvailableFlag);
      }
      if (ForIisFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(ForIisFlag);
      }
      if (first1MinCandleDate_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(First1DayCandleDate);
      }
      if (ForQualInvestorFlag != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(ForQualInvestorFlag);
      }
      if (WeekendFlag != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(WeekendFlag);
      }
      if (BlockedTcaFlag != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(BlockedTcaFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Isin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Isin);
      }
      if (Figi.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Figi);
      }
      if (Ticker.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticker);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (InstrumentType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (PositionUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionUid);
      }
      if (InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InstrumentKind);
      }
      if (ApiTradeAvailableFlag != false) {
        size += 1 + 1;
      }
      if (ForIisFlag != false) {
        size += 1 + 1;
      }
      if (first1MinCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1MinCandleDate);
      }
      if (first1DayCandleDate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(First1DayCandleDate);
      }
      if (ForQualInvestorFlag != false) {
        size += 2 + 1;
      }
      if (WeekendFlag != false) {
        size += 2 + 1;
      }
      if (BlockedTcaFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentShort other) {
      if (other == null) {
        return;
      }
      if (other.Isin.Length != 0) {
        Isin = other.Isin;
      }
      if (other.Figi.Length != 0) {
        Figi = other.Figi;
      }
      if (other.Ticker.Length != 0) {
        Ticker = other.Ticker;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.InstrumentType.Length != 0) {
        InstrumentType = other.InstrumentType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.PositionUid.Length != 0) {
        PositionUid = other.PositionUid;
      }
      if (other.InstrumentKind != global::Tinkoff.Proto.InvestApi.V1.InstrumentType.Unspecified) {
        InstrumentKind = other.InstrumentKind;
      }
      if (other.ApiTradeAvailableFlag != false) {
        ApiTradeAvailableFlag = other.ApiTradeAvailableFlag;
      }
      if (other.ForIisFlag != false) {
        ForIisFlag = other.ForIisFlag;
      }
      if (other.first1MinCandleDate_ != null) {
        if (first1MinCandleDate_ == null) {
          First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1MinCandleDate.MergeFrom(other.First1MinCandleDate);
      }
      if (other.first1DayCandleDate_ != null) {
        if (first1DayCandleDate_ == null) {
          First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        First1DayCandleDate.MergeFrom(other.First1DayCandleDate);
      }
      if (other.ForQualInvestorFlag != false) {
        ForQualInvestorFlag = other.ForQualInvestorFlag;
      }
      if (other.WeekendFlag != false) {
        WeekendFlag = other.WeekendFlag;
      }
      if (other.BlockedTcaFlag != false) {
        BlockedTcaFlag = other.BlockedTcaFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            InstrumentType = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Uid = input.ReadString();
            break;
          }
          case 66: {
            PositionUid = input.ReadString();
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 88: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 96: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 210: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 218: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 224: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 232: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 240: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Isin = input.ReadString();
            break;
          }
          case 18: {
            Figi = input.ReadString();
            break;
          }
          case 26: {
            Ticker = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            InstrumentType = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Uid = input.ReadString();
            break;
          }
          case 66: {
            PositionUid = input.ReadString();
            break;
          }
          case 80: {
            InstrumentKind = (global::Tinkoff.Proto.InvestApi.V1.InstrumentType) input.ReadEnum();
            break;
          }
          case 88: {
            ApiTradeAvailableFlag = input.ReadBool();
            break;
          }
          case 96: {
            ForIisFlag = input.ReadBool();
            break;
          }
          case 210: {
            if (first1MinCandleDate_ == null) {
              First1MinCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1MinCandleDate);
            break;
          }
          case 218: {
            if (first1DayCandleDate_ == null) {
              First1DayCandleDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(First1DayCandleDate);
            break;
          }
          case 224: {
            ForQualInvestorFlag = input.ReadBool();
            break;
          }
          case 232: {
            WeekendFlag = input.ReadBool();
            break;
          }
          case 240: {
            BlockedTcaFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос списка брендов.
  /// </summary>
  public sealed partial class GetBrandsRequest : pb::IMessage<GetBrandsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBrandsRequest> _parser = new pb::MessageParser<GetBrandsRequest>(() => new GetBrandsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBrandsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsRequest(GetBrandsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsRequest Clone() {
      return new GetBrandsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBrandsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBrandsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBrandsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Запрос бренда.
  /// </summary>
  public sealed partial class GetBrandRequest : pb::IMessage<GetBrandRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBrandRequest> _parser = new pb::MessageParser<GetBrandRequest>(() => new GetBrandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBrandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandRequest(GetBrandRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandRequest Clone() {
      return new GetBrandRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///Uid-идентификатор бренда.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBrandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBrandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBrandRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Список брендов.
  /// </summary>
  public sealed partial class GetBrandsResponse : pb::IMessage<GetBrandsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetBrandsResponse> _parser = new pb::MessageParser<GetBrandsResponse>(() => new GetBrandsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetBrandsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tinkoff.Proto.InvestApi.V1.InstrumentsReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsResponse(GetBrandsResponse other) : this() {
      brands_ = other.brands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetBrandsResponse Clone() {
      return new GetBrandsResponse(this);
    }

    /// <summary>Field number for the "brands" field.</summary>
    public const int BrandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tinkoff.Proto.InvestApi.V1.Brand> _repeated_brands_codec
        = pb::FieldCodec.ForMessage(10, global::Tinkoff.Proto.InvestApi.V1.Brand.Parser);
    private readonly pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Brand> brands_ = new pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Brand>();
    /// <summary>
    ///Массив брендов.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Tinkoff.Proto.InvestApi.V1.Brand> Brands {
      get { return brands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetBrandsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetBrandsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!brands_.Equals(other.brands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= brands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      brands_.WriteTo(output, _repeated_brands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      brands_.WriteTo(ref output, _repeated_brands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += brands_.CalculateSize(_repeated_brands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetBrandsResponse other) {
      if (other == null) {
        return;
      }
      brands_.Add(other.brands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            brands_.AddEntriesFrom(input, _repeated_brands_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            brands_.AddEntriesFrom(ref input, _repeated_brands_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
